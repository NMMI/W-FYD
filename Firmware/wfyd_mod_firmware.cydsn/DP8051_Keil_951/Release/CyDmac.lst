C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYDMAC
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\CyDmac.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CyDmac.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG)
                    - WL(2) PR(.\DP8051_Keil_951\Release/CyDmac.lst) CD OT(8,SPEED) OJ(.\DP8051_Keil_951\Release\CyDmac.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /*******************************************************************************
   2          * File Name: CyDmac.c
   3          * Version 5.20
   4          *
   5          * Description:
   6          *  Provides an API for the DMAC component. The API includes functions for the
   7          *  DMA controller, DMA channels and Transfer Descriptors.
   8          *
   9          *  This API is the library version not the auto generated code that gets
  10          *  generated when the user places a DMA component on the schematic.
  11          *
  12          *  The auto generated code would use the APi's in this module.
  13          *
  14          * Note:
  15          *  This code is endian agnostic.
  16          *
  17          *  The Transfer Descriptor memory can be used as regular memory if the TD's are
  18          *  not being used.
  19          *
  20          *  This code uses the first byte of each TD to manage the free list of TD's.
  21          *  The user can overwrite this once the TD is allocated.
  22          *
  23          ********************************************************************************
  24          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  25          * You may use this file only in accordance with the license, terms, conditions,
  26          * disclaimers, and limitations in the end user license agreement accompanying
  27          * the software package with which this file was provided.
  28          *******************************************************************************/
  29          
  30          #include "CyDmac.h"
  31          
  32          
  33          /*******************************************************************************
  34          * The following variables are initialized from CyDmacConfigure() function that
  35          * is executed from initialize_psoc() at the early initialization stage.
  36          * In case of IAR EW IDE, initialize_psoc() is executed before the data sections
  37          * are initialized. To avoid zeroing, these variables should be initialized
  38          * properly during segments initialization as well.
  39          *******************************************************************************/
  40          static uint8  CyDmaTdCurrentNumber = CY_DMA_NUMBEROF_TDS;           /* Current Number of free elements on 
             -list */
  41          static uint8  CyDmaTdFreeIndex = (uint8)(CY_DMA_NUMBEROF_TDS - 1u); /* Index of first available TD */
  42          static uint32 CyDmaChannels = DMA_CHANNELS_USED__MASK0;              /* Bit map of DMA channel ownership *
             -/
  43          
  44          
  45          /*******************************************************************************
  46          * Function Name: CyDmacConfigure
  47          ********************************************************************************
  48          *
  49          * Summary:
  50          *  Creates a linked list of all the TDs to be allocated. This function is called
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 2   

  51          *  by the startup code; you do not normally need to call it. You can call this
  52          *  function if all of the DMA channels are inactive.
  53          *
  54          * Parameters:
  55          *  None
  56          *
  57          * Return:
  58          *  None
  59          *
  60          *******************************************************************************/
  61          void CyDmacConfigure(void) 
  62          {
  63   1          uint8 dmaIndex;
  64   1      
  65   1          /* Set TD list variables. */
  66   1          CyDmaTdFreeIndex     = (uint8)(CY_DMA_NUMBEROF_TDS - 1u);
  67   1          CyDmaTdCurrentNumber = CY_DMA_NUMBEROF_TDS;
  68   1      
  69   1          /* Make TD free list. */
  70   1          for(dmaIndex = (uint8)(CY_DMA_NUMBEROF_TDS - 1u); dmaIndex != 0u; dmaIndex--)
  71   1          {
  72   2              CY_DMA_TDMEM_STRUCT_PTR[dmaIndex].TD0[0u] = (uint8)(dmaIndex - 1u);
  73   2          }
  74   1      
  75   1          /* Make last one point to zero. */
  76   1          CY_DMA_TDMEM_STRUCT_PTR[dmaIndex].TD0[0u] = 0u;
  77   1      }
  78          
  79          
  80          /*******************************************************************************
  81          * Function Name: CyDmacError
  82          ********************************************************************************
  83          *
  84          * Summary:
  85          *  Returns errors of the last failed DMA transaction.
  86          *
  87          * Parameters:
  88          *  None
  89          *
  90          * Return:
  91          *  Errors of the last failed DMA transaction.
  92          *
  93          *  DMAC_PERIPH_ERR:
  94          *   Set to 1 when a peripheral responds to a bus transaction with an error
  95          *   response.
  96          *
  97          *  DMAC_UNPOP_ACC:
  98          *   Set to 1 when an access is attempted to an invalid address.
  99          *
 100          *  DMAC_BUS_TIMEOUT:
 101          *   Set to 1 when a bus timeout occurs. Cleared by writing a 1. Timeout values
 102          *   are determined by the BUS_TIMEOUT field in the PHUBCFG register.
 103          *
 104          * Theory:
 105          *  Once an error occurs the error bits are sticky and are only cleared by
 106          *  writing 1 to the error register.
 107          *
 108          *******************************************************************************/
 109          uint8 CyDmacError(void) 
 110          {
 111   1          return((uint8)(((uint32) 0x0Eu) & *CY_DMA_ERR_PTR));
 112   1      }
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 3   

 113          
 114          
 115          /*******************************************************************************
 116          * Function Name: CyDmacClearError
 117          ********************************************************************************
 118          *
 119          * Summary:
 120          *  Clears the error bits in the error register of the DMAC.
 121          *
 122          * Parameters:
 123          * error:
 124          *   Clears the error bits in the DMAC error register.
 125          *
 126          *  DMAC_PERIPH_ERR:
 127          *   Set to 1 when a peripheral responds to a bus transaction with an error
 128          *   response.
 129          *
 130          *  DMAC_UNPOP_ACC:
 131          *   Set to 1 when an access is attempted to an invalid address.
 132          *
 133          *  DMAC_BUS_TIMEOUT:
 134          *   Set to 1 when a bus timeout occurs. Cleared by writing 1. Timeout values
 135          *   are determined by the BUS_TIMEOUT field in the PHUBCFG register.
 136          *
 137          * Return:
 138          *  None
 139          *
 140          * Theory:
 141          *  Once an error occurs the error bits are sticky and are only cleared by
 142          *  writing 1 to the error register.
 143          *
 144          *******************************************************************************/
 145          void CyDmacClearError(uint8 error) 
 146          {
 147   1          *CY_DMA_ERR_PTR = (((uint32)0x0Fu) & ((uint32)error));
 148   1      }
 149          
 150          
 151          /*******************************************************************************
 152          * Function Name: CyDmacErrorAddress
 153          ********************************************************************************
 154          *
 155          * Summary:
 156          *  When DMAC_BUS_TIMEOUT, DMAC_UNPOP_ACC, and DMAC_PERIPH_ERR occur the
 157          *  address of the error is written to the error address register and can be read
 158          *  with this function.
 159          *
 160          *  If there are multiple errors, only the address of the first is saved.
 161          *
 162          * Parameters:
 163          *  None
 164          *
 165          * Return:
 166          *  The address that caused the error.
 167          *
 168          *******************************************************************************/
 169          uint32 CyDmacErrorAddress(void) 
 170          {
 171   1          return(CY_GET_REG32(CY_DMA_ERR_ADR_PTR));
 172   1      }
 173          
 174          
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 4   

 175          /*******************************************************************************
 176          * Function Name: CyDmaChAlloc
 177          ********************************************************************************
 178          *
 179          * Summary:
 180          *  Allocates a channel from the DMAC to be used in all functions that require a
 181          *  channel handle.
 182          *
 183          * Parameters:
 184          *  None
 185          *
 186          * Return:
 187          *  The allocated channel number. Zero is a valid channel number.
 188          *  DMA_INVALID_CHANNEL is returned if there are no channels available.
 189          *
 190          *******************************************************************************/
 191          uint8 CyDmaChAlloc(void) 
 192          {
 193   1          uint8 interruptState;
 194   1          uint8 dmaIndex;
 195   1          uint32 channel = 1u;
 196   1      
 197   1      
 198   1          /* Enter critical section! */
 199   1          interruptState = CyEnterCriticalSection();
 200   1      
 201   1          /* Look for free channel. */
 202   1          for(dmaIndex = 0u; dmaIndex < CY_DMA_NUMBEROF_CHANNELS; dmaIndex++)
 203   1          {
 204   2              if(0uL == (CyDmaChannels & channel))
 205   2              {
 206   3                  /* Mark channel as used. */
 207   3                  CyDmaChannels |= channel;
 208   3                  break;
 209   3              }
 210   2      
 211   2              channel <<= 1u;
 212   2          }
 213   1      
 214   1          if(dmaIndex >= CY_DMA_NUMBEROF_CHANNELS)
 215   1          {
 216   2              dmaIndex = CY_DMA_INVALID_CHANNEL;
 217   2          }
 218   1      
 219   1          /* Exit critical section! */
 220   1          CyExitCriticalSection(interruptState);
 221   1      
 222   1          return(dmaIndex);
 223   1      }
 224          
 225          
 226          /*******************************************************************************
 227          * Function Name: CyDmaChFree
 228          ********************************************************************************
 229          *
 230          * Summary:
 231          *  Frees a channel allocated by DmaChAlloc().
 232          *
 233          * Parameters:
 234          *  uint8 chHandle:
 235          *   The handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 236          *
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 5   

 237          * Return:
 238          *  CYRET_SUCCESS if successful.
 239          *  CYRET_BAD_PARAM if chHandle is invalid.
 240          *
 241          *******************************************************************************/
 242          cystatus CyDmaChFree(uint8 chHandle) 
 243          {
 244   1          cystatus status = CYRET_BAD_PARAM;
 245   1          uint8 interruptState;
 246   1      
 247   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 248   1          {
 249   2              /* Enter critical section */
 250   2              interruptState = CyEnterCriticalSection();
 251   2      
 252   2              /* Clear bit mask that keeps track of ownership. */
 253   2              CyDmaChannels &= ~(((uint32) 1u) << chHandle);
 254   2      
 255   2              /* Exit critical section */
 256   2              CyExitCriticalSection(interruptState);
 257   2              status = CYRET_SUCCESS;
 258   2          }
 259   1      
 260   1          return(status);
 261   1      }
 262          
 263          
 264          /*******************************************************************************
 265          * Function Name: CyDmaChEnable
 266          ********************************************************************************
 267          *
 268          * Summary:
 269          *  Enables the DMA channel. A software or hardware request still must happen
 270          *  before the channel is executed.
 271          *
 272          * Parameters:
 273          *  uint8 chHandle:
 274          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 275          *
 276          *  uint8 preserveTds:
 277          *   Preserves the original TD state when the TD has completed. This parameter
 278          *   applies to all TDs in the channel.
 279          *
 280          *   0 - When TD is completed, the DMAC leaves the TD configuration values in
 281          *   their current state, and does not restore them to their original state.
 282          *
 283          *   1 - When TD is completed, the DMAC restores the original configuration
 284          *   values of the TD.
 285          *
 286          *  When preserveTds is set, the TD slot that equals the channel number becomes
 287          *  RESERVED and that becomes where the working registers exist. So, for example,
 288          *  if you are using CH06 and preserveTds is set, you are not allowed to use TD
 289          *  slot 6. That is reclaimed by the DMA engine for its private use.
 290          *
 291          *  Note Do not chain back to a completed TD if the preserveTds for the channel
 292          *  is set to 0. When a TD has completed preserveTds for the channel set to 0,
 293          *  the transfer count will be at 0. If a TD with a transfer count of 0 is
 294          *  started, the TD will transfer an indefinite amount of data.
 295          *
 296          *  Take extra precautions when using the hardware request (DRQ) option when the
 297          *  preserveTds is set to 0, as you might be requesting the wrong data.
 298          *
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 6   

 299          * Return:
 300          *  CYRET_SUCCESS if successful.
 301          *  CYRET_BAD_PARAM if chHandle is invalid.
 302          *
 303          *******************************************************************************/
 304          cystatus CyDmaChEnable(uint8 chHandle, uint8 preserveTds) 
 305          {
 306   1          cystatus status = CYRET_BAD_PARAM;
 307   1      
 308   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 309   1          {
 310   2              if (0u != preserveTds)
 311   2              {
 312   3                  /* Store intermediate TD states separately in CHn_SEP_TD0/1 to
 313   3                  *  preserve original TD chain
 314   3                  */
 315   3                  CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] |= CY_DMA_CH_BASIC_CFG_WORK_SEP;
 316   3              }
 317   2              else
 318   2              {
 319   3                  /* Store intermediate and final TD states on top of original TD chain */
 320   3                  CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] &= (uint8)(~CY_DMA_CH_BASIC_CFG_WORK_SEP);
 321   3              }
 322   2      
 323   2              /* Enable channel */
 324   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] |= CY_DMA_CH_BASIC_CFG_EN;
 325   2      
 326   2              status = CYRET_SUCCESS;
 327   2          }
 328   1      
 329   1          return(status);
 330   1      }
 331          
 332          
 333          /*******************************************************************************
 334          * Function Name: CyDmaChDisable
 335          ********************************************************************************
 336          *
 337          * Summary:
 338          *  Disables the DMA channel. Once this function is called, CyDmaChStatus() may
 339          *  be called to determine when the channel is disabled and which TDs were being
 340          *  executed.
 341          *
 342          *  If it is currently executing it will allow the current burst to finish
 343          *  naturally.
 344          *
 345          * Parameters:
 346          *  uint8 chHandle:
 347          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 348          *
 349          * Return:
 350          *  CYRET_SUCCESS if successful.
 351          *  CYRET_BAD_PARAM if chHandle is invalid.
 352          *
 353          *******************************************************************************/
 354          cystatus CyDmaChDisable(uint8 chHandle) 
 355          {
 356   1          cystatus status = CYRET_BAD_PARAM;
 357   1      
 358   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 359   1          {
 360   2              /***********************************************************************
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 7   

 361   2              * Should not change configuration information of a DMA channel when it
 362   2              * is active (or vulnerable to becoming active).
 363   2              ***********************************************************************/
 364   2      
 365   2              /* Disable channel */
 366   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0] &= ((uint8) (~CY_DMA_CH_BASIC_CFG_EN));
 367   2      
 368   2              /* Store intermediate and final TD states on top of original TD chain */
 369   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0] &= ((uint8) (~CY_DMA_CH_BASIC_CFG_WORK_SEP));
 370   2              status = CYRET_SUCCESS;
 371   2          }
 372   1      
 373   1          return(status);
 374   1      }
 375          
 376          
 377          /*******************************************************************************
 378          * Function Name: CyDmaClearPendingDrq
 379          ********************************************************************************
 380          *
 381          * Summary:
 382          *  Clears pending the DMA data request.
 383          *
 384          * Parameters:
 385          *  uint8 chHandle:
 386          *   Handle to the dma channel.
 387          *
 388          * Return:
 389          *  CYRET_SUCCESS if successful.
 390          *  CYRET_BAD_PARAM if chHandle is invalid.
 391          *
 392          *******************************************************************************/
 393          cystatus CyDmaClearPendingDrq(uint8 chHandle) 
 394          {
 395   1          cystatus status = CYRET_BAD_PARAM;
 396   1      
 397   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 398   1          {
 399   2              CY_DMA_CH_STRUCT_PTR[chHandle].action[0] |= CY_DMA_CPU_TERM_CHAIN;
 400   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0] |= 0x01u;
 401   2              status = CYRET_SUCCESS;
 402   2          }
 403   1      
 404   1          return(status);
 405   1      }
 406          
 407          
 408          /*******************************************************************************
 409          * Function Name: CyDmaChPriority
 410          ********************************************************************************
 411          *
 412          * Summary:
 413          *  Sets the priority of a DMA channel. You can use this function when you want
 414          *  to change the priority at run time. If the priority remains the same for a
 415          *  DMA channel, then you can configure the priority in the .cydwr file.
 416          *
 417          * Parameters:
 418          *  uint8 chHandle:
 419          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 420          *
 421          *  uint8 priority:
 422          *   Priority to set the channel to, 0 - 7.
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 8   

 423          *
 424          * Return:
 425          *  CYRET_SUCCESS if successful.
 426          *  CYRET_BAD_PARAM if chHandle is invalid.
 427          *
 428          *******************************************************************************/
 429          cystatus CyDmaChPriority(uint8 chHandle, uint8 priority) 
 430          {
 431   1          uint8 value;
 432   1          cystatus status = CYRET_BAD_PARAM;
 433   1      
 434   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 435   1          {
 436   2              value = CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] & ((uint8)(~(0x0Eu)));
 437   2      
 438   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] = value | ((uint8) ((priority & 0x7u) << 0x01u));
 439   2      
 440   2              status = CYRET_SUCCESS;
 441   2          }
 442   1      
 443   1          return(status);
 444   1      }
 445          
 446          
 447          /*******************************************************************************
 448          * Function Name: CyDmaChSetExtendedAddress
 449          ********************************************************************************
 450          *
 451          * Summary:
 452          *  Sets the high 16 bits of the source and destination addresses for the DMA
 453          *  channel (valid for all TDs in the chain).
 454          *
 455          * Parameters:
 456          *  uint8 chHandle:
 457          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 458          *
 459          *  uint16 source:
 460          *   Upper 16 bit address of the DMA transfer source.
 461          *
 462          *  uint16 destination:
 463          *   Upper 16 bit address of the DMA transfer destination.
 464          *
 465          * Return:
 466          *  CYRET_SUCCESS if successful.
 467          *  CYRET_BAD_PARAM if chHandle is invalid.
 468          *
 469          *******************************************************************************/
 470          cystatus CyDmaChSetExtendedAddress(uint8 chHandle, uint16 source, uint16 destination) \
 471              
 472          {
 473   1          cystatus status = CYRET_BAD_PARAM;
 474   1          reg16 *convert;
 475   1      
 476   1          #if(CY_PSOC5)
              
                      /* 0x1FFF8000-0x1FFFFFFF needs to use alias at 0x20008000-0x2000FFFF */
                      if(source == 0x1FFFu)
                      {
                          source = 0x2000u;
                      }
              
                      if(destination == 0x1FFFu)
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 9   

                      {
                          destination = 0x2000u;
                      }
              
                  #endif  /* (CY_PSOC5) */
 490   1      
 491   1      
 492   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 493   1          {
 494   2              /* Set source address */
 495   2              convert = (reg16 *) &CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG1[0];
 496   2              CY_SET_REG16(convert, source);
 497   2      
 498   2              /* Set destination address */
 499   2              convert = (reg16 *) &CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG1[2u];
 500   2              CY_SET_REG16(convert, destination);
 501   2              status = CYRET_SUCCESS;
 502   2          }
 503   1      
 504   1          return(status);
 505   1      }
 506          
 507          
 508          /*******************************************************************************
 509          * Function Name: CyDmaChSetInitialTd
 510          ********************************************************************************
 511          *
 512          * Summary:
 513          *  Sets the initial TD to be executed for the channel when the CyDmaChEnable()
 514          *  function is called.
 515          *
 516          * Parameters:
 517          *  uint8 chHandle:
 518          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitialize().
 519          *
 520          *  uint8 startTd:
 521          *   Set the TD index as the first TD associated with the channel. Zero is
 522          *   a valid TD index.
 523          *
 524          * Return:
 525          *  CYRET_SUCCESS if successful.
 526          *  CYRET_BAD_PARAM if chHandle is invalid.
 527          *
 528          *******************************************************************************/
 529          cystatus CyDmaChSetInitialTd(uint8 chHandle, uint8 startTd) 
 530          {
 531   1          cystatus status = CYRET_BAD_PARAM;
 532   1      
 533   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 534   1          {
 535   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_status[1u] = startTd;
 536   2              status = CYRET_SUCCESS;
 537   2          }
 538   1      
 539   1          return(status);
 540   1      }
 541          
 542          
 543          /*******************************************************************************
 544          * Function Name: CyDmaChSetRequest
 545          ********************************************************************************
 546          *
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 10  

 547          * Summary:
 548          *  Allows the caller to terminate a chain of TDs, terminate one TD, or create a
 549          *  direct request to start the DMA channel.
 550          *
 551          * Parameters:
 552          *  uint8 chHandle:
 553          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 554          *
 555          *  uint8 request:
 556          *   One of the following constants. Each of the constants is a three-bit value.
 557          *
 558          *   CPU_REQ         - Create a direct request to start the DMA channel
 559          *   CPU_TERM_TD     - Terminate one TD
 560          *   CPU_TERM_CHAIN  - Terminate a chain of TDs
 561          *
 562          * Return:
 563          *  CYRET_SUCCESS if successful.
 564          *  CYRET_BAD_PARAM if chHandle is invalid.
 565          *
 566          *******************************************************************************/
 567          cystatus CyDmaChSetRequest(uint8 chHandle, uint8 request) 
 568          {
 569   1          cystatus status = CYRET_BAD_PARAM;
 570   1      
 571   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 572   1          {
 573   2              CY_DMA_CH_STRUCT_PTR[chHandle].action[0u] |= (request & (CPU_REQ | CPU_TERM_TD | CPU_TERM_CHAIN));
 574   2              status = CYRET_SUCCESS;
 575   2          }
 576   1      
 577   1          return(status);
 578   1      }
 579          
 580          
 581          /*******************************************************************************
 582          * Function Name: CyDmaChGetRequest
 583          ********************************************************************************
 584          *
 585          * Summary:
 586          *  This function allows the caller of CyDmaChSetRequest() to determine if the
 587          *  request was completed.
 588          *
 589          * Parameters:
 590          *  uint8 chHandle:
 591          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 592          *
 593          * Return:
 594          *  Returns a three-bit field, corresponding to the three bits of the request,
 595          *  which describes the state of the previously posted request. If the value is
 596          *  zero, the request was completed. CY_DMA_INVALID_CHANNEL if the handle is
 597          *  invalid.
 598          *
 599          *******************************************************************************/
 600          cystatus CyDmaChGetRequest(uint8 chHandle) 
 601          {
 602   1          cystatus status = CY_DMA_INVALID_CHANNEL;
 603   1      
 604   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 605   1          {
 606   2              status = (cystatus) ((uint32)CY_DMA_CH_STRUCT_PTR[chHandle].action[0u] &
 607   2                                  (uint32)(CY_DMA_CPU_REQ | CY_DMA_CPU_TERM_TD | CY_DMA_CPU_TERM_CHAIN));
 608   2          }
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 11  

 609   1      
 610   1          return(status);
 611   1      }
 612          
 613          
 614          /*******************************************************************************
 615          * Function Name: CyDmaChStatus
 616          ********************************************************************************
 617          *
 618          * Summary:
 619          *  Determines the status of the DMA channel.
 620          *
 621          * Parameters:
 622          *  uint8 chHandle:
 623          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 624          *
 625          *  uint8 * currentTd:
 626          *   The address to store the index of the current TD. Can be NULL if the value
 627          *   is not needed.
 628          *
 629          *  uint8 * state:
 630          *   The address to store the state of the channel. Can be NULL if the value is
 631          *   not needed.
 632          *
 633          *   STATUS_TD_ACTIVE
 634          *    0: Channel is not currently being serviced by DMAC
 635          *    1: Channel is currently being serviced by DMAC
 636          *
 637          *   STATUS_CHAIN_ACTIVE
 638          *    0: TD chain is inactive; either no DMA requests have triggered a new chain
 639          *       or the previous chain has completed.
 640          *    1: TD chain has been triggered by a DMA request
 641          *
 642          * Return:
 643          *  CYRET_SUCCESS if successful.
 644          *  CYRET_BAD_PARAM if chHandle is invalid.
 645          *
 646          * Theory:
 647          *   The caller can check on the activity of the Current TD and the Chain.
 648          *
 649          *******************************************************************************/
 650          cystatus CyDmaChStatus(uint8 chHandle, uint8 * currentTd, uint8 * state) 
 651          {
 652   1          cystatus status = CYRET_BAD_PARAM;
 653   1      
 654   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 655   1          {
 656   2              if(NULL != currentTd)
 657   2              {
 658   3                  *currentTd = CY_DMA_CH_STRUCT_PTR[chHandle].basic_status[1] & 0x7Fu;
 659   3              }
 660   2      
 661   2              if(NULL != state)
 662   2              {
 663   3                  *state= CY_DMA_CH_STRUCT_PTR[chHandle].basic_status[0];
 664   3              }
 665   2      
 666   2              status = CYRET_SUCCESS;
 667   2          }
 668   1      
 669   1          return (status);
 670   1      }
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 12  

 671          
 672          
 673          /*******************************************************************************
 674          * Function Name: CyDmaChSetConfiguration
 675          ********************************************************************************
 676          *
 677          * Summary:
 678          * Sets configuration information of the channel.
 679          *
 680          * Parameters:
 681          *  uint8 chHandle:
 682          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitialize().
 683          *
 684          *  uint8 burstCount:
 685          *   Specifies the size of bursts (1 to 127) the data transfer should be divided
 686          *   into. If this value is zero then the whole transfer is done in one burst.
 687          *
 688          *  uint8 requestPerBurst:
 689          *   The whole of the data can be split into multiple bursts, if this is
 690          *   required to complete the transaction:
 691          *    0: All subsequent bursts after the first burst will be automatically
 692          *       requested and carried out
 693          *    1: All subsequent bursts after the first burst must also be individually
 694          *       requested.
 695          *
 696          *  uint8 tdDone0:
 697          *   Selects one of the TERMOUT0 interrupt lines to signal completion. The line
 698          *   connected to the nrq terminal will determine the TERMOUT0_SEL definition and
 699          *   should be used as supplied by cyfitter.h
 700          *
 701          *  uint8 tdDone1:
 702          *   Selects one of the TERMOUT1 interrupt lines to signal completion. The line
 703          *   connected to the nrq terminal will determine the TERMOUT1_SEL definition and
 704          *   should be used as supplied by cyfitter.h
 705          *
 706          *  uint8 tdStop:
 707          *   Selects one of the TERMIN interrupt lines to signal to the DMAC that the TD
 708          *   should terminate. The signal connected to the trq terminal will determine
 709          *   which TERMIN (termination request) is used.
 710          *
 711          * Return:
 712          *  CYRET_SUCCESS if successful.
 713          *  CYRET_BAD_PARAM if chHandle is invalid.
 714          *
 715          *******************************************************************************/
 716          cystatus CyDmaChSetConfiguration(uint8 chHandle, uint8 burstCount, uint8 requestPerBurst,
 717                                           uint8 tdDone0, uint8 tdDone1, uint8 tdStop) 
 718          {
 719   1          cystatus status = CYRET_BAD_PARAM;
 720   1      
 721   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 722   1          {
 723   2              CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG0[0] = (burstCount & 0x7Fu) | ((uint8)((requestPerBurst & 0x
             -1u) << 7u));
 724   2              CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG0[1] = ((uint8)((tdDone1 & 0xFu) << 4u)) | (tdDone0 & 0xFu);
 725   2              CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG0[2] = 0x0Fu & tdStop;
 726   2              CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG0[3] = 0u; /* burstcount_remain. */
 727   2      
 728   2              status = CYRET_SUCCESS;
 729   2          }
 730   1      
 731   1          return (status);
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 13  

 732   1      }
 733          
 734          
 735          /*******************************************************************************
 736          * Function Name: CyDmaTdAllocate
 737          ********************************************************************************
 738          *
 739          * Summary:
 740          *  Allocates a TD for use with an allocated DMA channel.
 741          *
 742          * Parameters:
 743          *  None
 744          *
 745          * Return:
 746          *  Zero-based index of the TD to be used by the caller. Since there are 128 TDs
 747          *  minus the reserved TDs (0 to 23), the value returned would range from 24 to
 748          *  127 not 24 to 128. DMA_INVALID_TD is returned if there are no free TDs
 749          *  available.
 750          *
 751          *******************************************************************************/
 752          uint8 CyDmaTdAllocate(void) 
 753          {
 754   1          uint8 interruptState;
 755   1          uint8 element = CY_DMA_INVALID_TD;
 756   1      
 757   1          /* Enter critical section! */
 758   1          interruptState = CyEnterCriticalSection();
 759   1      
 760   1          if(CyDmaTdCurrentNumber > NUMBEROF_CHANNELS)
 761   1          {
 762   2              /* Get pointer to Next available. */
 763   2              element = CyDmaTdFreeIndex;
 764   2      
 765   2              /* Decrement the count. */
 766   2              CyDmaTdCurrentNumber--;
 767   2      
 768   2              /* Update next available pointer. */
 769   2              CyDmaTdFreeIndex = CY_DMA_TDMEM_STRUCT_PTR[element].TD0[0];
 770   2          }
 771   1      
 772   1          /* Exit critical section! */
 773   1          CyExitCriticalSection(interruptState);
 774   1      
 775   1          return(element);
 776   1      }
 777          
 778          
 779          /*******************************************************************************
 780          * Function Name: CyDmaTdFree
 781          ********************************************************************************
 782          *
 783          * Summary:
 784          *  Returns a TD to the free list.
 785          *
 786          * Parameters:
 787          *  uint8 tdHandle:
 788          *   The TD handle returned by the CyDmaTdAllocate().
 789          *
 790          * Return:
 791          *  None
 792          *
 793          *******************************************************************************/
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 14  

 794          void CyDmaTdFree(uint8 tdHandle) 
 795          {
 796   1          if(tdHandle < CY_DMA_NUMBEROF_TDS)
 797   1          {
 798   2              /* Enter critical section! */
 799   2              uint8 interruptState = CyEnterCriticalSection();
 800   2      
 801   2              /* Get pointer to Next available. */
 802   2              CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[0u] = CyDmaTdFreeIndex;
 803   2      
 804   2              /* Set new Next Available. */
 805   2              CyDmaTdFreeIndex = tdHandle;
 806   2      
 807   2              /* Keep track of how many left. */
 808   2              CyDmaTdCurrentNumber++;
 809   2      
 810   2              /* Exit critical section! */
 811   2              CyExitCriticalSection(interruptState);
 812   2          }
 813   1      }
 814          
 815          
 816          /*******************************************************************************
 817          * Function Name: CyDmaTdFreeCount
 818          ********************************************************************************
 819          *
 820          * Summary:
 821          *  Returns the number of free TDs available to be allocated.
 822          *
 823          * Parameters:
 824          *  None
 825          *
 826          * Return:
 827          *  The number of free TDs.
 828          *
 829          *******************************************************************************/
 830          uint8 CyDmaTdFreeCount(void) 
 831          {
 832   1          return(CyDmaTdCurrentNumber - CY_DMA_NUMBEROF_CHANNELS);
 833   1      }
 834          
 835          
 836          /*******************************************************************************
 837          * Function Name: CyDmaTdSetConfiguration
 838          ********************************************************************************
 839          *
 840          * Summary:
 841          *  Configures the TD.
 842          *
 843          * Parameters:
 844          *  uint8 tdHandle:
 845          *   A handle previously returned by CyDmaTdAlloc().
 846          *
 847          *  uint16 transferCount:
 848          *   The size of the data transfer (in bytes) for this TD. A size of zero will
 849          *   cause the transfer to continue indefinitely. This parameter is limited to
 850          *   4095 bytes; the TD is not initialized at all when a higher value is passed.
 851          *
 852          *  uint8 nextTd:
 853          *   Zero based index of the next Transfer Descriptor in the TD chain. Zero is a
 854          *   valid pointer to the next TD; DMA_END_CHAIN_TD is the end of the chain.
 855          *   DMA_DISABLE_TD indicates an end to the chain and the DMA is disabled. No
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 15  

 856          *   further TDs are fetched. DMA_DISABLE_TD is only supported on PSoC3 and
 857          *   PSoC 5LP silicons.
 858          *
 859          *  uint8 configuration:
 860          *   Stores the Bit field of configuration bits.
 861          *
 862          *   CY_DMA_TD_SWAP_EN        - Perform endian swap
 863          *
 864          *   CY_DMA_TD_SWAP_SIZE4     - Swap size = 4 bytes
 865          *
 866          *   CY_DMA_TD_AUTO_EXEC_NEXT - The next TD in the chain will trigger
 867          *                              automatically when the current TD completes.
 868          *
 869          *   CY_DMA_TD_TERMIN_EN      - Terminate this TD if a positive edge on the trq
 870          *                              input line occurs. The positive edge must occur
 871          *                              during a burst. That is the only time the DMAC
 872          *                              will listen for it.
 873          *
 874          *   DMA__TD_TERMOUT_EN       - When this TD completes, the TERMOUT signal will
 875          *                              generate a pulse. Note that this option is
 876          *                              instance specific with the instance name followed
 877          *                              by two underscores. In this example, the instance
 878          *                              name is DMA.
 879          *
 880          *   CY_DMA_TD_INC_DST_ADR    - Increment DST_ADR according to the size of each
 881          *                              data transaction in the burst.
 882          *
 883          *   CY_DMA_TD_INC_SRC_ADR    - Increment SRC_ADR according to the size of each
 884          *                              data transaction in the burst.
 885          *
 886          * Return:
 887          *  CYRET_SUCCESS if successful.
 888          *  CYRET_BAD_PARAM if tdHandle or transferCount is invalid.
 889          *
 890          *******************************************************************************/
 891          cystatus CyDmaTdSetConfiguration(uint8 tdHandle, uint16 transferCount, uint8 nextTd, uint8 configuration) 
             -\
 892              
 893          {
 894   1          cystatus status = CYRET_BAD_PARAM;
 895   1      
 896   1          if((tdHandle < CY_DMA_NUMBEROF_TDS) && (0u == (0xF000u & transferCount)))
 897   1          {
 898   2              /* Set 12 bits transfer count. */
 899   2              reg16 *convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[0u];
 900   2              CY_SET_REG16(convert, transferCount);
 901   2      
 902   2              /* Set Next TD pointer. */
 903   2              CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[2u] = nextTd;
 904   2      
 905   2              /* Configure the TD */
 906   2              CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[3u] = configuration;
 907   2      
 908   2              status = CYRET_SUCCESS;
 909   2          }
 910   1      
 911   1          return(status);
 912   1      }
 913          
 914          
 915          /*******************************************************************************
 916          * Function Name: CyDmaTdGetConfiguration
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 16  

 917          ********************************************************************************
 918          *
 919          * Summary:
 920          *  Retrieves the configuration of the TD. If a NULL pointer is passed as a
 921          *  parameter, that parameter is skipped. You may request only the values you are
 922          *  interested in.
 923          *
 924          * Parameters:
 925          *  uint8 tdHandle:
 926          *   A handle previously returned by CyDmaTdAlloc().
 927          *
 928          *  uint16 * transferCount:
 929          *   The address to store the size of the data transfer (in bytes) for this TD.
 930          *   A size of zero could indicate that the TD has completed its transfer, or
 931          *   that the TD is doing an indefinite transfer.
 932          *
 933          *  uint8 * nextTd:
 934          *   The address to store the index of the next TD in the TD chain.
 935          *
 936          *  uint8 * configuration:
 937          *   The address to store the Bit field of configuration bits.
 938          *   See CyDmaTdSetConfiguration() function description.
 939          *
 940          * Return:
 941          *  CYRET_SUCCESS if successful.
 942          *  CYRET_BAD_PARAM if tdHandle is invalid.
 943          *
 944          * Side Effects:
 945          *  If TD has a transfer count of N and is executed, the transfer count becomes
 946          *  0. If it is reexecuted, the Transfer count of zero will be interpreted as a
 947          *  request for indefinite transfer. Be careful when requesting TD with a
 948          *  transfer count of zero.
 949          *
 950          *******************************************************************************/
 951          cystatus CyDmaTdGetConfiguration(uint8 tdHandle, uint16 * transferCount, uint8 * nextTd, uint8 * configura
             -tion) \
 952              
 953          {
 954   1          cystatus status = CYRET_BAD_PARAM;
 955   1      
 956   1          if(tdHandle < CY_DMA_NUMBEROF_TDS)
 957   1          {
 958   2              /* If we have pointer */
 959   2              if(NULL != transferCount)
 960   2              {
 961   3                  /* Get 12 bits of transfer count */
 962   3                  reg16 *convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[0];
 963   3                  *transferCount = 0x0FFFu & CY_GET_REG16(convert);
 964   3              }
 965   2      
 966   2              /* If we have pointer */
 967   2              if(NULL != nextTd)
 968   2              {
 969   3                  /* Get Next TD pointer */
 970   3                  *nextTd = CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[2u];
 971   3              }
 972   2      
 973   2              /* If we have pointer */
 974   2              if(NULL != configuration)
 975   2              {
 976   3                  /* Get configuration TD */
 977   3                  *configuration = CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[3u];
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 17  

 978   3              }
 979   2      
 980   2              status = CYRET_SUCCESS;
 981   2          }
 982   1      
 983   1          return(status);
 984   1      }
 985          
 986          
 987          /*******************************************************************************
 988          * Function Name: CyDmaTdSetAddress
 989          ********************************************************************************
 990          *
 991          * Summary:
 992          *  Sets the lower 16 bits of the source and destination addresses for this TD
 993          *  only.
 994          *
 995          * Parameters:
 996          *  uint8 tdHandle:
 997          *   A handle previously returned by CyDmaTdAlloc().
 998          *
 999          *  uint16 source:
1000          *   The lower 16 address bits of the source of the data transfer.
1001          *
1002          *  uint16 destination:
1003          *   The lower 16 address bits of the destination of the data transfer.
1004          *
1005          * Return:
1006          *  CYRET_SUCCESS if successful.
1007          *  CYRET_BAD_PARAM if tdHandle is invalid.
1008          *
1009          *******************************************************************************/
1010          cystatus CyDmaTdSetAddress(uint8 tdHandle, uint16 source, uint16 destination) 
1011          {
1012   1          cystatus status = CYRET_BAD_PARAM;
1013   1          reg16 *convert;
1014   1      
1015   1          if(tdHandle < CY_DMA_NUMBEROF_TDS)
1016   1          {
1017   2              /* Set source address */
1018   2              convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD1[0u];
1019   2              CY_SET_REG16(convert, source);
1020   2      
1021   2              /* Set destination address */
1022   2              convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD1[2u];
1023   2              CY_SET_REG16(convert, destination);
1024   2      
1025   2              status = CYRET_SUCCESS;
1026   2          }
1027   1      
1028   1          return(status);
1029   1      }
1030          
1031          
1032          /*******************************************************************************
1033          * Function Name: CyDmaTdGetAddress
1034          ********************************************************************************
1035          *
1036          * Summary:
1037          *  Retrieves the lower 16 bits of the source and/or destination addresses for
1038          *  this TD only. If NULL is passed for a pointer parameter, that value is
1039          *  skipped. You may request only the values of interest.
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 18  

1040          *
1041          * Parameters:
1042          *  uint8 tdHandle:
1043          *   A handle previously returned by CyDmaTdAlloc().
1044          *
1045          *  uint16 * source:
1046          *   The address to store the lower 16 address bits of the source of the data
1047          *   transfer.
1048          *
1049          *  uint16 * destination:
1050          *   The address to store the lower 16 address bits of the destination of the
1051          *   data transfer.
1052          *
1053          * Return:
1054          *  CYRET_SUCCESS if successful.
1055          *  CYRET_BAD_PARAM if tdHandle is invalid.
1056          *
1057          *******************************************************************************/
1058          cystatus CyDmaTdGetAddress(uint8 tdHandle, uint16 * source, uint16 * destination) 
1059          {
1060   1          cystatus status = CYRET_BAD_PARAM;
1061   1          reg16 *convert;
1062   1      
1063   1          if(tdHandle < CY_DMA_NUMBEROF_TDS)
1064   1          {
1065   2              /* If we have a pointer. */
1066   2              if(NULL != source)
1067   2              {
1068   3                  /* Get source address */
1069   3                  convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD1[0u];
1070   3                  *source = CY_GET_REG16(convert);
1071   3              }
1072   2      
1073   2              /* If we have a pointer. */
1074   2              if(NULL != destination)
1075   2              {
1076   3                  /* Get Destination address. */
1077   3                  convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD1[2u];
1078   3                  *destination = CY_GET_REG16(convert);
1079   3              }
1080   2      
1081   2              status = CYRET_SUCCESS;
1082   2          }
1083   1      
1084   1          return(status);
1085   1      }
1086          
1087          
1088          /*******************************************************************************
1089          * Function Name: CyDmaChRoundRobin
1090          ********************************************************************************
1091          *
1092          * Summary:
1093          *  Either enables or disables the Round-Robin scheduling enforcement algorithm.
1094          *  Within a priority level a Round-Robin fairness algorithm is enforced.
1095          *
1096          * Parameters:
1097          *  uint8 chHandle:
1098          *   A handle previously returned by CyDmaChAlloc() or Dma_DmaInitialize().
1099          *
1100          *  uint8 enableRR:
1101          *   0: Disable Round-Robin fairness algorithm
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 19  

1102          *   1: Enable Round-Robin fairness algorithm
1103          *
1104          * Return:
1105          *  CYRET_SUCCESS if successful.
1106          *  CYRET_BAD_PARAM if chHandle is invalid.
1107          *
1108          *******************************************************************************/
1109          cystatus CyDmaChRoundRobin(uint8 chHandle, uint8 enableRR) 
1110          {
1111   1          cystatus status = CYRET_BAD_PARAM;
1112   1      
1113   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
1114   1          {
1115   2              if (0u != enableRR)
1116   2              {
1117   3                  CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] |= (uint8)CY_DMA_ROUND_ROBIN_ENABLE;
1118   3              }
1119   2              else
1120   2              {
1121   3                  CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] &= (uint8)(~CY_DMA_ROUND_ROBIN_ENABLE);
1122   3              }
1123   2      
1124   2              status = CYRET_SUCCESS;
1125   2          }
1126   1      
1127   1          return(status);
1128   1      }
1129          
1130          
1131          /* [] END OF FILE */
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 20  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CyDmacConfigure (BEGIN)
                                           ; SOURCE LINE # 61
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 66
0000 900000      R     MOV     DPTR,#CyDmaTdFreeIndex
0003 747F              MOV     A,#07FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 67
0006 A3                INC     DPTR
0007 04                INC     A
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
;---- Variable 'dmaIndex' assigned to Register 'R7' ----
0009 7F7F              MOV     R7,#07FH
000B         ?C0001:
000B EF                MOV     A,R7
000C 6016              JZ      ?C0002
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
000E 14                DEC     A
000F FE                MOV     R6,A
0010 75F008            MOV     B,#08H
0013 EF                MOV     A,R7
0014 A4                MUL     AB
0015 2400              ADD     A,#00H
0017 F582              MOV     DPL,A
0019 E5F0              MOV     A,B
001B 3478              ADDC    A,#078H
001D F583              MOV     DPH,A
001F EE                MOV     A,R6
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
0021 1F                DEC     R7
0022 80E7              SJMP    ?C0001
0024         ?C0002:
                                           ; SOURCE LINE # 76
0024 75F008            MOV     B,#08H
0027 EF                MOV     A,R7
0028 A4                MUL     AB
0029 2400              ADD     A,#00H
002B F582              MOV     DPL,A
002D E5F0              MOV     A,B
002F 3478              ADDC    A,#078H
0031 F583              MOV     DPH,A
0033 E4                CLR     A
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
0035 22                RET     
             ; FUNCTION CyDmacConfigure (END)

             ; FUNCTION CyDmacError (BEGIN)
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
0000 907004            MOV     DPTR,#07004H
0003 E0                MOVX    A,@DPTR
0004 FC                MOV     R4,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 21  

0007 FD                MOV     R5,A
0008 A3                INC     DPTR
0009 E0                MOVX    A,@DPTR
000A FE                MOV     R6,A
000B A3                INC     DPTR
000C E0                MOVX    A,@DPTR
000D 540E              ANL     A,#0EH
000F FF                MOV     R7,A
0010 E4                CLR     A
                                           ; SOURCE LINE # 112
0011         ?C0005:
0011 22                RET     
             ; FUNCTION CyDmacError (END)

             ; FUNCTION _CyDmacClearError (BEGIN)
                                           ; SOURCE LINE # 145
;---- Variable 'error' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
0000 E4                CLR     A
0001 FC                MOV     R4,A
0002 FD                MOV     R5,A
0003 FE                MOV     R6,A
0004 EF                MOV     A,R7
0005 540F              ANL     A,#0FH
0007 FF                MOV     R7,A
0008 E4                CLR     A
0009 907004            MOV     DPTR,#07004H
000C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 148
000F 22                RET     
             ; FUNCTION _CyDmacClearError (END)

             ; FUNCTION CyDmacErrorAddress (BEGIN)
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
0000 7B02              MOV     R3,#02H
0002 7A70              MOV     R2,#070H
0004 7908              MOV     R1,#08H
0006 120000      E     LCALL   _cyread32_nodpx
                                           ; SOURCE LINE # 172
0009         ?C0007:
0009 22                RET     
             ; FUNCTION CyDmacErrorAddress (END)

             ; FUNCTION CyDmaChAlloc (BEGIN)
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 195
0000 E4                CLR     A
0001 7F01              MOV     R7,#01H
0003 FE                MOV     R6,A
0004 FD                MOV     R5,A
0005 FC                MOV     R4,A
0006 900000      R     MOV     DPTR,#channel
0009 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 199
000C 120000      E     LCALL   CyEnterCriticalSection
000F 900000      R     MOV     DPTR,#interruptState
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 22  

                                           ; SOURCE LINE # 202
0014 E4                CLR     A
0015 A3                INC     DPTR
0016 F0                MOVX    @DPTR,A
0017         ?C0008:
0017 900000      R     MOV     DPTR,#dmaIndex
001A E0                MOVX    A,@DPTR
001B C3                CLR     C
001C 9418              SUBB    A,#018H
001E 4003              JC      $ + 5H
0020 020000      R     LJMP    ?C0009
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FC                MOV     R4,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 FD                MOV     R5,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FE                MOV     R6,A
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 900000      R     MOV     DPTR,#CyDmaChannels
0032 E0                MOVX    A,@DPTR
0033 F8                MOV     R0,A
0034 A3                INC     DPTR
0035 E0                MOVX    A,@DPTR
0036 F9                MOV     R1,A
0037 A3                INC     DPTR
0038 E0                MOVX    A,@DPTR
0039 FA                MOV     R2,A
003A A3                INC     DPTR
003B E0                MOVX    A,@DPTR
003C 5F                ANL     A,R7
003D FF                MOV     R7,A
003E EA                MOV     A,R2
003F 5E                ANL     A,R6
0040 FE                MOV     R6,A
0041 E9                MOV     A,R1
0042 5D                ANL     A,R5
0043 FD                MOV     R5,A
0044 E8                MOV     A,R0
0045 5C                ANL     A,R4
0046 FC                MOV     R4,A
0047 E4                CLR     A
0048 FB                MOV     R3,A
0049 FA                MOV     R2,A
004A F9                MOV     R1,A
004B F8                MOV     R0,A
004C C3                CLR     C
004D 120000      E     LCALL   ?C?ULCMP
0050 7030              JNZ     ?C0011
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 207
0052 900000      R     MOV     DPTR,#CyDmaChannels
0055 E0                MOVX    A,@DPTR
0056 FC                MOV     R4,A
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 23  

0059 FD                MOV     R5,A
005A A3                INC     DPTR
005B E0                MOVX    A,@DPTR
005C FE                MOV     R6,A
005D A3                INC     DPTR
005E E0                MOVX    A,@DPTR
005F FF                MOV     R7,A
0060 900000      R     MOV     DPTR,#channel
0063 E0                MOVX    A,@DPTR
0064 F8                MOV     R0,A
0065 A3                INC     DPTR
0066 E0                MOVX    A,@DPTR
0067 F9                MOV     R1,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A FA                MOV     R2,A
006B A3                INC     DPTR
006C E0                MOVX    A,@DPTR
006D FB                MOV     R3,A
006E EF                MOV     A,R7
006F 4B                ORL     A,R3
0070 FF                MOV     R7,A
0071 EE                MOV     A,R6
0072 4A                ORL     A,R2
0073 FE                MOV     R6,A
0074 ED                MOV     A,R5
0075 49                ORL     A,R1
0076 FD                MOV     R5,A
0077 EC                MOV     A,R4
0078 48                ORL     A,R0
0079 FC                MOV     R4,A
007A 900000      R     MOV     DPTR,#CyDmaChannels
007D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 208
0080 8022              SJMP    ?C0009
                                           ; SOURCE LINE # 209
0082         ?C0011:
                                           ; SOURCE LINE # 211
0082 900000      R     MOV     DPTR,#channel
0085 E0                MOVX    A,@DPTR
0086 FC                MOV     R4,A
0087 A3                INC     DPTR
0088 E0                MOVX    A,@DPTR
0089 FD                MOV     R5,A
008A A3                INC     DPTR
008B E0                MOVX    A,@DPTR
008C FE                MOV     R6,A
008D A3                INC     DPTR
008E E0                MOVX    A,@DPTR
008F FF                MOV     R7,A
0090 7801              MOV     R0,#01H
0092 120000      E     LCALL   ?C?LSHL
0095 900000      R     MOV     DPTR,#channel
0098 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 212
009B 900000      R     MOV     DPTR,#dmaIndex
009E E0                MOVX    A,@DPTR
009F 04                INC     A
00A0 F0                MOVX    @DPTR,A
00A1 020000      R     LJMP    ?C0008
00A4         ?C0009:
                                           ; SOURCE LINE # 214
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 24  

00A4 900000      R     MOV     DPTR,#dmaIndex
00A7 E0                MOVX    A,@DPTR
00A8 C3                CLR     C
00A9 9418              SUBB    A,#018H
00AB 4003              JC      ?C0012
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
00AD 74FF              MOV     A,#0FFH
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
00B0         ?C0012:
                                           ; SOURCE LINE # 220
00B0 900000      R     MOV     DPTR,#interruptState
00B3 E0                MOVX    A,@DPTR
00B4 FF                MOV     R7,A
00B5 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 222
00B8 900000      R     MOV     DPTR,#dmaIndex
00BB E0                MOVX    A,@DPTR
00BC FF                MOV     R7,A
                                           ; SOURCE LINE # 223
00BD         ?C0013:
00BD 22                RET     
             ; FUNCTION CyDmaChAlloc (END)

             ; FUNCTION _CyDmaChFree (BEGIN)
                                           ; SOURCE LINE # 242
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
0005 A3                INC     DPTR
0006 7401              MOV     A,#01H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
0009 EF                MOV     A,R7
000A C3                CLR     C
000B 9418              SUBB    A,#018H
000D 504F              JNC     ?C0014
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 250
000F 120000      E     LCALL   CyEnterCriticalSection
0012 900000      R     MOV     DPTR,#interruptState
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
0017 900000      R     MOV     DPTR,#CyDmaChannels
001A E0                MOVX    A,@DPTR
001B F8                MOV     R0,A
001C A3                INC     DPTR
001D E0                MOVX    A,@DPTR
001E F9                MOV     R1,A
001F A3                INC     DPTR
0020 E0                MOVX    A,@DPTR
0021 FA                MOV     R2,A
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 FB                MOV     R3,A
0025 C000              PUSH    AR0
0027 C001              PUSH    AR1
0029 E4                CLR     A
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 25  

002A 7F01              MOV     R7,#01H
002C FE                MOV     R6,A
002D FD                MOV     R5,A
002E FC                MOV     R4,A
002F 900000      R     MOV     DPTR,#chHandle
0032 E0                MOVX    A,@DPTR
0033 F9                MOV     R1,A
0034 F8                MOV     R0,A
0035 120000      E     LCALL   ?C?LSHL
0038 120000      E     LCALL   ?C?LNOT
003B D001              POP     AR1
003D D000              POP     AR0
003F EB                MOV     A,R3
0040 5F                ANL     A,R7
0041 FF                MOV     R7,A
0042 EA                MOV     A,R2
0043 5E                ANL     A,R6
0044 FE                MOV     R6,A
0045 E9                MOV     A,R1
0046 5D                ANL     A,R5
0047 FD                MOV     R5,A
0048 E8                MOV     A,R0
0049 5C                ANL     A,R4
004A FC                MOV     R4,A
004B 900000      R     MOV     DPTR,#CyDmaChannels
004E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 256
0051 900000      R     MOV     DPTR,#interruptState
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 257
0059 E4                CLR     A
005A 900000      R     MOV     DPTR,#status
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
005E         ?C0014:
                                           ; SOURCE LINE # 260
005E 900000      R     MOV     DPTR,#status
0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
                                           ; SOURCE LINE # 261
0063         ?C0015:
0063 22                RET     
             ; FUNCTION _CyDmaChFree (END)

             ; FUNCTION _CyDmaChEnable (BEGIN)
                                           ; SOURCE LINE # 304
;---- Variable 'chHandle' assigned to Register 'R7' ----
;---- Variable 'preserveTds' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 306
;---- Variable 'status' assigned to Register 'R6' ----
0000 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 308
0002 EF                MOV     A,R7
0003 C3                CLR     C
0004 9418              SUBB    A,#018H
0006 5040              JNC     ?C0016
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
0008 ED                MOV     A,R5
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 26  

0009 6015              JZ      ?C0017
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 315
000B 75F010            MOV     B,#010H
000E EF                MOV     A,R7
000F A4                MUL     AB
0010 2410              ADD     A,#010H
0012 F582              MOV     DPL,A
0014 E5F0              MOV     A,B
0016 3470              ADDC    A,#070H
0018 F583              MOV     DPH,A
001A E0                MOVX    A,@DPTR
001B 4420              ORL     A,#020H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
001E 8013              SJMP    ?C0018
0020         ?C0017:
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 320
0020 75F010            MOV     B,#010H
0023 EF                MOV     A,R7
0024 A4                MUL     AB
0025 2410              ADD     A,#010H
0027 F582              MOV     DPL,A
0029 E5F0              MOV     A,B
002B 3470              ADDC    A,#070H
002D F583              MOV     DPH,A
002F E0                MOVX    A,@DPTR
0030 54DF              ANL     A,#0DFH
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 321
0033         ?C0018:
                                           ; SOURCE LINE # 324
0033 75F010            MOV     B,#010H
0036 EF                MOV     A,R7
0037 A4                MUL     AB
0038 2410              ADD     A,#010H
003A F582              MOV     DPL,A
003C E5F0              MOV     A,B
003E 3470              ADDC    A,#070H
0040 F583              MOV     DPH,A
0042 E0                MOVX    A,@DPTR
0043 4401              ORL     A,#01H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
0046 E4                CLR     A
0047 FE                MOV     R6,A
                                           ; SOURCE LINE # 327
0048         ?C0016:
                                           ; SOURCE LINE # 329
0048 AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 330
004A         ?C0019:
004A 22                RET     
             ; FUNCTION _CyDmaChEnable (END)

             ; FUNCTION _CyDmaChDisable (BEGIN)
                                           ; SOURCE LINE # 354
;---- Variable 'chHandle' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 356
;---- Variable 'status' assigned to Register 'R6' ----
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 27  

0000 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 358
0002 EF                MOV     A,R7
0003 C3                CLR     C
0004 9418              SUBB    A,#018H
0006 5028              JNC     ?C0020
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 366
0008 75F010            MOV     B,#010H
000B EF                MOV     A,R7
000C A4                MUL     AB
000D 2410              ADD     A,#010H
000F F582              MOV     DPL,A
0011 E5F0              MOV     A,B
0013 3470              ADDC    A,#070H
0015 F583              MOV     DPH,A
0017 E0                MOVX    A,@DPTR
0018 54FE              ANL     A,#0FEH
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
001B 75F010            MOV     B,#010H
001E EF                MOV     A,R7
001F A4                MUL     AB
0020 2410              ADD     A,#010H
0022 F582              MOV     DPL,A
0024 E5F0              MOV     A,B
0026 3470              ADDC    A,#070H
0028 F583              MOV     DPH,A
002A E0                MOVX    A,@DPTR
002B 54DF              ANL     A,#0DFH
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
002E E4                CLR     A
002F 1E                DEC     R6
                                           ; SOURCE LINE # 371
0030         ?C0020:
                                           ; SOURCE LINE # 373
0030 AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 374
0032         ?C0021:
0032 22                RET     
             ; FUNCTION _CyDmaChDisable (END)

             ; FUNCTION _CyDmaClearPendingDrq (BEGIN)
                                           ; SOURCE LINE # 393
;---- Variable 'chHandle' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 395
;---- Variable 'status' assigned to Register 'R6' ----
0000 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 397
0002 EF                MOV     A,R7
0003 C3                CLR     C
0004 9418              SUBB    A,#018H
0006 5028              JNC     ?C0022
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
0008 75F010            MOV     B,#010H
000B EF                MOV     A,R7
000C A4                MUL     AB
000D 2414              ADD     A,#014H
000F F582              MOV     DPL,A
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 28  

0011 E5F0              MOV     A,B
0013 3470              ADDC    A,#070H
0015 F583              MOV     DPH,A
0017 E0                MOVX    A,@DPTR
0018 4404              ORL     A,#04H
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
001B 75F010            MOV     B,#010H
001E EF                MOV     A,R7
001F A4                MUL     AB
0020 2410              ADD     A,#010H
0022 F582              MOV     DPL,A
0024 E5F0              MOV     A,B
0026 3470              ADDC    A,#070H
0028 F583              MOV     DPH,A
002A E0                MOVX    A,@DPTR
002B 4401              ORL     A,#01H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
002E E4                CLR     A
002F 1E                DEC     R6
                                           ; SOURCE LINE # 402
0030         ?C0022:
                                           ; SOURCE LINE # 404
0030 AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 405
0032         ?C0023:
0032 22                RET     
             ; FUNCTION _CyDmaClearPendingDrq (END)

             ; FUNCTION _CyDmaChPriority (BEGIN)
                                           ; SOURCE LINE # 429
;---- Variable 'chHandle' assigned to Register 'R4' ----
0000 AC07              MOV     R4,AR7
;---- Variable 'priority' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 430
                                           ; SOURCE LINE # 432
;---- Variable 'status' assigned to Register 'R3' ----
0002 7B01              MOV     R3,#01H
                                           ; SOURCE LINE # 434
0004 EC                MOV     A,R4
0005 C3                CLR     C
0006 9418              SUBB    A,#018H
0008 5033              JNC     ?C0024
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 436
000A 75F010            MOV     B,#010H
000D EC                MOV     A,R4
000E A4                MUL     AB
000F 2410              ADD     A,#010H
0011 F582              MOV     DPL,A
0013 E5F0              MOV     A,B
0015 3470              ADDC    A,#070H
0017 F583              MOV     DPH,A
0019 E0                MOVX    A,@DPTR
001A 54F1              ANL     A,#0F1H
;---- Variable 'value' assigned to Register 'R2' ----
001C FA                MOV     R2,A
                                           ; SOURCE LINE # 438
001D ED                MOV     A,R5
001E 5407              ANL     A,#07H
0020 25E0              ADD     A,ACC
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 29  

0022 FF                MOV     R7,A
0023 E4                CLR     A
0024 33                RLC     A
0025 AE02              MOV     R6,AR2
0027 EF                MOV     A,R7
0028 4A                ORL     A,R2
0029 FF                MOV     R7,A
002A 75F010            MOV     B,#010H
002D EC                MOV     A,R4
002E A4                MUL     AB
002F 2410              ADD     A,#010H
0031 F582              MOV     DPL,A
0033 E5F0              MOV     A,B
0035 3470              ADDC    A,#070H
0037 F583              MOV     DPH,A
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
003B E4                CLR     A
003C 1B                DEC     R3
                                           ; SOURCE LINE # 441
003D         ?C0024:
                                           ; SOURCE LINE # 443
003D AF03              MOV     R7,AR3
                                           ; SOURCE LINE # 444
003F         ?C0025:
003F 22                RET     
             ; FUNCTION _CyDmaChPriority (END)

             ; FUNCTION _CyDmaChSetExtendedAddress (BEGIN)
                                           ; SOURCE LINE # 470
0000 900000      R     MOV     DPTR,#source
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EA                MOV     A,R2
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
000E 900000      R     MOV     DPTR,#chHandle
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 473
0013 900000      R     MOV     DPTR,#status
0016 7401              MOV     A,#01H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
0019 EF                MOV     A,R7
001A C3                CLR     C
001B 9418              SUBB    A,#018H
001D 5053              JNC     ?C0026
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 495
001F 900000      R     MOV     DPTR,#chHandle
0022 E0                MOVX    A,@DPTR
0023 75F008            MOV     B,#08H
0026 A4                MUL     AB
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 30  

0027 2404              ADD     A,#04H
0029 FF                MOV     R7,A
002A E5F0              MOV     A,B
002C 3476              ADDC    A,#076H
002E FE                MOV     R6,A
002F 900000      R     MOV     DPTR,#convert
0032 F0                MOVX    @DPTR,A
0033 A3                INC     DPTR
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 496
0036 AA06              MOV     R2,AR6
0038 F9                MOV     R1,A
0039 7B01              MOV     R3,#01H
003B 900000      R     MOV     DPTR,#source
003E E0                MOVX    A,@DPTR
003F FC                MOV     R4,A
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 FD                MOV     R5,A
0043 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 499
0046 900000      R     MOV     DPTR,#chHandle
0049 E0                MOVX    A,@DPTR
004A 75F008            MOV     B,#08H
004D A4                MUL     AB
004E 2406              ADD     A,#06H
0050 FF                MOV     R7,A
0051 E5F0              MOV     A,B
0053 3476              ADDC    A,#076H
0055 FE                MOV     R6,A
0056 900000      R     MOV     DPTR,#convert
0059 F0                MOVX    @DPTR,A
005A A3                INC     DPTR
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 500
005D AA06              MOV     R2,AR6
005F F9                MOV     R1,A
0060 7B01              MOV     R3,#01H
0062 900000      R     MOV     DPTR,#destination
0065 E0                MOVX    A,@DPTR
0066 FC                MOV     R4,A
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 FD                MOV     R5,A
006A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 501
006D E4                CLR     A
006E 900000      R     MOV     DPTR,#status
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 502
0072         ?C0026:
                                           ; SOURCE LINE # 504
0072 900000      R     MOV     DPTR,#status
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
                                           ; SOURCE LINE # 505
0077         ?C0027:
0077 22                RET     
             ; FUNCTION _CyDmaChSetExtendedAddress (END)

C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 31  

             ; FUNCTION _CyDmaChSetInitialTd (BEGIN)
                                           ; SOURCE LINE # 529
;---- Variable 'chHandle' assigned to Register 'R7' ----
;---- Variable 'startTd' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
;---- Variable 'status' assigned to Register 'R6' ----
0000 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 533
0002 EF                MOV     A,R7
0003 C3                CLR     C
0004 9418              SUBB    A,#018H
0006 5013              JNC     ?C0028
                                           ; SOURCE LINE # 534
                                           ; SOURCE LINE # 535
0008 75F010            MOV     B,#010H
000B EF                MOV     A,R7
000C A4                MUL     AB
000D 2419              ADD     A,#019H
000F F582              MOV     DPL,A
0011 E5F0              MOV     A,B
0013 3470              ADDC    A,#070H
0015 F583              MOV     DPH,A
0017 ED                MOV     A,R5
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 536
0019 E4                CLR     A
001A 1E                DEC     R6
                                           ; SOURCE LINE # 537
001B         ?C0028:
                                           ; SOURCE LINE # 539
001B AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 540
001D         ?C0029:
001D 22                RET     
             ; FUNCTION _CyDmaChSetInitialTd (END)

             ; FUNCTION _CyDmaChSetRequest (BEGIN)
                                           ; SOURCE LINE # 567
;---- Variable 'chHandle' assigned to Register 'R7' ----
;---- Variable 'request' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 568
                                           ; SOURCE LINE # 569
;---- Variable 'status' assigned to Register 'R6' ----
0000 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 571
0002 EF                MOV     A,R7
0003 C3                CLR     C
0004 9418              SUBB    A,#018H
0006 501A              JNC     ?C0030
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 573
0008 75F010            MOV     B,#010H
000B EF                MOV     A,R7
000C A4                MUL     AB
000D 2414              ADD     A,#014H
000F F582              MOV     DPL,A
0011 E5F0              MOV     A,B
0013 3470              ADDC    A,#070H
0015 F583              MOV     DPH,A
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 32  

0019 ED                MOV     A,R5
001A 5407              ANL     A,#07H
001C FD                MOV     R5,A
001D EF                MOV     A,R7
001E 4D                ORL     A,R5
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 574
0020 E4                CLR     A
0021 1E                DEC     R6
                                           ; SOURCE LINE # 575
0022         ?C0030:
                                           ; SOURCE LINE # 577
0022 AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 578
0024         ?C0031:
0024 22                RET     
             ; FUNCTION _CyDmaChSetRequest (END)

             ; FUNCTION _CyDmaChGetRequest (BEGIN)
                                           ; SOURCE LINE # 600
;---- Variable 'chHandle' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 601
                                           ; SOURCE LINE # 602
;---- Variable 'status' assigned to Register 'R3' ----
0000 7BFF              MOV     R3,#0FFH
                                           ; SOURCE LINE # 604
0002 EF                MOV     A,R7
0003 C3                CLR     C
0004 9418              SUBB    A,#018H
0006 5019              JNC     ?C0032
                                           ; SOURCE LINE # 605
                                           ; SOURCE LINE # 607
0008 75F010            MOV     B,#010H
000B EF                MOV     A,R7
000C A4                MUL     AB
000D 2414              ADD     A,#014H
000F F582              MOV     DPL,A
0011 E5F0              MOV     A,B
0013 3470              ADDC    A,#070H
0015 F583              MOV     DPH,A
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 E4                CLR     A
001A EF                MOV     A,R7
001B 5407              ANL     A,#07H
001D FF                MOV     R7,A
001E E4                CLR     A
001F AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 608
0021         ?C0032:
                                           ; SOURCE LINE # 610
0021 AF03              MOV     R7,AR3
                                           ; SOURCE LINE # 611
0023         ?C0033:
0023 22                RET     
             ; FUNCTION _CyDmaChGetRequest (END)

             ; FUNCTION _CyDmaChStatus (BEGIN)
                                           ; SOURCE LINE # 650
0000 900000      R     MOV     DPTR,#currentTd
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 33  

0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
;---- Variable 'chHandle' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 651
                                           ; SOURCE LINE # 652
;---- Variable 'status' assigned to Register 'R6' ----
000B 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 654
000D EF                MOV     A,R7
000E C3                CLR     C
000F 9418              SUBB    A,#018H
0011 505C              JNC     ?C0034
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 656
0013 900000      R     MOV     DPTR,#currentTd
0016 E0                MOVX    A,@DPTR
0017 FB                MOV     R3,A
0018 A3                INC     DPTR
0019 E0                MOVX    A,@DPTR
001A FA                MOV     R2,A
001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D 4A                ORL     A,R2
001E 4B                ORL     A,R3
001F 6020              JZ      ?C0035
                                           ; SOURCE LINE # 657
                                           ; SOURCE LINE # 658
0021 75F010            MOV     B,#010H
0024 EF                MOV     A,R7
0025 A4                MUL     AB
0026 2419              ADD     A,#019H
0028 F582              MOV     DPL,A
002A E5F0              MOV     A,B
002C 3470              ADDC    A,#070H
002E F583              MOV     DPH,A
0030 E0                MOVX    A,@DPTR
0031 547F              ANL     A,#07FH
0033 FD                MOV     R5,A
0034 900000      R     MOV     DPTR,#currentTd
0037 E0                MOVX    A,@DPTR
0038 A3                INC     DPTR
0039 E0                MOVX    A,@DPTR
003A A3                INC     DPTR
003B E0                MOVX    A,@DPTR
003C F9                MOV     R1,A
003D ED                MOV     A,R5
003E 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 659
0041         ?C0035:
                                           ; SOURCE LINE # 661
0041 900000      R     MOV     DPTR,#state
0044 E0                MOVX    A,@DPTR
0045 FB                MOV     R3,A
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
0048 FA                MOV     R2,A
0049 A3                INC     DPTR
004A E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 34  

004B 4A                ORL     A,R2
004C 4B                ORL     A,R3
004D 601E              JZ      ?C0036
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 663
004F 75F010            MOV     B,#010H
0052 EF                MOV     A,R7
0053 A4                MUL     AB
0054 2418              ADD     A,#018H
0056 F582              MOV     DPL,A
0058 E5F0              MOV     A,B
005A 3470              ADDC    A,#070H
005C F583              MOV     DPH,A
005E E0                MOVX    A,@DPTR
005F FF                MOV     R7,A
0060 900000      R     MOV     DPTR,#state
0063 E0                MOVX    A,@DPTR
0064 A3                INC     DPTR
0065 E0                MOVX    A,@DPTR
0066 A3                INC     DPTR
0067 E0                MOVX    A,@DPTR
0068 F9                MOV     R1,A
0069 EF                MOV     A,R7
006A 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 664
006D         ?C0036:
                                           ; SOURCE LINE # 666
006D E4                CLR     A
006E FE                MOV     R6,A
                                           ; SOURCE LINE # 667
006F         ?C0034:
                                           ; SOURCE LINE # 669
006F AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 670
0071         ?C0037:
0071 22                RET     
             ; FUNCTION _CyDmaChStatus (END)

             ; FUNCTION _CyDmaChSetConfiguration (BEGIN)
                                           ; SOURCE LINE # 716
;---- Variable 'chHandle' assigned to Register 'R4' ----
0000 AC07              MOV     R4,AR7
;---- Variable 'requestPerBurst' assigned to Register 'R3' ----
;---- Variable 'burstCount' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 718
                                           ; SOURCE LINE # 719
;---- Variable 'status' assigned to Register 'R2' ----
0002 7A01              MOV     R2,#01H
                                           ; SOURCE LINE # 721
0004 EC                MOV     A,R4
0005 C3                CLR     C
0006 9418              SUBB    A,#018H
0008 506C              JNC     ?C0038
                                           ; SOURCE LINE # 722
                                           ; SOURCE LINE # 723
000A EB                MOV     A,R3
000B 5401              ANL     A,#01H
000D 75F080            MOV     B,#080H
0010 A4                MUL     AB
0011 FF                MOV     R7,A
0012 ED                MOV     A,R5
0013 547F              ANL     A,#07FH
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 35  

0015 4F                ORL     A,R7
0016 FF                MOV     R7,A
0017 75F008            MOV     B,#08H
001A EC                MOV     A,R4
001B A4                MUL     AB
001C 2400              ADD     A,#00H
001E F582              MOV     DPL,A
0020 E5F0              MOV     A,B
0022 3476              ADDC    A,#076H
0024 F583              MOV     DPH,A
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 724
0028 900000      R     MOV     DPTR,#tdDone1
002B E0                MOVX    A,@DPTR
002C 540F              ANL     A,#0FH
002E 75F010            MOV     B,#010H
0031 A4                MUL     AB
0032 FF                MOV     R7,A
0033 900000      R     MOV     DPTR,#tdDone0
0036 E0                MOVX    A,@DPTR
0037 540F              ANL     A,#0FH
0039 4F                ORL     A,R7
003A FF                MOV     R7,A
003B 75F008            MOV     B,#08H
003E EC                MOV     A,R4
003F A4                MUL     AB
0040 2401              ADD     A,#01H
0042 F582              MOV     DPL,A
0044 E5F0              MOV     A,B
0046 3476              ADDC    A,#076H
0048 F583              MOV     DPH,A
004A EF                MOV     A,R7
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 725
004C 900000      R     MOV     DPTR,#tdStop
004F E0                MOVX    A,@DPTR
0050 540F              ANL     A,#0FH
0052 FF                MOV     R7,A
0053 75F008            MOV     B,#08H
0056 EC                MOV     A,R4
0057 A4                MUL     AB
0058 2402              ADD     A,#02H
005A F582              MOV     DPL,A
005C E5F0              MOV     A,B
005E 3476              ADDC    A,#076H
0060 F583              MOV     DPH,A
0062 EF                MOV     A,R7
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 726
0064 75F008            MOV     B,#08H
0067 EC                MOV     A,R4
0068 A4                MUL     AB
0069 2403              ADD     A,#03H
006B F582              MOV     DPL,A
006D E5F0              MOV     A,B
006F 3476              ADDC    A,#076H
0071 F583              MOV     DPH,A
0073 E4                CLR     A
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 728
0075 1A                DEC     R2
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 36  

                                           ; SOURCE LINE # 729
0076         ?C0038:
                                           ; SOURCE LINE # 731
0076 AF02              MOV     R7,AR2
                                           ; SOURCE LINE # 732
0078         ?C0039:
0078 22                RET     
             ; FUNCTION _CyDmaChSetConfiguration (END)

             ; FUNCTION CyDmaTdAllocate (BEGIN)
                                           ; SOURCE LINE # 752
                                           ; SOURCE LINE # 753
                                           ; SOURCE LINE # 755
0000 900000      R     MOV     DPTR,#element
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 758
0006 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'interruptState' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 760
0009 900000      R     MOV     DPTR,#CyDmaTdCurrentNumber
000C E0                MOVX    A,@DPTR
000D D3                SETB    C
000E 9418              SUBB    A,#018H
0010 4023              JC      ?C0040
                                           ; SOURCE LINE # 761
                                           ; SOURCE LINE # 763
0012 900000      R     MOV     DPTR,#CyDmaTdFreeIndex
0015 E0                MOVX    A,@DPTR
0016 FE                MOV     R6,A
0017 900000      R     MOV     DPTR,#element
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 766
001B 900000      R     MOV     DPTR,#CyDmaTdCurrentNumber
001E E0                MOVX    A,@DPTR
001F 14                DEC     A
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 769
0021 75F008            MOV     B,#08H
0024 EE                MOV     A,R6
0025 A4                MUL     AB
0026 2400              ADD     A,#00H
0028 F582              MOV     DPL,A
002A E5F0              MOV     A,B
002C 3478              ADDC    A,#078H
002E F583              MOV     DPH,A
0030 E0                MOVX    A,@DPTR
0031 900000      R     MOV     DPTR,#CyDmaTdFreeIndex
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 770
0035         ?C0040:
                                           ; SOURCE LINE # 773
0035 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 775
0038 900000      R     MOV     DPTR,#element
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
                                           ; SOURCE LINE # 776
003D         ?C0041:
003D 22                RET     
             ; FUNCTION CyDmaTdAllocate (END)

C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 37  

             ; FUNCTION _CyDmaTdFree (BEGIN)
                                           ; SOURCE LINE # 794
0000 900000      R     MOV     DPTR,#tdHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 795
                                           ; SOURCE LINE # 796
0005 C3                CLR     C
0006 9480              SUBB    A,#080H
0008 5033              JNC     ?C0043
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 799
000A 120000      E     LCALL   CyEnterCriticalSection
000D 900000      R     MOV     DPTR,#interruptState
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 802
0012 900000      R     MOV     DPTR,#CyDmaTdFreeIndex
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 900000      R     MOV     DPTR,#tdHandle
001A E0                MOVX    A,@DPTR
001B FE                MOV     R6,A
001C 75F008            MOV     B,#08H
001F A4                MUL     AB
0020 2400              ADD     A,#00H
0022 F582              MOV     DPL,A
0024 E5F0              MOV     A,B
0026 3478              ADDC    A,#078H
0028 F583              MOV     DPH,A
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 805
002C 900000      R     MOV     DPTR,#CyDmaTdFreeIndex
002F EE                MOV     A,R6
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 808
0031 A3                INC     DPTR
0032 E0                MOVX    A,@DPTR
0033 04                INC     A
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 811
0035 900000      R     MOV     DPTR,#interruptState
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 812
                                           ; SOURCE LINE # 813
003D         ?C0043:
003D 22                RET     
             ; FUNCTION _CyDmaTdFree (END)

             ; FUNCTION CyDmaTdFreeCount (BEGIN)
                                           ; SOURCE LINE # 830
                                           ; SOURCE LINE # 831
                                           ; SOURCE LINE # 832
0000 900000      R     MOV     DPTR,#CyDmaTdCurrentNumber
0003 E0                MOVX    A,@DPTR
0004 C3                CLR     C
0005 9418              SUBB    A,#018H
0007 FF                MOV     R7,A
                                           ; SOURCE LINE # 833
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 38  

0008         ?C0044:
0008 22                RET     
             ; FUNCTION CyDmaTdFreeCount (END)

             ; FUNCTION _CyDmaTdSetConfiguration (BEGIN)
                                           ; SOURCE LINE # 891
0000 900000      R     MOV     DPTR,#transferCount
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
000B 900000      R     MOV     DPTR,#tdHandle
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 894
0010 900000      R     MOV     DPTR,#status
0013 7401              MOV     A,#01H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 896
0016 EF                MOV     A,R7
0017 C3                CLR     C
0018 9480              SUBB    A,#080H
001A 5065              JNC     ?C0045
001C 900000      R     MOV     DPTR,#transferCount
001F E0                MOVX    A,@DPTR
0020 54F0              ANL     A,#0F0H
0022 A3                INC     DPTR
0023 705C              JNZ     ?C0045
                                           ; SOURCE LINE # 897
                                           ; SOURCE LINE # 899
0025 900000      R     MOV     DPTR,#tdHandle
0028 E0                MOVX    A,@DPTR
0029 75F008            MOV     B,#08H
002C A4                MUL     AB
002D 2400              ADD     A,#00H
002F FF                MOV     R7,A
0030 E5F0              MOV     A,B
0032 3478              ADDC    A,#078H
0034 FE                MOV     R6,A
0035 900000      R     MOV     DPTR,#convert
0038 F0                MOVX    @DPTR,A
0039 A3                INC     DPTR
003A EF                MOV     A,R7
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 900
003C AA06              MOV     R2,AR6
003E F9                MOV     R1,A
003F 7B01              MOV     R3,#01H
0041 900000      R     MOV     DPTR,#transferCount
0044 E0                MOVX    A,@DPTR
0045 FC                MOV     R4,A
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
0048 FD                MOV     R5,A
0049 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 903
004C 900000      R     MOV     DPTR,#nextTd
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 39  

004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 900000      R     MOV     DPTR,#tdHandle
0054 E0                MOVX    A,@DPTR
0055 FE                MOV     R6,A
0056 75F008            MOV     B,#08H
0059 A4                MUL     AB
005A 2402              ADD     A,#02H
005C F582              MOV     DPL,A
005E E5F0              MOV     A,B
0060 3478              ADDC    A,#078H
0062 F583              MOV     DPH,A
0064 EF                MOV     A,R7
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 906
0066 900000      R     MOV     DPTR,#configuration
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B 75F008            MOV     B,#08H
006E EE                MOV     A,R6
006F A4                MUL     AB
0070 2403              ADD     A,#03H
0072 F582              MOV     DPL,A
0074 E5F0              MOV     A,B
0076 3478              ADDC    A,#078H
0078 F583              MOV     DPH,A
007A EF                MOV     A,R7
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 908
007C E4                CLR     A
007D 900000      R     MOV     DPTR,#status
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 909
0081         ?C0045:
                                           ; SOURCE LINE # 911
0081 900000      R     MOV     DPTR,#status
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
                                           ; SOURCE LINE # 912
0086         ?C0046:
0086 22                RET     
             ; FUNCTION _CyDmaTdSetConfiguration (END)

             ; FUNCTION _CyDmaTdGetConfiguration (BEGIN)
                                           ; SOURCE LINE # 951
0000 900000      R     MOV     DPTR,#transferCount
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
000B 900000      R     MOV     DPTR,#tdHandle
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 953
                                           ; SOURCE LINE # 954
0010 900000      R     MOV     DPTR,#status
0013 7401              MOV     A,#01H
0015 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 40  

                                           ; SOURCE LINE # 956
0016 EF                MOV     A,R7
0017 C3                CLR     C
0018 9480              SUBB    A,#080H
001A 4003              JC      $ + 5H
001C 020000      R     LJMP    ?C0047
                                           ; SOURCE LINE # 957
                                           ; SOURCE LINE # 959
001F 900000      R     MOV     DPTR,#transferCount
0022 E0                MOVX    A,@DPTR
0023 FB                MOV     R3,A
0024 A3                INC     DPTR
0025 E0                MOVX    A,@DPTR
0026 FA                MOV     R2,A
0027 A3                INC     DPTR
0028 E0                MOVX    A,@DPTR
0029 4A                ORL     A,R2
002A 4B                ORL     A,R3
002B 6033              JZ      ?C0048
                                           ; SOURCE LINE # 960
                                           ; SOURCE LINE # 962
002D 900000      R     MOV     DPTR,#tdHandle
0030 E0                MOVX    A,@DPTR
0031 75F008            MOV     B,#08H
0034 A4                MUL     AB
0035 2400              ADD     A,#00H
0037 FF                MOV     R7,A
0038 E5F0              MOV     A,B
003A 3478              ADDC    A,#078H
003C FE                MOV     R6,A
003D 900000      R     MOV     DPTR,#convert
0040 F0                MOVX    @DPTR,A
0041 A3                INC     DPTR
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 963
0044 AA06              MOV     R2,AR6
0046 F9                MOV     R1,A
0047 7B01              MOV     R3,#01H
0049 120000      E     LCALL   _cyread16_nodpx
004C EE                MOV     A,R6
004D 540F              ANL     A,#0FH
004F F9                MOV     R1,A
0050 900000      R     MOV     DPTR,#transferCount
0053 E0                MOVX    A,@DPTR
0054 FB                MOV     R3,A
0055 A3                INC     DPTR
0056 E0                MOVX    A,@DPTR
0057 FA                MOV     R2,A
0058 A3                INC     DPTR
0059 E0                MOVX    A,@DPTR
005A C9                XCH     A,R1
005B 8FF0              MOV     B,R7
005D 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 964
0060         ?C0048:
                                           ; SOURCE LINE # 967
0060 900000      R     MOV     DPTR,#nextTd
0063 E0                MOVX    A,@DPTR
0064 FB                MOV     R3,A
0065 A3                INC     DPTR
0066 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 41  

0067 FA                MOV     R2,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A 4A                ORL     A,R2
006B 4B                ORL     A,R3
006C 6021              JZ      ?C0049
                                           ; SOURCE LINE # 968
                                           ; SOURCE LINE # 970
006E 900000      R     MOV     DPTR,#tdHandle
0071 E0                MOVX    A,@DPTR
0072 75F008            MOV     B,#08H
0075 A4                MUL     AB
0076 2402              ADD     A,#02H
0078 F582              MOV     DPL,A
007A E5F0              MOV     A,B
007C 3478              ADDC    A,#078H
007E F583              MOV     DPH,A
0080 E0                MOVX    A,@DPTR
0081 FF                MOV     R7,A
0082 900000      R     MOV     DPTR,#nextTd
0085 E0                MOVX    A,@DPTR
0086 A3                INC     DPTR
0087 E0                MOVX    A,@DPTR
0088 A3                INC     DPTR
0089 E0                MOVX    A,@DPTR
008A F9                MOV     R1,A
008B EF                MOV     A,R7
008C 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 971
008F         ?C0049:
                                           ; SOURCE LINE # 974
008F 900000      R     MOV     DPTR,#configuration
0092 E0                MOVX    A,@DPTR
0093 FB                MOV     R3,A
0094 A3                INC     DPTR
0095 E0                MOVX    A,@DPTR
0096 FA                MOV     R2,A
0097 A3                INC     DPTR
0098 E0                MOVX    A,@DPTR
0099 4A                ORL     A,R2
009A 4B                ORL     A,R3
009B 6021              JZ      ?C0050
                                           ; SOURCE LINE # 975
                                           ; SOURCE LINE # 977
009D 900000      R     MOV     DPTR,#tdHandle
00A0 E0                MOVX    A,@DPTR
00A1 75F008            MOV     B,#08H
00A4 A4                MUL     AB
00A5 2403              ADD     A,#03H
00A7 F582              MOV     DPL,A
00A9 E5F0              MOV     A,B
00AB 3478              ADDC    A,#078H
00AD F583              MOV     DPH,A
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
00B1 900000      R     MOV     DPTR,#configuration
00B4 E0                MOVX    A,@DPTR
00B5 A3                INC     DPTR
00B6 E0                MOVX    A,@DPTR
00B7 A3                INC     DPTR
00B8 E0                MOVX    A,@DPTR
00B9 F9                MOV     R1,A
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 42  

00BA EF                MOV     A,R7
00BB 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 978
00BE         ?C0050:
                                           ; SOURCE LINE # 980
00BE E4                CLR     A
00BF 900000      R     MOV     DPTR,#status
00C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 981
00C3         ?C0047:
                                           ; SOURCE LINE # 983
00C3 900000      R     MOV     DPTR,#status
00C6 E0                MOVX    A,@DPTR
00C7 FF                MOV     R7,A
                                           ; SOURCE LINE # 984
00C8         ?C0051:
00C8 22                RET     
             ; FUNCTION _CyDmaTdGetConfiguration (END)

             ; FUNCTION _CyDmaTdSetAddress (BEGIN)
                                           ; SOURCE LINE # 1010
0000 900000      R     MOV     DPTR,#source
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EA                MOV     A,R2
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
000E 900000      R     MOV     DPTR,#tdHandle
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1012
0013 900000      R     MOV     DPTR,#status
0016 7401              MOV     A,#01H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1015
0019 EF                MOV     A,R7
001A C3                CLR     C
001B 9480              SUBB    A,#080H
001D 5053              JNC     ?C0052
                                           ; SOURCE LINE # 1016
                                           ; SOURCE LINE # 1018
001F 900000      R     MOV     DPTR,#tdHandle
0022 E0                MOVX    A,@DPTR
0023 75F008            MOV     B,#08H
0026 A4                MUL     AB
0027 2404              ADD     A,#04H
0029 FF                MOV     R7,A
002A E5F0              MOV     A,B
002C 3478              ADDC    A,#078H
002E FE                MOV     R6,A
002F 900000      R     MOV     DPTR,#convert
0032 F0                MOVX    @DPTR,A
0033 A3                INC     DPTR
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 43  

                                           ; SOURCE LINE # 1019
0036 AA06              MOV     R2,AR6
0038 F9                MOV     R1,A
0039 7B01              MOV     R3,#01H
003B 900000      R     MOV     DPTR,#source
003E E0                MOVX    A,@DPTR
003F FC                MOV     R4,A
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 FD                MOV     R5,A
0043 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 1022
0046 900000      R     MOV     DPTR,#tdHandle
0049 E0                MOVX    A,@DPTR
004A 75F008            MOV     B,#08H
004D A4                MUL     AB
004E 2406              ADD     A,#06H
0050 FF                MOV     R7,A
0051 E5F0              MOV     A,B
0053 3478              ADDC    A,#078H
0055 FE                MOV     R6,A
0056 900000      R     MOV     DPTR,#convert
0059 F0                MOVX    @DPTR,A
005A A3                INC     DPTR
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1023
005D AA06              MOV     R2,AR6
005F F9                MOV     R1,A
0060 7B01              MOV     R3,#01H
0062 900000      R     MOV     DPTR,#destination
0065 E0                MOVX    A,@DPTR
0066 FC                MOV     R4,A
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 FD                MOV     R5,A
006A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 1025
006D E4                CLR     A
006E 900000      R     MOV     DPTR,#status
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1026
0072         ?C0052:
                                           ; SOURCE LINE # 1028
0072 900000      R     MOV     DPTR,#status
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
                                           ; SOURCE LINE # 1029
0077         ?C0053:
0077 22                RET     
             ; FUNCTION _CyDmaTdSetAddress (END)

             ; FUNCTION _CyDmaTdGetAddress (BEGIN)
                                           ; SOURCE LINE # 1058
0000 900000      R     MOV     DPTR,#source
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 44  

000A F0                MOVX    @DPTR,A
000B 900000      R     MOV     DPTR,#tdHandle
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1059
                                           ; SOURCE LINE # 1060
0010 900000      R     MOV     DPTR,#status
0013 7401              MOV     A,#01H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1063
0016 EF                MOV     A,R7
0017 C3                CLR     C
0018 9480              SUBB    A,#080H
001A 4003              JC      $ + 5H
001C 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 1064
                                           ; SOURCE LINE # 1066
001F 900000      R     MOV     DPTR,#source
0022 E0                MOVX    A,@DPTR
0023 FB                MOV     R3,A
0024 A3                INC     DPTR
0025 E0                MOVX    A,@DPTR
0026 FA                MOV     R2,A
0027 A3                INC     DPTR
0028 E0                MOVX    A,@DPTR
0029 4A                ORL     A,R2
002A 4B                ORL     A,R3
002B 6030              JZ      ?C0055
                                           ; SOURCE LINE # 1067
                                           ; SOURCE LINE # 1069
002D 900000      R     MOV     DPTR,#tdHandle
0030 E0                MOVX    A,@DPTR
0031 75F008            MOV     B,#08H
0034 A4                MUL     AB
0035 2404              ADD     A,#04H
0037 FF                MOV     R7,A
0038 E5F0              MOV     A,B
003A 3478              ADDC    A,#078H
003C FE                MOV     R6,A
003D 900000      R     MOV     DPTR,#convert
0040 F0                MOVX    @DPTR,A
0041 A3                INC     DPTR
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1070
0044 AA06              MOV     R2,AR6
0046 F9                MOV     R1,A
0047 7B01              MOV     R3,#01H
0049 120000      E     LCALL   _cyread16_nodpx
004C 900000      R     MOV     DPTR,#source
004F E0                MOVX    A,@DPTR
0050 FB                MOV     R3,A
0051 A3                INC     DPTR
0052 E0                MOVX    A,@DPTR
0053 FA                MOV     R2,A
0054 A3                INC     DPTR
0055 E0                MOVX    A,@DPTR
0056 F9                MOV     R1,A
0057 EE                MOV     A,R6
0058 8FF0              MOV     B,R7
005A 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 1071
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 45  

005D         ?C0055:
                                           ; SOURCE LINE # 1074
005D 900000      R     MOV     DPTR,#destination
0060 E0                MOVX    A,@DPTR
0061 FB                MOV     R3,A
0062 A3                INC     DPTR
0063 E0                MOVX    A,@DPTR
0064 FA                MOV     R2,A
0065 A3                INC     DPTR
0066 E0                MOVX    A,@DPTR
0067 4A                ORL     A,R2
0068 4B                ORL     A,R3
0069 6030              JZ      ?C0056
                                           ; SOURCE LINE # 1075
                                           ; SOURCE LINE # 1077
006B 900000      R     MOV     DPTR,#tdHandle
006E E0                MOVX    A,@DPTR
006F 75F008            MOV     B,#08H
0072 A4                MUL     AB
0073 2406              ADD     A,#06H
0075 FF                MOV     R7,A
0076 E5F0              MOV     A,B
0078 3478              ADDC    A,#078H
007A FE                MOV     R6,A
007B 900000      R     MOV     DPTR,#convert
007E F0                MOVX    @DPTR,A
007F A3                INC     DPTR
0080 EF                MOV     A,R7
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1078
0082 AA06              MOV     R2,AR6
0084 F9                MOV     R1,A
0085 7B01              MOV     R3,#01H
0087 120000      E     LCALL   _cyread16_nodpx
008A 900000      R     MOV     DPTR,#destination
008D E0                MOVX    A,@DPTR
008E FB                MOV     R3,A
008F A3                INC     DPTR
0090 E0                MOVX    A,@DPTR
0091 FA                MOV     R2,A
0092 A3                INC     DPTR
0093 E0                MOVX    A,@DPTR
0094 F9                MOV     R1,A
0095 EE                MOV     A,R6
0096 8FF0              MOV     B,R7
0098 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 1079
009B         ?C0056:
                                           ; SOURCE LINE # 1081
009B E4                CLR     A
009C 900000      R     MOV     DPTR,#status
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1082
00A0         ?C0054:
                                           ; SOURCE LINE # 1084
00A0 900000      R     MOV     DPTR,#status
00A3 E0                MOVX    A,@DPTR
00A4 FF                MOV     R7,A
                                           ; SOURCE LINE # 1085
00A5         ?C0057:
00A5 22                RET     
             ; FUNCTION _CyDmaTdGetAddress (END)
C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 46  


             ; FUNCTION _CyDmaChRoundRobin (BEGIN)
                                           ; SOURCE LINE # 1109
;---- Variable 'chHandle' assigned to Register 'R7' ----
;---- Variable 'enableRR' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1110
                                           ; SOURCE LINE # 1111
;---- Variable 'status' assigned to Register 'R6' ----
0000 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 1113
0002 EF                MOV     A,R7
0003 C3                CLR     C
0004 9418              SUBB    A,#018H
0006 502D              JNC     ?C0058
                                           ; SOURCE LINE # 1114
                                           ; SOURCE LINE # 1115
0008 ED                MOV     A,R5
0009 6015              JZ      ?C0059
                                           ; SOURCE LINE # 1116
                                           ; SOURCE LINE # 1117
000B 75F010            MOV     B,#010H
000E EF                MOV     A,R7
000F A4                MUL     AB
0010 2410              ADD     A,#010H
0012 F582              MOV     DPL,A
0014 E5F0              MOV     A,B
0016 3470              ADDC    A,#070H
0018 F583              MOV     DPH,A
001A E0                MOVX    A,@DPTR
001B 4410              ORL     A,#010H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1118
001E 8013              SJMP    ?C0060
0020         ?C0059:
                                           ; SOURCE LINE # 1120
                                           ; SOURCE LINE # 1121
0020 75F010            MOV     B,#010H
0023 EF                MOV     A,R7
0024 A4                MUL     AB
0025 2410              ADD     A,#010H
0027 F582              MOV     DPL,A
0029 E5F0              MOV     A,B
002B 3470              ADDC    A,#070H
002D F583              MOV     DPH,A
002F E0                MOVX    A,@DPTR
0030 54EF              ANL     A,#0EFH
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1122
0033         ?C0060:
                                           ; SOURCE LINE # 1124
0033 E4                CLR     A
0034 FE                MOV     R6,A
                                           ; SOURCE LINE # 1125
0035         ?C0058:
                                           ; SOURCE LINE # 1127
0035 AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 1128
0037         ?C0061:
0037 22                RET     
             ; FUNCTION _CyDmaChRoundRobin (END)


C51 COMPILER V9.51   CYDMAC                                                                10/12/2016 11:52:56 PAGE 47  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1898    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6      72
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
