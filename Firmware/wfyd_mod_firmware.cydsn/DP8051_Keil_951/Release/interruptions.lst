C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE INTERRUPTIONS
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\interruptions.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\interruptions.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG) WL(2) PR(.\DP80
                    -51_Keil_951\Release/interruptions.lst) CD OT(8,SPEED) OJ(.\DP8051_Keil_951\Release\interruptions.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          // ----------------------------------------------------------------------------
   2          // Copyright (C)  qbrobotics. All rights reserved.
   3          // www.qbrobotics.com
   4          // ----------------------------------------------------------------------------
   5          
   6          /**
   7          * \file         interruptions.c
   8          *
   9          * \brief        Interruption functions are in this file.
  10          * \date         Dic. 1, 2015
  11          * \author       qbrobotics
  12          * \copyright    (C)  qbrobotics. All rights reserved.
  13          */
  14          
  15          
  16          //=================================================================     includes
  17          #include <interruptions.h>
  18          #include <command_processing.h>
  19          
  20          #include "globals.h"
  21          #include "utils.h"
  22          
  23          //===================================================================     global
  24          
  25          
  26          // PWM vaules needed to obtain 8 Volts given a certain input tension
  27          // Numbers are sperimentally calculated //[index] (milliampere)
  28          CYCODE uint8 pwm_preload_values[29] = {100,    //0 (11500)
  29                                                       100,//83
  30                                                       100,//78
  31                                                        76,
  32                                                        74,
  33                                                        72,    //5 (14000)
  34                                                        70,
  35                                                        68,
  36                                                        67,
  37                                                        65,
  38                                                        64,    //10 (16500)
  39                                                        63,
  40                                                        62,
  41                                                        61,
  42                                                        60,
  43                                                        59,    //15 (19000)
  44                                                        58,
  45                                                        57,
  46                                                        56,
  47                                                        56,
  48                                                        55,    //20 (21500)
  49                                                        54,
  50                                                        54,
  51                                                        53,
  52                                                        52,
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 2   

  53                                                        52,    //25 (24000)
  54                                                        52,
  55                                                        51,
  56                                                        51};   //28 (25500)
  57          
  58          CYCODE uint8 hitech_pwm_preload_values[36] = {  100,   //0 (8000)
  59                                                          76,
  60                                                          71,
  61                                                          69,
  62                                                          67,
  63                                                          65,     //5 (10500)
  64                                                          63,
  65                                                          61,
  66                                                          60,
  67                                                          58,
  68                                                          57,     //10 (13000)
  69                                                          56,
  70                                                          55,
  71                                                          54,
  72                                                          53,
  73                                                          52,     //15 (15500)
  74                                                          51,
  75                                                          50,
  76                                                          49,
  77                                                          49,
  78                                                          48,     //20 (18000)
  79                                                          47,
  80                                                          47,
  81                                                          46,
  82                                                          45,
  83                                                          45,     //25 (20500)
  84                                                          45,
  85                                                          44,
  86                                                          44,
  87                                                          43,
  88                                                          43,     //30 (23000)
  89                                                          43,
  90                                                          43,
  91                                                          42,
  92                                                          42,
  93                                                          42};    //35 (25500)
  94          
  95          CYCODE uint8 hitech_pwm_preload_values_6v[32] = {100,   //0 (6000)
  96                                                            76,
  97                                                            71,
  98                                                            68,
  99                                                            66,
 100                                                            64,   //5 (8750)
 101                                                            62,
 102                                                            60,
 103                                                            58,
 104                                                            56,
 105                                                            54,   //10 (11500)
 106                                                            53,
 107                                                            52,
 108                                                            51,
 109                                                            50,
 110                                                            49,   //15 ()
 111                                                            47,
 112                                                            46,
 113                                                            45,
 114                                                            44,
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 3   

 115                                                            43,   //20 ()
 116                                                            42,
 117                                                            41,
 118                                                            40,
 119                                                            39,
 120                                                            38,   //25 ()
 121                                                            37,
 122                                                            37,
 123                                                            37,
 124                                                            37,
 125                                                            36};  //30 (24750)
 126          
 127          //==============================================================================
 128          //                                                            WATCHDOG INTERRUPT
 129          //==============================================================================
 130          
 131          CY_ISR(ISR_WATCHDOG_Handler){
 132   1      
 133   1          // Set WDT flag
 134   1          
 135   1          watchdog_flag = TRUE;
 136   1      
 137   1      }
 138          
 139          //==============================================================================
 140          //                                                            RS485 RX INTERRUPT
 141          //==============================================================================
 142          
 143          CY_ISR(ISR_RS485_RX_ExInterrupt) {
 144   1      
 145   1          // Set RS485 flag
 146   1          
 147   1          interrupt_flag = TRUE;
 148   1           
 149   1      }
 150          
 151          //==============================================================================
 152          //                                                             INTERRUPT MANAGER
 153          //==============================================================================
 154          // Manage interrupt from RS485 
 155          //==============================================================================
 156          // Processing RS-485 data frame:
 157          //
 158          // - WAIT_START:    Waits for beginning characters;
 159          // - WAIT_ID:       Waits for ID;
 160          // - WAIT_LENGTH:   Data length;
 161          // - RECEIVE:       Receive all bytes;
 162          // - UNLOAD:        Wait for another device end of transmission;
 163          //
 164          //==============================================================================
 165          
 166          void interrupt_manager(){
 167   1      
 168   1          
 169   1          //===========================================     local variables definition
 170   1      
 171   1          static uint8 CYDATA state = WAIT_START;                      // state
 172   1          
 173   1          //------------------------------------------------- local data packet
 174   1          static uint8 CYDATA data_packet_index;
 175   1          static uint8 CYDATA data_packet_length;
 176   1          static uint8 data_packet_buffer[128];                     
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 4   

 177   1          static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 178   1          //-------------------------------------------------
 179   1      
 180   1          uint8 CYDATA    rx_data;                            // RS485 UART rx data
 181   1          CYBIT           rx_data_type;                       // my id?
 182   1          uint8 CYDATA    package_count = 0;                     
 183   1      
 184   1          //======================================================     receive routine
 185   1          
 186   1          // Get data until buffer is not empty 
 187   1          
 188   1          while(UART_RS485_GetRxBufferSize() && (package_count < 6)){  
 189   2              // 6 stima di numero massimo di pacchetti che riesco a leggere senza bloccare l'esecuzione del fir
             -mware
 190   2              
 191   2              // Get next char
 192   2              rx_data = UART_RS485_GetChar();
 193   2              
 194   2              switch (state) {
 195   3                  //-----     wait for frame start     -------------------------------
 196   3                  case WAIT_START:
 197   3                  
 198   3                      rx_queue[0] = rx_queue[1];
 199   3                      rx_queue[1] = rx_queue[2];
 200   3                      rx_queue[2] = rx_data;
 201   3                      
 202   3                      // Check for header configuration package
 203   3                      if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 204   4                          rx_queue[0] = 0;
 205   4                          rx_queue[1] = 0;
 206   4                          rx_queue[2] = 0;
 207   4                          state       = WAIT_ID;                    
 208   4                      }else
 209   3                          if ((rx_queue[0] == 63) &&      //ASCII - ?
 210   3                              (rx_queue[1] == 13) &&      //ASCII - CR
 211   3                              (rx_queue[2] == 10))        //ASCII - LF)
 212   3                              infoGet(INFO_ALL);
 213   3                      break;
 214   3      
 215   3                  //-----     wait for id     ----------------------------------------
 216   3                  case  WAIT_ID:
 217   3      
 218   3                      // packet is for my ID or is broadcast
 219   3                      if (rx_data == c_mem.id || rx_data == 0)
 220   3                          rx_data_type = FALSE;
 221   3                      else                //packet is for others
 222   3                          rx_data_type = TRUE;
 223   3                      
 224   3                      data_packet_length = 0;
 225   3                      state = WAIT_LENGTH;
 226   3                      break;
 227   3      
 228   3                  //-----     wait for length     ------------------------------------
 229   3                  case  WAIT_LENGTH:
 230   3      
 231   3       
 232   3                      data_packet_length = rx_data;
 233   3                      // check validity of pack length
 234   3                      if (data_packet_length <= 1) {
 235   4                          data_packet_length = 0;
 236   4                          state = WAIT_START;
 237   4                      } else if (data_packet_length > 128) {
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 5   

 238   4                          data_packet_length = 0;
 239   4                          state = WAIT_START;
 240   4                      } else {
 241   4                          data_packet_index = 0;
 242   4                          
 243   4                          if(rx_data_type == FALSE)
 244   4                              state = RECEIVE;          // packet for me or broadcast
 245   4                          else
 246   4                              state = UNLOAD;           // packet for others
 247   4                      }
 248   3                      break;
 249   3      
 250   3                  //-----     receiving     -------------------------------------------
 251   3                  case RECEIVE:
 252   3      
 253   3                      data_packet_buffer[data_packet_index] = rx_data;
 254   3                      data_packet_index++;
 255   3                      
 256   3                      // check end of transmission
 257   3                      if (data_packet_index >= data_packet_length) {
 258   4                          // verify if frame ID corresponded to the device ID
 259   4                          if (rx_data_type == FALSE) {
 260   5                              // copying data from buffer to global packet
 261   5                              memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 262   5                              g_rx.length = data_packet_length;
 263   5                              g_rx.ready  = 1;
 264   5                              commProcess();
 265   5                          }
 266   4                          
 267   4                          data_packet_index  = 0;
 268   4                          data_packet_length = 0;
 269   4                          state              = WAIT_START;
 270   4                          package_count++;
 271   4                      
 272   4                      }
 273   3                      break;
 274   3      
 275   3                  //-----     other device is receving     ---------------------------
 276   3                  case UNLOAD:
 277   3                      if (!(--data_packet_length)) {
 278   4                          data_packet_index  = 0;
 279   4                          data_packet_length = 0;
 280   4                          RS485_CTS_Write(1);
 281   4                          RS485_CTS_Write(0);
 282   4                          state              = WAIT_START;
 283   4                          package_count++;
 284   4                      }
 285   3                      break;
 286   3              }
 287   2          }
 288   1      }
 289          
 290          //==============================================================================
 291          //                                                            FUNCTION SCHEDULER
 292          //==============================================================================
 293          // Call all the function with the right frequency
 294          //==============================================================================
 295          // Base frequency 1000 Hz
 296          //==============================================================================
 297          
 298          void function_scheduler(void) {
 299   1       
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 6   

 300   1          static uint16 counter_calibration = DIV_INIT_VALUE;
 301   1          
 302   1          // Start ADC Conversion, SOC = 1
 303   1      
 304   1          timer_value0 = (uint32)MY_TIMER_ReadCounter();
 305   1           
 306   1          //IR_emitter_Write(1);
 307   1          
 308   1          ADC_SOC_Write(0x01); 
 309   1          
 310   1          // Check Interrupt 
 311   1      
 312   1          if (interrupt_flag){
 313   2              interrupt_flag = FALSE;
 314   2              interrupt_manager();
 315   2          }
 316   1        
 317   1          //---------------------------------- Get Encoders
 318   1      
 319   1          encoder_reading(0, FALSE); 
 320   1          
 321   1          // Check Interrupt     
 322   1          
 323   1          if (interrupt_flag){
 324   2              interrupt_flag = FALSE;
 325   2              interrupt_manager();
 326   2          }   
 327   1          
 328   1          encoder_reading(1, FALSE);
 329   1          
 330   1          // Check Interrupt 
 331   1          
 332   1          if (interrupt_flag){
 333   2              interrupt_flag = FALSE;
 334   2              interrupt_manager();
 335   2          }
 336   1      
 337   1          //---------------------------------- Control Motors
 338   1          
 339   1          motor_control(0);
 340   1      
 341   1          // Check Interrupt 
 342   1      
 343   1          if (interrupt_flag){
 344   2              interrupt_flag = FALSE;
 345   2              interrupt_manager();
 346   2          }
 347   1          
 348   1          motor_control(1);
 349   1          
 350   1          // Check Interrupt 
 351   1          
 352   1          if (interrupt_flag){
 353   2              interrupt_flag = FALSE;
 354   2              interrupt_manager();
 355   2          }
 356   1      
 357   1          //---------------------------------- Read conversion buffer - LOCK function
 358   1      
 359   1          analog_read_end();
 360   1      
 361   1          //---------------------------------- Calibration 
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 7   

 362   1      
 363   1          // Divider 100, freq = 10 Hz
 364   1          if (!(calibration_flag == STOP)) {
 365   2              if (counter_calibration == CALIBRATION_DIV) {
 366   3                  calibration();
 367   3                  counter_calibration = 0;
 368   3              }
 369   2              counter_calibration++;
 370   2          }
 371   1          // Check Interrupt 
 372   1          
 373   1          if (interrupt_flag){
 374   2              interrupt_flag = FALSE;
 375   2              interrupt_manager();
 376   2          }
 377   1         
 378   1          //---------------------------------- Update States
 379   1          
 380   1          // Load k-1 state
 381   1          memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 382   1          memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 383   1      
 384   1          // Load k+1 state
 385   1          memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 386   1      
 387   1          if (interrupt_flag){
 388   2              interrupt_flag = FALSE;
 389   2              interrupt_manager();
 390   2          }
 391   1      
 392   1          //CyDelayUs(100);
 393   1      
 394   1          timer_value = (uint32)MY_TIMER_ReadCounter();
 395   1          MY_TIMER_WriteCounter(5000000);
 396   1      
 397   1      }
 398          
 399          
 400          //==============================================================================
 401          //                                                                MOTORS CONTROL
 402          //==============================================================================
 403          
 404          void motor_control(const uint8 idx) {
 405   1          
 406   1          uint8 CYDATA index = idx;
 407   1      
 408   1          int32 CYDATA pwm_input = 0;
 409   1          
 410   1          int32 CYDATA pos_error;
 411   1          //int32 CYDATA defl_input[NUM_OF_MOTORS];
 412   1          
 413   1          int32 CYDATA k_p = c_mem.k_p;  
 414   1          int32 CYDATA k_i = c_mem.k_i; 
 415   1          int32 CYDATA k_d = c_mem.k_d;  
 416   1      
 417   1          // Static Variables
 418   1          
 419   1          static CYBIT dirM0, dirM1;
 420   1      
 421   1          static int32 pos_error_sum[NUM_OF_MOTORS];
 422   1          
 423   1          // check index value
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 8   

 424   1          if (index >= NUM_OF_MOTORS)
 425   1              return;
 426   1                  
 427   1          pos_error = g_ref.pos[index] - g_meas.pos[index];
 428   1         
 429   1          if (interrupt_flag){
 430   2              interrupt_flag = FALSE;
 431   2              interrupt_manager();
 432   2          }
 433   1          
 434   1          // error sum for integral
 435   1          pos_error_sum[index] += pos_error;
 436   1      
 437   1          //anti wind-up
 438   1          if (pos_error_sum[index] > POS_INTEGRAL_SAT_LIMIT)
 439   1              pos_error_sum[index] = POS_INTEGRAL_SAT_LIMIT;
 440   1          else{
 441   2              if (pos_error_sum[index] < -POS_INTEGRAL_SAT_LIMIT)
 442   2                  pos_error_sum[index] = -POS_INTEGRAL_SAT_LIMIT;
 443   2          }
 444   1            
 445   1          if (interrupt_flag){
 446   2              interrupt_flag = FALSE;
 447   2              interrupt_manager();
 448   2          }
 449   1          // pwm_input init
 450   1          pwm_input = 0;
 451   1          // Proportional
 452   1          if (k_p != 0) {
 453   2                  
 454   2              if ((pos_error > 131072) || (pos_error < -131072))  //if grater than 2^17
 455   2                  pwm_input = (int32)(k_p * (pos_error >> 8)) >> 8;
 456   2              else
 457   2                  pwm_input = (int32)(k_p * pos_error) >> 16;
 458   2          }
 459   1          
 460   1          if (interrupt_flag){
 461   2              interrupt_flag = FALSE;
 462   2              interrupt_manager();
 463   2          }
 464   1                    
 465   1          // Integral
 466   1          if (k_i != 0) 
 467   1              pwm_input += (int32)((k_i >> 6) * pos_error_sum[index]) >> 10;
 468   1          
 469   1          // Derivative
 470   1          if (k_d != 0)
 471   1              pwm_input += (int32)(k_d * (g_measOld.pos[index] - g_meas.pos[index])) >> 16;
 472   1       
 473   1      
 474   1          if (interrupt_flag){
 475   2              interrupt_flag = FALSE;
 476   2              interrupt_manager();
 477   2          }
 478   1           
 479   1          // Update measure
 480   1          //prev_pos[index] = g_meas.pos[index];
 481   1      
 482   1          if (index == 0){
 483   2              if (pwm_input >= 0)
 484   2                  dirM0 = 1;
 485   2                  //direction |= 0x01;
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 9   

 486   2              else
 487   2                  dirM0 = 0;
 488   2                  //direction &= 0xFE;
 489   2          }else{ // index == 1
 490   2              if (pwm_input >= 0)
 491   2                  dirM1 = 1;
 492   2                 // direction |= 0x02;
 493   2              else
 494   2                  dirM1 = 0;
 495   2                  //direction &= 0xFD;
 496   2          }
 497   1          
 498   1          if (interrupt_flag){
 499   2              interrupt_flag = FALSE;
 500   2              interrupt_manager();
 501   2          }
 502   1              
 503   1          // abs(pwm_input) must be lower or equal to PWM_MAX_VALUE
 504   1          if(pwm_input >  PWM_MAX_VALUE) 
 505   1              pwm_input =  PWM_MAX_VALUE;
 506   1          if(pwm_input < -PWM_MAX_VALUE) 
 507   1              pwm_input = -PWM_MAX_VALUE;
 508   1          
 509   1          if (interrupt_flag){
 510   2              interrupt_flag = FALSE;
 511   2              interrupt_manager();
 512   2          }   
 513   1      
 514   1          // remap pwm_input on pwm_limit based on input tension to have maximum 8 volts
 515   1          pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit) >> 10;
 516   1      
 517   1          // drive direction and pwm duty cycle
 518   1              
 519   1          if (dirM0){
 520   2              if (dirM1)
 521   2                  MOTOR_DIR_Write(0x03);
 522   2              else
 523   2                  MOTOR_DIR_Write(0x01);
 524   2          }
 525   1          else{
 526   2              if (dirM1)
 527   2                  MOTOR_DIR_Write(0x02);
 528   2              else
 529   2                  MOTOR_DIR_Write(0x00);
 530   2          }
 531   1      
 532   1          if (interrupt_flag){
 533   2              interrupt_flag = FALSE;
 534   2              interrupt_manager();
 535   2          }
 536   1          
 537   1          if (index == 0)
 538   1              PWM_MOTORS_WriteCompare1(abs(pwm_input));
 539   1          else // index == 1
 540   1              PWM_MOTORS_WriteCompare2(abs(pwm_input));
 541   1          
 542   1          if (interrupt_flag){
 543   2              interrupt_flag = FALSE;
 544   2              interrupt_manager();
 545   2          }
 546   1      }
 547          
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 10  

 548          //==============================================================================
 549          //                                                           ANALOG MEASUREMENTS
 550          //==============================================================================
 551          
 552          void analog_read_end() {
 553   1             
 554   1          /* =========================================================================
 555   1          /   Ideal formulation to calculate tension and current
 556   1          /
 557   1          /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
 558   1          /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
 559   1          /
 560   1          /   Definition:
 561   1          /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
 562   1          /   offset = 2000 -> hardware amplifier bias in mV
 563   1          /   gain = 8.086 -> amplifier gain
 564   1          /   resistor = 18 -> resistor of voltage divider in KOhm 
 565   1          /
 566   1          /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
 567   1          /   and offset unit of measurment is counts, instead dev_tension and
 568   1          /   g_meas.curr[] are converted in properly unit.
 569   1          /  =========================================================================
 570   1          */
 571   1          
 572   1          static int tmaf;
 573   1          static int tmif;
 574   1          
 575   1          // Wait for conversion end
 576   1          while(!ADC_STATUS_Read()){
 577   2              if (interrupt_flag){
 578   3                  interrupt_flag = FALSE;
 579   3                  interrupt_manager();
 580   3              }
 581   2          }
 582   1          
 583   1          // Convert tension read
 584   1          dev_tension = ((int32)(ADC_buf[0] - 1638) * 1952) >> 7;
 585   1          
 586   1          if (interrupt_flag){
 587   2              interrupt_flag = FALSE;
 588   2              interrupt_manager();
 589   2          }
 590   1      
 591   1          // Until there is no valid input tension repeat this measurement
 592   1          
 593   1          if (dev_tension > 0){
 594   2              
 595   2              // Set PWM depends on tension
 596   2              pwm_limit_search();
 597   2              
 598   2              // Check Interrupt 
 599   2          
 600   2              if (interrupt_flag){
 601   3                  interrupt_flag = FALSE;
 602   3                  interrupt_manager();
 603   3              }
 604   2      
 605   2              // Filter and Set currents
 606   2              g_meas.curr[0] = filter_i1((int16) (((int32)(ADC_buf[1] - 1638) * 25771) >> 13));
 607   2              
 608   2              // Check Interrupt 
 609   2          
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 11  

 610   2              if (interrupt_flag){
 611   3                  interrupt_flag = FALSE;
 612   3                  interrupt_manager();
 613   3              }
 614   2              g_meas.curr[1] = filter_i2((int16) (((int32)(ADC_buf[2] - 1638) * 25771) >> 13));
 615   2              
 616   2              // Check Interrupt 
 617   2          
 618   2              if (interrupt_flag){
 619   3                  interrupt_flag = FALSE;
 620   3                  interrupt_manager();
 621   3              }
 622   2          }
 623   1          else {
 624   2              g_meas.curr[0] = 0;
 625   2              g_meas.curr[1] = 0;
 626   2          }
 627   1          
 628   1          // Convert IR measurements
 629   1          g_meas.ir = ADC_buf[3] - 1638;
 630   1          
 631   1          //IR_emitter_Write(0);
 632   1          
 633   1          
 634   1          // Convert Measured Force
 635   1         
 636   1          tmaf = (int)(g_mem.thr_max_pressure * 15.8333); // g_mem.thr_max_pressure*(DEFAULT_MAX_FORCE_PULSE/120
             -)
 637   1          tmif = (int)(g_mem.thr_min_pressure * 22.5);    // g_mem.thr_min_pressure*(DEFAULT_MIN_FORCE_PULSE/ 60
             -)
 638   1          
 639   1          g_meas.force = ADC_buf[4] - 1638 - MIN_FORCE;
 640   1          
 641   1          if (g_meas.force > MAX_FORCE) {
 642   2              g_meas.force = MAX_FORCE;       //range 0 - 3520
 643   2          }
 644   1          
 645   1          // Check Interrupt 
 646   1          
 647   1          if (interrupt_flag){
 648   2              interrupt_flag = FALSE;
 649   2              interrupt_manager();
 650   2          }
 651   1          
 652   1          if (g_mem.flag_pulse){
 653   2              if (!motor_pulse_started) {
 654   3          
 655   3                  if (g_meas.force < tmif) { // if (g_meas.force < g_mem.thr_min_force) {
 656   4                      g_meas.duty_cycle_f = 0;
 657   4                      
 658   4                      // Check Interrupt 
 659   4                  
 660   4                      if (interrupt_flag){
 661   5                          interrupt_flag = FALSE;
 662   5                          interrupt_manager();
 663   5                      }    
 664   4                  
 665   4                  } else {
 666   4                      if (g_meas.force > tmaf) { // if (g_meas.force > g_mem.thr_max_force) {
 667   5                          g_meas.duty_cycle_f = 0;
 668   5                          
 669   5                          // Check Interrupt 
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 12  

 670   5                  
 671   5                          if (interrupt_flag){
 672   6                              interrupt_flag = FALSE;
 673   6                              interrupt_manager();
 674   6                          }  
 675   5                  
 676   5                      } else {
 677   5                          g_meas.duty_cycle_f = (((float)g_meas.force - (float)tmif)/((float)tmaf - (float)tmif)
             -)*55;// (((float)g_meas.force - (float)g_mem.thr_min_force)/((float)g_mem.thr_max_force - (float)g_mem.thr_min_force))*5
             -5;
 678   5                          
 679   5                          // Check Interrupt 
 680   5                  
 681   5                          if (interrupt_flag){
 682   6                              interrupt_flag = FALSE;
 683   6                              interrupt_manager();
 684   6                          }
 685   5                          
 686   5                          g_meas.duty_cycle_f = g_meas.duty_cycle_f + 85;
 687   5                          
 688   5                          // Check Interrupt 
 689   5                  
 690   5                          if (interrupt_flag){
 691   6                              interrupt_flag = FALSE;
 692   6                              interrupt_manager();
 693   6                          }
 694   5                      }
 695   4                  }
 696   3                  pulse_counter_float = g_meas.duty_cycle_f;
 697   3                  pulse_counter = pulse_counter_float;
 698   3                  
 699   3                  // Check Interrupt 
 700   3                  
 701   3                  if (interrupt_flag){
 702   4                      interrupt_flag = FALSE;
 703   4                      interrupt_manager();
 704   4                  }
 705   3                          
 706   3                  set_servo(pulse_counter);
 707   3                  motor_pulse_started = 1;
 708   3                  
 709   3                  // Check Interrupt 
 710   3                  
 711   3                  if (interrupt_flag){
 712   4                      interrupt_flag = FALSE;
 713   4                      interrupt_manager();
 714   4                  }   
 715   3              
 716   3              } else {
 717   3                  if (pulse_counter_float > 85) {
 718   4                      pulse_counter = pulse_counter_float;
 719   4                      set_servo(pulse_counter);
 720   4                      
 721   4                      // Check Interrupt 
 722   4                  
 723   4                      if (interrupt_flag){
 724   5                          interrupt_flag = FALSE;
 725   5                          interrupt_manager();
 726   5                      }
 727   4                  
 728   4                      pulse_counter_float = pulse_counter_float - ((g_meas.duty_cycle_f - 84)*0.0000166 * g_mem.
             -pulse_freq); // 60*1000*step_const=f(puls/min) [f=~110 step_const=0.00182]
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 13  

 729   4                      motor_pulse_started = 1;
 730   4                      
 731   4                      // Check Interrupt 
 732   4                  
 733   4                      if (interrupt_flag){
 734   5                          interrupt_flag = FALSE;
 735   5                          interrupt_manager();
 736   5                      }
 737   4                  
 738   4                  } else {
 739   4                      set_servo(85);
 740   4                      motor_pulse_started = 0;
 741   4                      
 742   4                      // Check Interrupt 
 743   4                  
 744   4                      if (interrupt_flag){
 745   5                          interrupt_flag = FALSE;
 746   5                          interrupt_manager();
 747   5                      }
 748   4                  }
 749   3              }
 750   2          }
 751   1      }
 752          
 753          //==============================================================================
 754          //                                                               ENCODER READING
 755          //==============================================================================
 756          
 757          void encoder_reading(const uint8 idx, const uint8 flag)
 758          {
 759   1          uint8 CYDATA index = idx;
 760   1          
 761   1          uint8 jj;
 762   1          
 763   1          uint32 data_encoder;
 764   1          int32 value_encoder;
 765   1          int32 aux;
 766   1      
 767   1          static int32 last_value_encoder[NUM_OF_SENSORS];
 768   1      
 769   1          static uint8 error[NUM_OF_SENSORS];
 770   1          
 771   1          static CYBIT only_first_time = TRUE;
 772   1      
 773   1          // static int32 l_value[NUM_OF_SENSORS];   //last value for vel
 774   1          // static int32 ll_value[NUM_OF_SENSORS];  //last last value for vel
 775   1          // static int32 lll_value[NUM_OF_SENSORS];  //last last last value for vel
 776   1      
 777   1          if (index >= NUM_OF_SENSORS)
 778   1              return;
 779   1          
 780   1          if (reset_last_value_flag) {
 781   2              for (jj = NUM_OF_SENSORS; jj--;) {
 782   3                  last_value_encoder[jj] = 0;
 783   3              }
 784   2              reset_last_value_flag = 0;
 785   2          }
 786   1      
 787   1          //======================================================     reading sensors
 788   1          if (index == 0)
 789   1                  data_encoder = SHIFTREG_ENC_1_ReadData() & 0x3FFFF;
 790   1          else
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 14  

 791   1                  data_encoder = SHIFTREG_ENC_2_ReadData() & 0x3FFFF;
 792   1      
 793   1          if (check_enc_data(&data_encoder)) {
 794   2              
 795   2              value_encoder = (int16) -(32768 - ((data_encoder & 0x3FFC0) >> 2) + g_mem.m_off[index]);
 796   2              
 797   2              // Encoder positioned in the front of the motor
 798   2              value_encoder = -value_encoder;
 799   2      
 800   2              // Initialize last_value_encoder
 801   2              if (only_first_time) {
 802   3                  last_value_encoder[index] = value_encoder;
 803   3                  
 804   3                  if (index == (NUM_OF_SENSORS - 1))
 805   3                      only_first_time = 0;
 806   3              }
 807   2      
 808   2              // Take care of rotations
 809   2              aux = value_encoder - last_value_encoder[index];
 810   2      
 811   2              // ====================== 1 TURN ======================
 812   2              // -32768                    0                    32767 -32768                   0                
             -     32767
 813   2              // |-------------------------|-------------------------|-------------------------|----------------
             ----------|
 814   2              //              |                         |      |           |      |                         |
 815   2              //           -16384                     16383    |           |   -16384                     16383
 816   2              //                                               |           |
 817   2              //                                           24575           -24576
 818   2              //                                               |___________|
 819   2              //                                                   49152
 820   2      
 821   2              // if we are in the right interval, take care of rotation
 822   2              // and update the variable only if the difference between
 823   2              // one measure and another is less than 1/4 of turn
 824   2      
 825   2              // Considering we are sampling at 1kHz, this means that our shaft needs
 826   2              // to go slower than 1/4 turn every ms -> 1 turn every 4ms
 827   2              // equal to 250 turn/s -> 15000 RPM
 828   2      
 829   2              if (aux > 49152)
 830   2                  g_meas.rot[index]--;
 831   2              else{ 
 832   3                  if (aux < -49152)
 833   3                      g_meas.rot[index]++;
 834   3                  else{
 835   4                      if (abs(aux) > 16384) { // if two measure are too far
 836   5                          error[index]++;
 837   5                          if (error[index] < 10)
 838   5                              // Discard
 839   5                              return;
 840   5                      }
 841   4                  }
 842   3              }
 843   2              
 844   2              error[index] = 0;
 845   2              
 846   2              last_value_encoder[index] = value_encoder;
 847   2      
 848   2              value_encoder += (int32)g_meas.rot[index] << 16;
 849   2      
 850   2              if (c_mem.m_mult[index] != 1.0)
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 15  

 851   2                  value_encoder *= c_mem.m_mult[index];
 852   2            
 853   2              g_meas.pos[index] = value_encoder;
 854   2          }
 855   1      
 856   1          // // velocity calculation
 857   1          // switch(i) {
 858   1          //     case 0: {
 859   1          //         g_meas.vel[i] = (int16)filter_vel_1((3*value_encoder + l_value[i] - ll_value[i] - 3*lll_val
             -ue[i]) / 10);
 860   1          //         break;
 861   1          //     }
 862   1          //     case 1: {
 863   1          //         g_meas.vel[i] = (int16)filter_vel_2((3*value_encoder + l_value[i] - ll_value[i] - 3*lll_val
             -ue[i]) / 10);
 864   1          //         break;
 865   1          //     }
 866   1          //     case 2: {
 867   1          //         g_meas.vel[i] = (int16)filter_vel_3((3*value_encoder + l_value[i] - ll_value[i] - 3*lll_val
             -ue[i]) / 10);
 868   1          //         break;
 869   1          //     }
 870   1          // }
 871   1      
 872   1          // // update old values
 873   1          // lll_value[i] = ll_value[i];
 874   1          // ll_value[i] = l_value[i];
 875   1          // l_value[i] = value_encoder;
 876   1      }
*** WARNING C280 IN LINE 757 OF .\interruptions.c: 'flag': unreferenced local variable
 877          
 878          
 879          //==============================================================================
 880          //                                                          CALIBRATION FUNCTION
 881          //==============================================================================
 882          
 883          void calibration()
 884          {
 885   1          static int32 old_k_p;
 886   1          static int32 old_k_i;
 887   1          static int32 old_k_d;
 888   1      
 889   1          static uint8 pause_counter = 0;
 890   1      
 891   1          switch(calibration_flag) {
 892   2              case START:
 893   2                  ISR_RS485_RX_Disable();
 894   2      
 895   2                  // save old PID values
 896   2                  old_k_p = c_mem.k_p;
 897   2                  old_k_i = c_mem.k_i;
 898   2                  old_k_d = c_mem.k_d;
 899   2      
 900   2                  // goto to zero position
 901   2                  g_refNew.pos[0] = 0;
 902   2                  g_refNew.pos[1] = 0;
 903   2      
 904   2                  // Activate motors
 905   2                  if (!(g_refNew.onoff & 0x03)) {
 906   3                      MOTOR_ON_OFF_Write(0x03);
 907   3                  }
 908   2      
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 16  

 909   2                  // wait for motors to reach zero position
 910   2                  calibration_flag = PAUSE_1;
 911   2                  break;
 912   2      
 913   2              case PAUSE_1:
 914   2                  pause_counter++;
 915   2      
 916   2                  if (pause_counter == 10) {
 917   3                      pause_counter = 0;
 918   3      
 919   3                      // set new temp values for PID parameters
 920   3                      c_mem.k_p = 0.1 * 65536;
 921   3                      c_mem.k_i = 0;
 922   3                      c_mem.k_d = 0.3 * 65536;
 923   3      
 924   3                      calibration_flag = CONTINUE_1;
 925   3                  }
 926   2                  break;
 927   2      
 928   2              case CONTINUE_1:
 929   2                  // increment of 0.5 degree
 930   2                  g_refNew.pos[0] += 65536 / 720;
 931   2                  g_refNew.pos[1] -= 65536 / 720;
 932   2      
 933   2                  // check if one of the motors reach the threashold
 934   2                  if ((g_meas.curr[0] > CALIB_CURRENT) || (g_meas.curr[1] > CALIB_CURRENT)) {
 935   3                      // save current value as MAX_STIFFNESS
 936   3                      g_mem.max_stiffness = g_ref.pos[0];
 937   3      
 938   3                      // reset old values for PID parameters
 939   3                      c_mem.k_p = old_k_p;
 940   3                      c_mem.k_i = old_k_i;
 941   3                      c_mem.k_d = old_k_d;
 942   3      
 943   3                      // go back to zero position
 944   3                      g_refNew.pos[0] = 0;
 945   3                      g_refNew.pos[1] = 0;
 946   3      
 947   3                      // wait for motors to reach zero position
 948   3                      calibration_flag = PAUSE_2;
 949   3                  }
 950   2                  break;
 951   2      
 952   2              case PAUSE_2:
 953   2                  pause_counter++;
 954   2      
 955   2                  if (pause_counter == 10) {
 956   3                      pause_counter =0;
 957   3      
 958   3                      calibration_flag = CONTINUE_2;
 959   3                  }
 960   2                  break;
 961   2      
 962   2              case CONTINUE_2:
 963   2                  // Deactivate motors
 964   2                  if (!(g_refNew.onoff & 0x03)) {
 965   3                      MOTOR_ON_OFF_Write(0x00);
 966   3                  }
 967   2      
 968   2                  // store memory to save MAX_STIFFNESS as default value
 969   2                  memStore(DEFAULT_EEPROM_DISPLACEMENT);
 970   2                  memStore(0);
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 17  

 971   2      
 972   2                  calibration_flag = STOP;
 973   2      
 974   2                  ISR_RS485_RX_Enable();
 975   2                  break;
 976   2      
 977   2              case STOP:
 978   2              default:
 979   2                  break;
 980   2          }
 981   1      }
 982          
 983          
 984          //==============================================================================
 985          //                                                              PWM_LIMIT_SEARCH
 986          //==============================================================================
 987          
 988          void pwm_limit_search() {
 989   1          
 990   1          uint8  CYDATA index;
 991   1          uint16 CYDATA max_tension = 25500;
 992   1          uint16 CYDATA max_tension_6v_mod = 14750;
 993   1      
 994   1          if(g_mem.power_tension < 8000) {
 995   2              //Mod. 6 Volts
 996   2              if(dev_tension > max_tension_6v_mod)
 997   2                  dev_pwm_limit = 0;
 998   2      
 999   2              else {
1000   3                  if(dev_tension < g_mem.power_tension)
1001   3                      dev_pwm_limit = 100;
1002   3                  else {
1003   4                      index = (uint8)((dev_tension - g_mem.power_tension) >> 9);
1004   4                      dev_pwm_limit = hitech_pwm_preload_values_6v[index];
1005   4                  }
1006   3              }
1007   2          }
1008   1          else {
1009   2              // 8 - 12 volts
1010   2              if (dev_tension > max_tension)    // Max value 
1011   2                  dev_pwm_limit = 0;
1012   2              else{ 
1013   3                  if (dev_tension < g_mem.power_tension) // Min value
1014   3                      dev_pwm_limit = 100;
1015   3                  else {                  
1016   4                      index = (uint8)((dev_tension - 8000) >> 9);
1017   4                      if(g_mem.power_tension < 11500)
1018   4                          dev_pwm_limit = hitech_pwm_preload_values[index];
1019   4                      else
1020   4                          dev_pwm_limit = pwm_preload_values[index];
1021   4                  }
1022   3              }
1023   2          }
1024   1      }
1025          
1026          //==============================================================================
1027          //                                                                     SET SERVO
1028          //==============================================================================
1029          
1030          void set_servo(int16 duty){
1031   1          
1032   1          // Duty cycle values check
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 18  

1033   1          if(duty < 85){
1034   2                  duty = 85;
1035   2           }
1036   1          if(duty > 140){
1037   2                  duty = 140;
1038   2           }
1039   1                       
1040   1           // PWM write
1041   1           PWM_1_WriteCompare(duty);
1042   1      }
1043          
1044          //==============================================================================
1045          //                                                                     GET SERVO
1046          //==============================================================================
1047          
1048          void get_servo(){
1049   1              
1050   1          // Get servo indentation given position in degrees
1051   1          static uint16 duty;
1052   1          
1053   1          duty = PWM_1_ReadCompare();
1054   1          
1055   1          if(duty < 85){
1056   2                  duty = 85;
1057   2           }
1058   1          if(duty > 140){
1059   2                  duty = 140;
1060   2           }
1061   1          
1062   1          g_meas.servo = duty;
1063   1      }
1064          
1065          
1066          /* [] END OF FILE */
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 19  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION ISR_WATCHDOG_Handler (BEGIN)
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 135
0000 D200        E     SETB    watchdog_flag
                                           ; SOURCE LINE # 137
0002 32                RETI    
             ; FUNCTION ISR_WATCHDOG_Handler (END)

             ; FUNCTION ISR_RS485_RX_ExInterrupt (BEGIN)
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 147
0000 D200        E     SETB    interrupt_flag
                                           ; SOURCE LINE # 149
0002 32                RETI    
             ; FUNCTION ISR_RS485_RX_ExInterrupt (END)

             ; FUNCTION interrupt_manager (BEGIN)
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 182
0000 E4                CLR     A
0001 F500        R     MOV     package_count,A
0003         ?C0003:
                                           ; SOURCE LINE # 188
0003 120000      E     LCALL   UART_RS485_GetRxBufferSize
0006 EF                MOV     A,R7
0007 7003              JNZ     $ + 5H
0009 020000      R     LJMP    ?C0026
000C E500        R     MOV     A,package_count
000E C3                CLR     C
000F 9406              SUBB    A,#06H
0011 4003              JC      $ + 5H
0013 020000      R     LJMP    ?C0026
                                           ; SOURCE LINE # 192
0016 120000      E     LCALL   UART_RS485_GetChar
0019 8F00        R     MOV     rx_data,R7
                                           ; SOURCE LINE # 194
001B E500        R     MOV     A,state
001D 14                DEC     A
001E 6049              JZ      ?C0010
0020 14                DEC     A
0021 6060              JZ      ?C0014
0023 14                DEC     A
0024 7003              JNZ     $ + 5H
0026 020000      R     LJMP    ?C0021
0029 14                DEC     A
002A 7003              JNZ     $ + 5H
002C 020000      R     LJMP    ?C0024
002F 2404              ADD     A,#04H
0031 70D0              JNZ     ?C0003
                                           ; SOURCE LINE # 196
0033         ?C0006:
                                           ; SOURCE LINE # 198
0033 850000      R     MOV     rx_queue,rx_queue+01H
                                           ; SOURCE LINE # 199
0036 850000      R     MOV     rx_queue+01H,rx_queue+02H
                                           ; SOURCE LINE # 200
0039 850000      R     MOV     rx_queue+02H,rx_data
                                           ; SOURCE LINE # 203
003C E500        R     MOV     A,rx_queue+01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 20  

003E B43A11            CJNE    A,#03AH,?C0007
0041 E500        R     MOV     A,rx_queue+02H
0043 B43A0C            CJNE    A,#03AH,?C0007
                                           ; SOURCE LINE # 204
0046 E4                CLR     A
0047 F500        R     MOV     rx_queue,A
                                           ; SOURCE LINE # 205
0049 F500        R     MOV     rx_queue+01H,A
                                           ; SOURCE LINE # 206
004B F500        R     MOV     rx_queue+02H,A
                                           ; SOURCE LINE # 207
004D 750001      R     MOV     state,#01H
                                           ; SOURCE LINE # 208
0050 80B1              SJMP    ?C0003
0052         ?C0007:
                                           ; SOURCE LINE # 209
0052 E500        R     MOV     A,rx_queue
0054 B43FAC            CJNE    A,#03FH,?C0003
0057 E500        R     MOV     A,rx_queue+01H
0059 B40DA7            CJNE    A,#0DH,?C0003
005C E500        R     MOV     A,rx_queue+02H
005E 640A              XRL     A,#0AH
0060 70A1              JNZ     ?C0003
                                           ; SOURCE LINE # 212
0062 FF                MOV     R7,A
0063 FE                MOV     R6,A
0064 120000      E     LCALL   _infoGet
                                           ; SOURCE LINE # 213
0067 809A              SJMP    ?C0003
                                           ; SOURCE LINE # 216
0069         ?C0010:
                                           ; SOURCE LINE # 219
0069 900000      E     MOV     DPTR,#c_mem+01H
006C E0                MOVX    A,@DPTR
006D 6500        R     XRL     A,rx_data
006F 6004              JZ      ?C0012
0071 E500        R     MOV     A,rx_data
0073 7004              JNZ     ?C0011
0075         ?C0012:
                                           ; SOURCE LINE # 220
0075 C200        R     CLR     rx_data_type
0077 8002              SJMP    ?C0013
0079         ?C0011:
                                           ; SOURCE LINE # 222
0079 D200        R     SETB    rx_data_type
007B         ?C0013:
                                           ; SOURCE LINE # 224
007B E4                CLR     A
007C F500        R     MOV     data_packet_length,A
                                           ; SOURCE LINE # 225
007E 750002      R     MOV     state,#02H
                                           ; SOURCE LINE # 226
0081 8080              SJMP    ?C0003
                                           ; SOURCE LINE # 229
0083         ?C0014:
                                           ; SOURCE LINE # 232
0083 850000      R     MOV     data_packet_length,rx_data
                                           ; SOURCE LINE # 234
0086 E500        R     MOV     A,data_packet_length
0088 D3                SETB    C
0089 9401              SUBB    A,#01H
008B 5008              JNC     ?C0015
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 21  

                                           ; SOURCE LINE # 235
008D E4                CLR     A
008E F500        R     MOV     data_packet_length,A
                                           ; SOURCE LINE # 236
0090 F500        R     MOV     state,A
                                           ; SOURCE LINE # 237
0092 020000      R     LJMP    ?C0003
0095         ?C0015:
0095 E500        R     MOV     A,data_packet_length
0097 D3                SETB    C
0098 9480              SUBB    A,#080H
009A 4008              JC      ?C0017
                                           ; SOURCE LINE # 238
009C E4                CLR     A
009D F500        R     MOV     data_packet_length,A
                                           ; SOURCE LINE # 239
009F F500        R     MOV     state,A
                                           ; SOURCE LINE # 240
00A1 020000      R     LJMP    ?C0003
00A4         ?C0017:
                                           ; SOURCE LINE # 241
00A4 E4                CLR     A
00A5 F500        R     MOV     data_packet_index,A
                                           ; SOURCE LINE # 243
00A7 200006            JB      rx_data_type,?C0019
                                           ; SOURCE LINE # 244
00AA 750003      R     MOV     state,#03H
00AD 020000      R     LJMP    ?C0003
00B0         ?C0019:
                                           ; SOURCE LINE # 246
00B0 750004      R     MOV     state,#04H
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
00B3 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 251
00B6         ?C0021:
                                           ; SOURCE LINE # 253
00B6 7400        R     MOV     A,#LOW data_packet_buffer
00B8 2500        R     ADD     A,data_packet_index
00BA F582              MOV     DPL,A
00BC E4                CLR     A
00BD 3400        R     ADDC    A,#HIGH data_packet_buffer
00BF F583              MOV     DPH,A
00C1 E500        R     MOV     A,rx_data
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 254
00C4 0500        R     INC     data_packet_index
                                           ; SOURCE LINE # 257
00C6 E500        R     MOV     A,data_packet_index
00C8 C3                CLR     C
00C9 9500        R     SUBB    A,data_packet_length
00CB 5003              JNC     $ + 5H
00CD 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 259
00D0 200025            JB      rx_data_type,?C0023
                                           ; SOURCE LINE # 261
00D3 AF00        R     MOV     R7,data_packet_length
00D5 7E00              MOV     R6,#00H
00D7 7800        E     MOV     R0,#LOW g_rx
00D9 7C00        E     MOV     R4,#HIGH g_rx
00DB 7D01              MOV     R5,#01H
00DD 7B01              MOV     R3,#01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 22  

00DF 7A00        R     MOV     R2,#HIGH data_packet_buffer
00E1 7900        R     MOV     R1,#LOW data_packet_buffer
00E3 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 262
00E6 900000      E     MOV     DPTR,#g_rx+080H
00E9 E4                CLR     A
00EA F0                MOVX    @DPTR,A
00EB A3                INC     DPTR
00EC E500        R     MOV     A,data_packet_length
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 263
00EF 900000      E     MOV     DPTR,#g_rx+084H
00F2 7401              MOV     A,#01H
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 264
00F5 120000      E     LCALL   commProcess
                                           ; SOURCE LINE # 265
00F8         ?C0023:
                                           ; SOURCE LINE # 267
00F8 E4                CLR     A
00F9 F500        R     MOV     data_packet_index,A
                                           ; SOURCE LINE # 268
00FB F500        R     MOV     data_packet_length,A
                                           ; SOURCE LINE # 269
00FD F500        R     MOV     state,A
                                           ; SOURCE LINE # 270
00FF 0500        R     INC     package_count
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
0101 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 276
0104         ?C0024:
                                           ; SOURCE LINE # 277
0104 1500        R     DEC     data_packet_length
0106 E500        R     MOV     A,data_packet_length
0108 6003              JZ      $ + 5H
010A 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 278
010D F500        R     MOV     data_packet_index,A
                                           ; SOURCE LINE # 279
010F F500        R     MOV     data_packet_length,A
                                           ; SOURCE LINE # 280
0111 7F01              MOV     R7,#01H
0113 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 281
0116 E4                CLR     A
0117 FF                MOV     R7,A
0118 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 282
011B E4                CLR     A
011C F500        R     MOV     state,A
                                           ; SOURCE LINE # 283
011E 0500        R     INC     package_count
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
0120 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
0123 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 288
0126         ?C0026:
0126 22                RET     
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 23  

             ; FUNCTION interrupt_manager (END)

             ; FUNCTION function_scheduler (BEGIN)
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 304
0000 120000      E     LCALL   MY_TIMER_ReadCounter
0003 900000      E     MOV     DPTR,#timer_value0
0006 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 308
0009 7F01              MOV     R7,#01H
000B 120000      E     LCALL   _ADC_SOC_Write
                                           ; SOURCE LINE # 312
000E 300005            JNB     interrupt_flag,?C0027
                                           ; SOURCE LINE # 313
0011 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 314
0013 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 315
0016         ?C0027:
                                           ; SOURCE LINE # 319
0016 E4                CLR     A
0017 FD                MOV     R5,A
0018 FF                MOV     R7,A
0019 120000      R     LCALL   _encoder_reading
                                           ; SOURCE LINE # 323
001C 300005            JNB     interrupt_flag,?C0028
                                           ; SOURCE LINE # 324
001F C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 325
0021 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 326
0024         ?C0028:
                                           ; SOURCE LINE # 328
0024 E4                CLR     A
0025 FD                MOV     R5,A
0026 7F01              MOV     R7,#01H
0028 120000      R     LCALL   _encoder_reading
                                           ; SOURCE LINE # 332
002B 300005            JNB     interrupt_flag,?C0029
                                           ; SOURCE LINE # 333
002E C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 334
0030 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 335
0033         ?C0029:
                                           ; SOURCE LINE # 339
0033 E4                CLR     A
0034 FF                MOV     R7,A
0035 120000      R     LCALL   _motor_control
                                           ; SOURCE LINE # 343
0038 300005            JNB     interrupt_flag,?C0030
                                           ; SOURCE LINE # 344
003B C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 345
003D 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 346
0040         ?C0030:
                                           ; SOURCE LINE # 348
0040 7F01              MOV     R7,#01H
0042 120000      R     LCALL   _motor_control
                                           ; SOURCE LINE # 352
0045 300005            JNB     interrupt_flag,?C0031
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 24  

                                           ; SOURCE LINE # 353
0048 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 354
004A 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 355
004D         ?C0031:
                                           ; SOURCE LINE # 359
004D 120000      R     LCALL   analog_read_end
                                           ; SOURCE LINE # 364
0050 900000      E     MOV     DPTR,#calibration_flag
0053 E0                MOVX    A,@DPTR
0054 7003              JNZ     ?C0033
0056 D3                SETB    C
0057 8001              SJMP    ?C0034
0059         ?C0033:
0059 C3                CLR     C
005A         ?C0034:
005A 4024              JC      ?C0032
                                           ; SOURCE LINE # 365
005C 900000      R     MOV     DPTR,#counter_calibration
005F E0                MOVX    A,@DPTR
0060 7004              JNZ     ?C0155
0062 A3                INC     DPTR
0063 E0                MOVX    A,@DPTR
0064 6464              XRL     A,#064H
0066         ?C0155:
0066 700A              JNZ     ?C0035
                                           ; SOURCE LINE # 366
0068 120000      R     LCALL   calibration
                                           ; SOURCE LINE # 367
006B E4                CLR     A
006C 900000      R     MOV     DPTR,#counter_calibration
006F F0                MOVX    @DPTR,A
0070 A3                INC     DPTR
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 368
0072         ?C0035:
                                           ; SOURCE LINE # 369
0072 900000      R     MOV     DPTR,#counter_calibration+01H
0075 E0                MOVX    A,@DPTR
0076 04                INC     A
0077 F0                MOVX    @DPTR,A
0078 7006              JNZ     ?C0156
007A 900000      R     MOV     DPTR,#counter_calibration
007D E0                MOVX    A,@DPTR
007E 04                INC     A
007F F0                MOVX    @DPTR,A
0080         ?C0156:
                                           ; SOURCE LINE # 370
0080         ?C0032:
                                           ; SOURCE LINE # 373
0080 300005            JNB     interrupt_flag,?C0036
                                           ; SOURCE LINE # 374
0083 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 375
0085 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 376
0088         ?C0036:
                                           ; SOURCE LINE # 381
0088 7800        E     MOV     R0,#LOW g_measOld
008A 7C00        E     MOV     R4,#HIGH g_measOld
008C 7D01              MOV     R5,#01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 25  

008E 7B01              MOV     R3,#01H
0090 7A00        E     MOV     R2,#HIGH g_meas
0092 7900        E     MOV     R1,#LOW g_meas
0094 7E00              MOV     R6,#00H
0096 7F20              MOV     R7,#020H
0098 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 382
009B 7800        E     MOV     R0,#LOW g_refOld
009D 7C00        E     MOV     R4,#HIGH g_refOld
009F 7D01              MOV     R5,#01H
00A1 7B01              MOV     R3,#01H
00A3 7A00        E     MOV     R2,#HIGH g_ref
00A5 7900        E     MOV     R1,#LOW g_ref
00A7 7E00              MOV     R6,#00H
00A9 7F09              MOV     R7,#09H
00AB 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 385
00AE 7800        E     MOV     R0,#LOW g_ref
00B0 7C00        E     MOV     R4,#HIGH g_ref
00B2 7D01              MOV     R5,#01H
00B4 7B01              MOV     R3,#01H
00B6 7A00        E     MOV     R2,#HIGH g_refNew
00B8 7900        E     MOV     R1,#LOW g_refNew
00BA 7E00              MOV     R6,#00H
00BC 7F09              MOV     R7,#09H
00BE 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 387
00C1 300005            JNB     interrupt_flag,?C0037
                                           ; SOURCE LINE # 388
00C4 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 389
00C6 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 390
00C9         ?C0037:
                                           ; SOURCE LINE # 394
00C9 120000      E     LCALL   MY_TIMER_ReadCounter
00CC 900000      E     MOV     DPTR,#timer_value
00CF 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 395
00D2 7F40              MOV     R7,#040H
00D4 7E4B              MOV     R6,#04BH
00D6 7D4C              MOV     R5,#04CH
00D8 7C00              MOV     R4,#00H
00DA 120000      E     LCALL   _MY_TIMER_WriteCounter
                                           ; SOURCE LINE # 397
00DD 22                RET     
             ; FUNCTION function_scheduler (END)

             ; FUNCTION _motor_control (BEGIN)
                                           ; SOURCE LINE # 404
;---- Variable 'idx' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 406
0000 8F00        R     MOV     index,R7
                                           ; SOURCE LINE # 408
0002 E4                CLR     A
0003 F500        R     MOV     pwm_input+03H,A
0005 F500        R     MOV     pwm_input+02H,A
0007 F500        R     MOV     pwm_input+01H,A
0009 F500        R     MOV     pwm_input,A
                                           ; SOURCE LINE # 413
000B 900000      E     MOV     DPTR,#c_mem+02H
000E E0                MOVX    A,@DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 26  

000F FC                MOV     R4,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FD                MOV     R5,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FE                MOV     R6,A
0016 A3                INC     DPTR
0017 E0                MOVX    A,@DPTR
0018 F500        R     MOV     k_p+03H,A
001A 8E00        R     MOV     k_p+02H,R6
001C 8D00        R     MOV     k_p+01H,R5
001E 8C00        R     MOV     k_p,R4
                                           ; SOURCE LINE # 414
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 FC                MOV     R4,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FD                MOV     R5,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 FE                MOV     R6,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B F500        R     MOV     k_i+03H,A
002D 8E00        R     MOV     k_i+02H,R6
002F 8D00        R     MOV     k_i+01H,R5
0031 8C00        R     MOV     k_i,R4
                                           ; SOURCE LINE # 415
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 FC                MOV     R4,A
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 FD                MOV     R5,A
0039 A3                INC     DPTR
003A E0                MOVX    A,@DPTR
003B FE                MOV     R6,A
003C A3                INC     DPTR
003D E0                MOVX    A,@DPTR
003E F500        R     MOV     k_d+03H,A
0040 8E00        R     MOV     k_d+02H,R6
0042 8D00        R     MOV     k_d+01H,R5
0044 8C00        R     MOV     k_d,R4
                                           ; SOURCE LINE # 424
0046 E500        R     MOV     A,index
0048 C3                CLR     C
0049 9402              SUBB    A,#02H
004B 4003              JC      $ + 5H
004D 020000      R     LJMP    ?C0040
0050         ?C0039:
                                           ; SOURCE LINE # 427
0050 E500        R     MOV     A,index
0052 25E0              ADD     A,ACC
0054 25E0              ADD     A,ACC
0056 2400        E     ADD     A,#LOW g_meas
0058 F582              MOV     DPL,A
005A E4                CLR     A
005B 3400        E     ADDC    A,#HIGH g_meas
005D F583              MOV     DPH,A
005F E0                MOVX    A,@DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 27  

0060 F8                MOV     R0,A
0061 A3                INC     DPTR
0062 E0                MOVX    A,@DPTR
0063 F9                MOV     R1,A
0064 A3                INC     DPTR
0065 E0                MOVX    A,@DPTR
0066 FA                MOV     R2,A
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 FB                MOV     R3,A
006A E500        R     MOV     A,index
006C 25E0              ADD     A,ACC
006E 25E0              ADD     A,ACC
0070 2400        E     ADD     A,#LOW g_ref
0072 F582              MOV     DPL,A
0074 E4                CLR     A
0075 3400        E     ADDC    A,#HIGH g_ref
0077 F583              MOV     DPH,A
0079 E0                MOVX    A,@DPTR
007A FC                MOV     R4,A
007B A3                INC     DPTR
007C E0                MOVX    A,@DPTR
007D FD                MOV     R5,A
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080 FE                MOV     R6,A
0081 A3                INC     DPTR
0082 E0                MOVX    A,@DPTR
0083 C3                CLR     C
0084 9B                SUBB    A,R3
0085 F500        R     MOV     pos_error+03H,A
0087 EE                MOV     A,R6
0088 9A                SUBB    A,R2
0089 F500        R     MOV     pos_error+02H,A
008B ED                MOV     A,R5
008C 99                SUBB    A,R1
008D F500        R     MOV     pos_error+01H,A
008F EC                MOV     A,R4
0090 98                SUBB    A,R0
0091 F500        R     MOV     pos_error,A
                                           ; SOURCE LINE # 429
0093 300005            JNB     interrupt_flag,?C0041
                                           ; SOURCE LINE # 430
0096 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 431
0098 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 432
009B         ?C0041:
                                           ; SOURCE LINE # 435
009B E500        R     MOV     A,index
009D 25E0              ADD     A,ACC
009F 25E0              ADD     A,ACC
00A1 2400        R     ADD     A,#LOW pos_error_sum
00A3 F582              MOV     DPL,A
00A5 E4                CLR     A
00A6 3400        R     ADDC    A,#HIGH pos_error_sum
00A8 F583              MOV     DPH,A
00AA C083              PUSH    DPH
00AC C082              PUSH    DPL
00AE E0                MOVX    A,@DPTR
00AF FC                MOV     R4,A
00B0 A3                INC     DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 28  

00B1 E0                MOVX    A,@DPTR
00B2 FD                MOV     R5,A
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 FE                MOV     R6,A
00B6 A3                INC     DPTR
00B7 E0                MOVX    A,@DPTR
00B8 2500        R     ADD     A,pos_error+03H
00BA FF                MOV     R7,A
00BB EE                MOV     A,R6
00BC 3500        R     ADDC    A,pos_error+02H
00BE FE                MOV     R6,A
00BF ED                MOV     A,R5
00C0 3500        R     ADDC    A,pos_error+01H
00C2 FD                MOV     R5,A
00C3 EC                MOV     A,R4
00C4 3500        R     ADDC    A,pos_error
00C6 FC                MOV     R4,A
00C7 D082              POP     DPL
00C9 D083              POP     DPH
00CB 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 438
00CE E500        R     MOV     A,index
00D0 25E0              ADD     A,ACC
00D2 25E0              ADD     A,ACC
00D4 2400        R     ADD     A,#LOW pos_error_sum
00D6 F582              MOV     DPL,A
00D8 E4                CLR     A
00D9 3400        R     ADDC    A,#HIGH pos_error_sum
00DB F583              MOV     DPH,A
00DD E0                MOVX    A,@DPTR
00DE FC                MOV     R4,A
00DF A3                INC     DPTR
00E0 E0                MOVX    A,@DPTR
00E1 FD                MOV     R5,A
00E2 A3                INC     DPTR
00E3 E0                MOVX    A,@DPTR
00E4 FE                MOV     R6,A
00E5 A3                INC     DPTR
00E6 E0                MOVX    A,@DPTR
00E7 FF                MOV     R7,A
00E8 7BA0              MOV     R3,#0A0H
00EA 7A86              MOV     R2,#086H
00EC 7901              MOV     R1,#01H
00EE 7800              MOV     R0,#00H
00F0 C3                CLR     C
00F1 120000      E     LCALL   ?C?SLCMP
00F4 501C              JNC     ?C0042
                                           ; SOURCE LINE # 439
00F6 7FA0              MOV     R7,#0A0H
00F8 7E86              MOV     R6,#086H
00FA 7D01              MOV     R5,#01H
00FC 7C00              MOV     R4,#00H
00FE E500        R     MOV     A,index
0100 25E0              ADD     A,ACC
0102 25E0              ADD     A,ACC
0104 2400        R     ADD     A,#LOW pos_error_sum
0106 F582              MOV     DPL,A
0108 E4                CLR     A
0109 3400        R     ADDC    A,#HIGH pos_error_sum
010B F583              MOV     DPH,A
010D 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 29  

0110 8042              SJMP    ?C0043
0112         ?C0042:
                                           ; SOURCE LINE # 440
                                           ; SOURCE LINE # 441
0112 E500        R     MOV     A,index
0114 25E0              ADD     A,ACC
0116 25E0              ADD     A,ACC
0118 2400        R     ADD     A,#LOW pos_error_sum
011A F582              MOV     DPL,A
011C E4                CLR     A
011D 3400        R     ADDC    A,#HIGH pos_error_sum
011F F583              MOV     DPH,A
0121 E0                MOVX    A,@DPTR
0122 FC                MOV     R4,A
0123 A3                INC     DPTR
0124 E0                MOVX    A,@DPTR
0125 FD                MOV     R5,A
0126 A3                INC     DPTR
0127 E0                MOVX    A,@DPTR
0128 FE                MOV     R6,A
0129 A3                INC     DPTR
012A E0                MOVX    A,@DPTR
012B FF                MOV     R7,A
012C 7B60              MOV     R3,#060H
012E 7A79              MOV     R2,#079H
0130 79FE              MOV     R1,#0FEH
0132 78FF              MOV     R0,#0FFH
0134 D3                SETB    C
0135 120000      E     LCALL   ?C?SLCMP
0138 401A              JC      ?C0043
                                           ; SOURCE LINE # 442
013A 7F60              MOV     R7,#060H
013C 7E79              MOV     R6,#079H
013E 7DFE              MOV     R5,#0FEH
0140 7CFF              MOV     R4,#0FFH
0142 E500        R     MOV     A,index
0144 25E0              ADD     A,ACC
0146 25E0              ADD     A,ACC
0148 2400        R     ADD     A,#LOW pos_error_sum
014A F582              MOV     DPL,A
014C E4                CLR     A
014D 3400        R     ADDC    A,#HIGH pos_error_sum
014F F583              MOV     DPH,A
0151 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 443
0154         ?C0043:
                                           ; SOURCE LINE # 445
0154 300005            JNB     interrupt_flag,?C0045
                                           ; SOURCE LINE # 446
0157 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 447
0159 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 448
015C         ?C0045:
                                           ; SOURCE LINE # 450
015C E4                CLR     A
015D F500        R     MOV     pwm_input+03H,A
015F F500        R     MOV     pwm_input+02H,A
0161 F500        R     MOV     pwm_input+01H,A
0163 F500        R     MOV     pwm_input,A
                                           ; SOURCE LINE # 452
0165 FF                MOV     R7,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 30  

0166 FE                MOV     R6,A
0167 FD                MOV     R5,A
0168 FC                MOV     R4,A
0169 AB00        R     MOV     R3,k_p+03H
016B AA00        R     MOV     R2,k_p+02H
016D A900        R     MOV     R1,k_p+01H
016F A800        R     MOV     R0,k_p
0171 C3                CLR     C
0172 120000      E     LCALL   ?C?SLCMP
0175 606A              JZ      ?C0046
                                           ; SOURCE LINE # 454
0177 E4                CLR     A
0178 FF                MOV     R7,A
0179 FE                MOV     R6,A
017A 7D02              MOV     R5,#02H
017C FC                MOV     R4,A
017D AB00        R     MOV     R3,pos_error+03H
017F AA00        R     MOV     R2,pos_error+02H
0181 A900        R     MOV     R1,pos_error+01H
0183 A800        R     MOV     R0,pos_error
0185 D3                SETB    C
0186 120000      E     LCALL   ?C?SLCMP
0189 500F              JNC     ?C0048
018B E4                CLR     A
018C FF                MOV     R7,A
018D FE                MOV     R6,A
018E 7DFE              MOV     R5,#0FEH
0190 7CFF              MOV     R4,#0FFH
0192 A800        R     MOV     R0,pos_error
0194 C3                CLR     C
0195 120000      E     LCALL   ?C?SLCMP
0198 5027              JNC     ?C0047
019A         ?C0048:
                                           ; SOURCE LINE # 455
019A AF00        R     MOV     R7,pos_error+03H
019C AE00        R     MOV     R6,pos_error+02H
019E AD00        R     MOV     R5,pos_error+01H
01A0 AC00        R     MOV     R4,pos_error
01A2 7808              MOV     R0,#08H
01A4 120000      E     LCALL   ?C?SLSHR
01A7 AB00        R     MOV     R3,k_p+03H
01A9 AA00        R     MOV     R2,k_p+02H
01AB A900        R     MOV     R1,k_p+01H
01AD A800        R     MOV     R0,k_p
01AF 120000      E     LCALL   ?C?LMUL
01B2 7808              MOV     R0,#08H
01B4 120000      E     LCALL   ?C?SLSHR
01B7 8F00        R     MOV     pwm_input+03H,R7
01B9 8E00        R     MOV     pwm_input+02H,R6
01BB 8D00        R     MOV     pwm_input+01H,R5
01BD 8C00        R     MOV     pwm_input,R4
01BF 8020              SJMP    ?C0046
01C1         ?C0047:
                                           ; SOURCE LINE # 457
01C1 AF00        R     MOV     R7,pos_error+03H
01C3 AE00        R     MOV     R6,pos_error+02H
01C5 AD00        R     MOV     R5,pos_error+01H
01C7 AC00        R     MOV     R4,pos_error
01C9 AB00        R     MOV     R3,k_p+03H
01CB AA00        R     MOV     R2,k_p+02H
01CD A900        R     MOV     R1,k_p+01H
01CF A800        R     MOV     R0,k_p
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 31  

01D1 120000      E     LCALL   ?C?LMUL
01D4 7810              MOV     R0,#010H
01D6 120000      E     LCALL   ?C?SLSHR
01D9 8F00        R     MOV     pwm_input+03H,R7
01DB 8E00        R     MOV     pwm_input+02H,R6
01DD 8D00        R     MOV     pwm_input+01H,R5
01DF 8C00        R     MOV     pwm_input,R4
                                           ; SOURCE LINE # 458
01E1         ?C0046:
                                           ; SOURCE LINE # 460
01E1 300005            JNB     interrupt_flag,?C0050
                                           ; SOURCE LINE # 461
01E4 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 462
01E6 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 463
01E9         ?C0050:
                                           ; SOURCE LINE # 466
01E9 E4                CLR     A
01EA FF                MOV     R7,A
01EB FE                MOV     R6,A
01EC FD                MOV     R5,A
01ED FC                MOV     R4,A
01EE AB00        R     MOV     R3,k_i+03H
01F0 AA00        R     MOV     R2,k_i+02H
01F2 A900        R     MOV     R1,k_i+01H
01F4 A800        R     MOV     R0,k_i
01F6 C3                CLR     C
01F7 120000      E     LCALL   ?C?SLCMP
01FA 6043              JZ      ?C0051
                                           ; SOURCE LINE # 467
01FC AF00        R     MOV     R7,k_i+03H
01FE AE00        R     MOV     R6,k_i+02H
0200 AD00        R     MOV     R5,k_i+01H
0202 AC00        R     MOV     R4,k_i
0204 7806              MOV     R0,#06H
0206 120000      E     LCALL   ?C?SLSHR
0209 E500        R     MOV     A,index
020B 25E0              ADD     A,ACC
020D 25E0              ADD     A,ACC
020F 2400        R     ADD     A,#LOW pos_error_sum
0211 F582              MOV     DPL,A
0213 E4                CLR     A
0214 3400        R     ADDC    A,#HIGH pos_error_sum
0216 F583              MOV     DPH,A
0218 E0                MOVX    A,@DPTR
0219 F8                MOV     R0,A
021A A3                INC     DPTR
021B E0                MOVX    A,@DPTR
021C F9                MOV     R1,A
021D A3                INC     DPTR
021E E0                MOVX    A,@DPTR
021F FA                MOV     R2,A
0220 A3                INC     DPTR
0221 E0                MOVX    A,@DPTR
0222 FB                MOV     R3,A
0223 120000      E     LCALL   ?C?LMUL
0226 780A              MOV     R0,#0AH
0228 120000      E     LCALL   ?C?SLSHR
022B E500        R     MOV     A,pwm_input+03H
022D 2F                ADD     A,R7
022E F500        R     MOV     pwm_input+03H,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 32  

0230 E500        R     MOV     A,pwm_input+02H
0232 3E                ADDC    A,R6
0233 F500        R     MOV     pwm_input+02H,A
0235 E500        R     MOV     A,pwm_input+01H
0237 3D                ADDC    A,R5
0238 F500        R     MOV     pwm_input+01H,A
023A E500        R     MOV     A,pwm_input
023C 3C                ADDC    A,R4
023D F500        R     MOV     pwm_input,A
023F         ?C0051:
                                           ; SOURCE LINE # 470
023F E4                CLR     A
0240 FF                MOV     R7,A
0241 FE                MOV     R6,A
0242 FD                MOV     R5,A
0243 FC                MOV     R4,A
0244 AB00        R     MOV     R3,k_d+03H
0246 AA00        R     MOV     R2,k_d+02H
0248 A900        R     MOV     R1,k_d+01H
024A A800        R     MOV     R0,k_d
024C C3                CLR     C
024D 120000      E     LCALL   ?C?SLCMP
0250 6063              JZ      ?C0052
                                           ; SOURCE LINE # 471
0252 E500        R     MOV     A,index
0254 25E0              ADD     A,ACC
0256 25E0              ADD     A,ACC
0258 2400        E     ADD     A,#LOW g_meas
025A F582              MOV     DPL,A
025C E4                CLR     A
025D 3400        E     ADDC    A,#HIGH g_meas
025F F583              MOV     DPH,A
0261 E0                MOVX    A,@DPTR
0262 F8                MOV     R0,A
0263 A3                INC     DPTR
0264 E0                MOVX    A,@DPTR
0265 F9                MOV     R1,A
0266 A3                INC     DPTR
0267 E0                MOVX    A,@DPTR
0268 FA                MOV     R2,A
0269 A3                INC     DPTR
026A E0                MOVX    A,@DPTR
026B FB                MOV     R3,A
026C E500        R     MOV     A,index
026E 25E0              ADD     A,ACC
0270 25E0              ADD     A,ACC
0272 2400        E     ADD     A,#LOW g_measOld
0274 F582              MOV     DPL,A
0276 E4                CLR     A
0277 3400        E     ADDC    A,#HIGH g_measOld
0279 F583              MOV     DPH,A
027B E0                MOVX    A,@DPTR
027C FC                MOV     R4,A
027D A3                INC     DPTR
027E E0                MOVX    A,@DPTR
027F FD                MOV     R5,A
0280 A3                INC     DPTR
0281 E0                MOVX    A,@DPTR
0282 FE                MOV     R6,A
0283 A3                INC     DPTR
0284 E0                MOVX    A,@DPTR
0285 C3                CLR     C
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 33  

0286 9B                SUBB    A,R3
0287 FF                MOV     R7,A
0288 EE                MOV     A,R6
0289 9A                SUBB    A,R2
028A FE                MOV     R6,A
028B ED                MOV     A,R5
028C 99                SUBB    A,R1
028D FD                MOV     R5,A
028E EC                MOV     A,R4
028F 98                SUBB    A,R0
0290 FC                MOV     R4,A
0291 AB00        R     MOV     R3,k_d+03H
0293 AA00        R     MOV     R2,k_d+02H
0295 A900        R     MOV     R1,k_d+01H
0297 A800        R     MOV     R0,k_d
0299 120000      E     LCALL   ?C?LMUL
029C 7810              MOV     R0,#010H
029E 120000      E     LCALL   ?C?SLSHR
02A1 E500        R     MOV     A,pwm_input+03H
02A3 2F                ADD     A,R7
02A4 F500        R     MOV     pwm_input+03H,A
02A6 E500        R     MOV     A,pwm_input+02H
02A8 3E                ADDC    A,R6
02A9 F500        R     MOV     pwm_input+02H,A
02AB E500        R     MOV     A,pwm_input+01H
02AD 3D                ADDC    A,R5
02AE F500        R     MOV     pwm_input+01H,A
02B0 E500        R     MOV     A,pwm_input
02B2 3C                ADDC    A,R4
02B3 F500        R     MOV     pwm_input,A
02B5         ?C0052:
                                           ; SOURCE LINE # 474
02B5 300005            JNB     interrupt_flag,?C0053
                                           ; SOURCE LINE # 475
02B8 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 476
02BA 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 477
02BD         ?C0053:
                                           ; SOURCE LINE # 482
02BD E500        R     MOV     A,index
02BF 701A              JNZ     ?C0054
                                           ; SOURCE LINE # 483
02C1 FF                MOV     R7,A
02C2 FE                MOV     R6,A
02C3 FD                MOV     R5,A
02C4 FC                MOV     R4,A
02C5 AB00        R     MOV     R3,pwm_input+03H
02C7 AA00        R     MOV     R2,pwm_input+02H
02C9 A900        R     MOV     R1,pwm_input+01H
02CB A800        R     MOV     R0,pwm_input
02CD C3                CLR     C
02CE 120000      E     LCALL   ?C?SLCMP
02D1 4004              JC      ?C0055
                                           ; SOURCE LINE # 484
02D3 D200        R     SETB    dirM0
02D5 801D              SJMP    ?C0057
02D7         ?C0055:
                                           ; SOURCE LINE # 487
02D7 C200        R     CLR     dirM0
                                           ; SOURCE LINE # 489
02D9 8019              SJMP    ?C0057
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 34  

02DB         ?C0054:
                                           ; SOURCE LINE # 490
02DB E4                CLR     A
02DC FF                MOV     R7,A
02DD FE                MOV     R6,A
02DE FD                MOV     R5,A
02DF FC                MOV     R4,A
02E0 AB00        R     MOV     R3,pwm_input+03H
02E2 AA00        R     MOV     R2,pwm_input+02H
02E4 A900        R     MOV     R1,pwm_input+01H
02E6 A800        R     MOV     R0,pwm_input
02E8 C3                CLR     C
02E9 120000      E     LCALL   ?C?SLCMP
02EC 4004              JC      ?C0058
                                           ; SOURCE LINE # 491
02EE D200        R     SETB    dirM1
02F0 8002              SJMP    ?C0057
02F2         ?C0058:
                                           ; SOURCE LINE # 494
02F2 C200        R     CLR     dirM1
                                           ; SOURCE LINE # 496
02F4         ?C0057:
                                           ; SOURCE LINE # 498
02F4 300005            JNB     interrupt_flag,?C0060
                                           ; SOURCE LINE # 499
02F7 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 500
02F9 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 501
02FC         ?C0060:
                                           ; SOURCE LINE # 504
02FC E4                CLR     A
02FD 7F64              MOV     R7,#064H
02FF FE                MOV     R6,A
0300 FD                MOV     R5,A
0301 FC                MOV     R4,A
0302 AB00        R     MOV     R3,pwm_input+03H
0304 AA00        R     MOV     R2,pwm_input+02H
0306 A900        R     MOV     R1,pwm_input+01H
0308 A800        R     MOV     R0,pwm_input
030A D3                SETB    C
030B 120000      E     LCALL   ?C?SLCMP
030E 400A              JC      ?C0061
                                           ; SOURCE LINE # 505
0310 E4                CLR     A
0311 750064      R     MOV     pwm_input+03H,#064H
0314 F500        R     MOV     pwm_input+02H,A
0316 F500        R     MOV     pwm_input+01H,A
0318 F500        R     MOV     pwm_input,A
031A         ?C0061:
                                           ; SOURCE LINE # 506
031A 74FF              MOV     A,#0FFH
031C 7F9C              MOV     R7,#09CH
031E FE                MOV     R6,A
031F FD                MOV     R5,A
0320 FC                MOV     R4,A
0321 AB00        R     MOV     R3,pwm_input+03H
0323 AA00        R     MOV     R2,pwm_input+02H
0325 A900        R     MOV     R1,pwm_input+01H
0327 A800        R     MOV     R0,pwm_input
0329 C3                CLR     C
032A 120000      E     LCALL   ?C?SLCMP
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 35  

032D 500B              JNC     ?C0062
                                           ; SOURCE LINE # 507
032F 74FF              MOV     A,#0FFH
0331 75009C      R     MOV     pwm_input+03H,#09CH
0334 F500        R     MOV     pwm_input+02H,A
0336 F500        R     MOV     pwm_input+01H,A
0338 F500        R     MOV     pwm_input,A
033A         ?C0062:
                                           ; SOURCE LINE # 509
033A 300005            JNB     interrupt_flag,?C0063
                                           ; SOURCE LINE # 510
033D C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 511
033F 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 512
0342         ?C0063:
                                           ; SOURCE LINE # 515
0342 AF00        R     MOV     R7,pwm_input+03H
0344 AE00        R     MOV     R6,pwm_input+02H
0346 AD00        R     MOV     R5,pwm_input+01H
0348 AC00        R     MOV     R4,pwm_input
034A 780A              MOV     R0,#0AH
034C 120000      E     LCALL   ?C?LSHL
034F E4                CLR     A
0350 7B64              MOV     R3,#064H
0352 FA                MOV     R2,A
0353 F9                MOV     R1,A
0354 F8                MOV     R0,A
0355 120000      E     LCALL   ?C?SLDIV
0358 A804              MOV     R0,AR4
035A A905              MOV     R1,AR5
035C AA06              MOV     R2,AR6
035E AB07              MOV     R3,AR7
0360 900000      E     MOV     DPTR,#dev_pwm_limit
0363 E0                MOVX    A,@DPTR
0364 FF                MOV     R7,A
0365 E4                CLR     A
0366 FC                MOV     R4,A
0367 FD                MOV     R5,A
0368 FE                MOV     R6,A
0369 120000      E     LCALL   ?C?LMUL
036C 780A              MOV     R0,#0AH
036E 120000      E     LCALL   ?C?SLSHR
0371 8F00        R     MOV     pwm_input+03H,R7
0373 8E00        R     MOV     pwm_input+02H,R6
0375 8D00        R     MOV     pwm_input+01H,R5
0377 8C00        R     MOV     pwm_input,R4
                                           ; SOURCE LINE # 519
0379 300011            JNB     dirM0,?C0064
                                           ; SOURCE LINE # 520
037C 300007            JNB     dirM1,?C0065
                                           ; SOURCE LINE # 521
037F 7F03              MOV     R7,#03H
0381 120000      E     LCALL   _MOTOR_DIR_Write
0384 8016              SJMP    ?C0067
0386         ?C0065:
                                           ; SOURCE LINE # 523
0386 7F01              MOV     R7,#01H
0388 120000      E     LCALL   _MOTOR_DIR_Write
                                           ; SOURCE LINE # 524
038B 800F              SJMP    ?C0067
038D         ?C0064:
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 36  

                                           ; SOURCE LINE # 525
                                           ; SOURCE LINE # 526
038D 300007            JNB     dirM1,?C0068
                                           ; SOURCE LINE # 527
0390 7F02              MOV     R7,#02H
0392 120000      E     LCALL   _MOTOR_DIR_Write
0395 8005              SJMP    ?C0067
0397         ?C0068:
                                           ; SOURCE LINE # 529
0397 E4                CLR     A
0398 FF                MOV     R7,A
0399 120000      E     LCALL   _MOTOR_DIR_Write
                                           ; SOURCE LINE # 530
039C         ?C0067:
                                           ; SOURCE LINE # 532
039C 300005            JNB     interrupt_flag,?C0070
                                           ; SOURCE LINE # 533
039F C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 534
03A1 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 535
03A4         ?C0070:
                                           ; SOURCE LINE # 537
03A4 E500        R     MOV     A,index
03A6 700C              JNZ     ?C0071
                                           ; SOURCE LINE # 538
03A8 AE00        R     MOV     R6,pwm_input+02H
03AA AF00        R     MOV     R7,pwm_input+03H
03AC 120000      E     LCALL   _abs
03AF 120000      E     LCALL   _PWM_MOTORS_WriteCompare1
03B2 800A              SJMP    ?C0072
03B4         ?C0071:
                                           ; SOURCE LINE # 540
03B4 AE00        R     MOV     R6,pwm_input+02H
03B6 AF00        R     MOV     R7,pwm_input+03H
03B8 120000      E     LCALL   _abs
03BB 120000      E     LCALL   _PWM_MOTORS_WriteCompare2
03BE         ?C0072:
                                           ; SOURCE LINE # 542
03BE 300005            JNB     interrupt_flag,?C0040
                                           ; SOURCE LINE # 543
03C1 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 544
03C3 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 545
                                           ; SOURCE LINE # 546
03C6         ?C0040:
03C6 22                RET     
             ; FUNCTION _motor_control (END)

             ; FUNCTION analog_read_end (BEGIN)
                                           ; SOURCE LINE # 552
0000         ?C0074:
                                           ; SOURCE LINE # 576
0000 120000      E     LCALL   ADC_STATUS_Read
0003 EF                MOV     A,R7
0004 700A              JNZ     ?C0075
                                           ; SOURCE LINE # 577
0006 3000F7            JNB     interrupt_flag,?C0074
                                           ; SOURCE LINE # 578
0009 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 579
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 37  

000B 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 580
                                           ; SOURCE LINE # 581
000E 80F0              SJMP    ?C0074
0010         ?C0075:
                                           ; SOURCE LINE # 584
0010 900000      E     MOV     DPTR,#ADC_buf+01H
0013 E0                MOVX    A,@DPTR
0014 249A              ADD     A,#09AH
0016 FF                MOV     R7,A
0017 900000      E     MOV     DPTR,#ADC_buf
001A E0                MOVX    A,@DPTR
001B 34F9              ADDC    A,#0F9H
001D FE                MOV     R6,A
001E 33                RLC     A
001F 95E0              SUBB    A,ACC
0021 FD                MOV     R5,A
0022 FC                MOV     R4,A
0023 E4                CLR     A
0024 7BA0              MOV     R3,#0A0H
0026 7A07              MOV     R2,#07H
0028 F9                MOV     R1,A
0029 F8                MOV     R0,A
002A 120000      E     LCALL   ?C?LMUL
002D 7807              MOV     R0,#07H
002F 120000      E     LCALL   ?C?SLSHR
0032 900000      E     MOV     DPTR,#dev_tension
0035 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 586
0038 300005            JNB     interrupt_flag,?C0077
                                           ; SOURCE LINE # 587
003B C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 588
003D 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 589
0040         ?C0077:
                                           ; SOURCE LINE # 593
0040 E4                CLR     A
0041 FF                MOV     R7,A
0042 FE                MOV     R6,A
0043 FD                MOV     R5,A
0044 FC                MOV     R4,A
0045 900000      E     MOV     DPTR,#dev_tension
0048 E0                MOVX    A,@DPTR
0049 F8                MOV     R0,A
004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C F9                MOV     R1,A
004D A3                INC     DPTR
004E E0                MOVX    A,@DPTR
004F FA                MOV     R2,A
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 FB                MOV     R3,A
0053 D3                SETB    C
0054 120000      E     LCALL   ?C?SLCMP
0057 5003              JNC     $ + 5H
0059 020000      R     LJMP    ?C0078
                                           ; SOURCE LINE # 596
005C 120000      R     LCALL   pwm_limit_search
                                           ; SOURCE LINE # 600
005F 300005            JNB     interrupt_flag,?C0079
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 38  

                                           ; SOURCE LINE # 601
0062 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 602
0064 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 603
0067         ?C0079:
                                           ; SOURCE LINE # 606
0067 900000      E     MOV     DPTR,#ADC_buf+03H
006A E0                MOVX    A,@DPTR
006B 249A              ADD     A,#09AH
006D FF                MOV     R7,A
006E 900000      E     MOV     DPTR,#ADC_buf+02H
0071 E0                MOVX    A,@DPTR
0072 34F9              ADDC    A,#0F9H
0074 FE                MOV     R6,A
0075 33                RLC     A
0076 95E0              SUBB    A,ACC
0078 FD                MOV     R5,A
0079 FC                MOV     R4,A
007A E4                CLR     A
007B 7BAB              MOV     R3,#0ABH
007D 7A64              MOV     R2,#064H
007F F9                MOV     R1,A
0080 F8                MOV     R0,A
0081 120000      E     LCALL   ?C?LMUL
0084 780D              MOV     R0,#0DH
0086 120000      E     LCALL   ?C?SLSHR
0089 EE                MOV     A,R6
008A 33                RLC     A
008B 95E0              SUBB    A,ACC
008D FD                MOV     R5,A
008E FC                MOV     R4,A
008F 120000      E     LCALL   _filter_i1
0092 900000      E     MOV     DPTR,#g_meas+08H
0095 EE                MOV     A,R6
0096 F0                MOVX    @DPTR,A
0097 A3                INC     DPTR
0098 EF                MOV     A,R7
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 610
009A 300005            JNB     interrupt_flag,?C0080
                                           ; SOURCE LINE # 611
009D C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 612
009F 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 613
00A2         ?C0080:
                                           ; SOURCE LINE # 614
00A2 900000      E     MOV     DPTR,#ADC_buf+05H
00A5 E0                MOVX    A,@DPTR
00A6 249A              ADD     A,#09AH
00A8 FF                MOV     R7,A
00A9 900000      E     MOV     DPTR,#ADC_buf+04H
00AC E0                MOVX    A,@DPTR
00AD 34F9              ADDC    A,#0F9H
00AF FE                MOV     R6,A
00B0 33                RLC     A
00B1 95E0              SUBB    A,ACC
00B3 FD                MOV     R5,A
00B4 FC                MOV     R4,A
00B5 E4                CLR     A
00B6 7BAB              MOV     R3,#0ABH
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 39  

00B8 7A64              MOV     R2,#064H
00BA F9                MOV     R1,A
00BB F8                MOV     R0,A
00BC 120000      E     LCALL   ?C?LMUL
00BF 780D              MOV     R0,#0DH
00C1 120000      E     LCALL   ?C?SLSHR
00C4 EE                MOV     A,R6
00C5 33                RLC     A
00C6 95E0              SUBB    A,ACC
00C8 FD                MOV     R5,A
00C9 FC                MOV     R4,A
00CA 120000      E     LCALL   _filter_i2
00CD 900000      E     MOV     DPTR,#g_meas+0AH
00D0 EE                MOV     A,R6
00D1 F0                MOVX    @DPTR,A
00D2 A3                INC     DPTR
00D3 EF                MOV     A,R7
00D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 618
00D5 300012            JNB     interrupt_flag,?C0082
                                           ; SOURCE LINE # 619
00D8 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 620
00DA 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 621
                                           ; SOURCE LINE # 622
00DD 800B              SJMP    ?C0082
00DF         ?C0078:
                                           ; SOURCE LINE # 623
                                           ; SOURCE LINE # 624
00DF E4                CLR     A
00E0 900000      E     MOV     DPTR,#g_meas+08H
00E3 F0                MOVX    @DPTR,A
00E4 A3                INC     DPTR
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 625
00E6 A3                INC     DPTR
00E7 F0                MOVX    @DPTR,A
00E8 A3                INC     DPTR
00E9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 626
00EA         ?C0082:
                                           ; SOURCE LINE # 629
00EA 900000      E     MOV     DPTR,#ADC_buf+07H
00ED E0                MOVX    A,@DPTR
00EE 249A              ADD     A,#09AH
00F0 FE                MOV     R6,A
00F1 900000      E     MOV     DPTR,#ADC_buf+06H
00F4 E0                MOVX    A,@DPTR
00F5 34F9              ADDC    A,#0F9H
00F7 900000      E     MOV     DPTR,#g_meas+016H
00FA F0                MOVX    @DPTR,A
00FB A3                INC     DPTR
00FC CE                XCH     A,R6
00FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 636
00FE 900000      E     MOV     DPTR,#g_mem+044H
0101 E0                MOVX    A,@DPTR
0102 FC                MOV     R4,A
0103 A3                INC     DPTR
0104 E0                MOVX    A,@DPTR
0105 FD                MOV     R5,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 40  

0106 A3                INC     DPTR
0107 E0                MOVX    A,@DPTR
0108 FE                MOV     R6,A
0109 A3                INC     DPTR
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C EC                MOV     A,R4
010D 120000      E     LCALL   ?C?FCASTL
0110 7B32              MOV     R3,#032H
0112 7A55              MOV     R2,#055H
0114 797D              MOV     R1,#07DH
0116 7841              MOV     R0,#041H
0118 120000      E     LCALL   ?C?FPMUL
011B 120000      E     LCALL   ?C?CASTF
011E 900000      R     MOV     DPTR,#tmaf
0121 EE                MOV     A,R6
0122 F0                MOVX    @DPTR,A
0123 A3                INC     DPTR
0124 EF                MOV     A,R7
0125 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 637
0126 900000      E     MOV     DPTR,#g_mem+048H
0129 E0                MOVX    A,@DPTR
012A FC                MOV     R4,A
012B A3                INC     DPTR
012C E0                MOVX    A,@DPTR
012D FD                MOV     R5,A
012E A3                INC     DPTR
012F E0                MOVX    A,@DPTR
0130 FE                MOV     R6,A
0131 A3                INC     DPTR
0132 E0                MOVX    A,@DPTR
0133 FF                MOV     R7,A
0134 EC                MOV     A,R4
0135 120000      E     LCALL   ?C?FCASTL
0138 E4                CLR     A
0139 FB                MOV     R3,A
013A FA                MOV     R2,A
013B 79B4              MOV     R1,#0B4H
013D 7841              MOV     R0,#041H
013F 120000      E     LCALL   ?C?FPMUL
0142 120000      E     LCALL   ?C?CASTF
0145 900000      R     MOV     DPTR,#tmif
0148 EE                MOV     A,R6
0149 F0                MOVX    @DPTR,A
014A A3                INC     DPTR
014B EF                MOV     A,R7
014C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 639
014D 900000      E     MOV     DPTR,#ADC_buf+09H
0150 E0                MOVX    A,@DPTR
0151 24C9              ADD     A,#0C9H
0153 FF                MOV     R7,A
0154 900000      E     MOV     DPTR,#ADC_buf+08H
0157 E0                MOVX    A,@DPTR
0158 34FF              ADDC    A,#0FFH
015A FE                MOV     R6,A
015B 900000      E     MOV     DPTR,#g_meas+01AH
015E F0                MOVX    @DPTR,A
015F A3                INC     DPTR
0160 EF                MOV     A,R7
0161 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 41  

                                           ; SOURCE LINE # 641
0162 D3                SETB    C
0163 94C0              SUBB    A,#0C0H
0165 EE                MOV     A,R6
0166 6480              XRL     A,#080H
0168 948D              SUBB    A,#08DH
016A 400A              JC      ?C0083
                                           ; SOURCE LINE # 642
016C 900000      E     MOV     DPTR,#g_meas+01AH
016F 740D              MOV     A,#0DH
0171 F0                MOVX    @DPTR,A
0172 A3                INC     DPTR
0173 74C0              MOV     A,#0C0H
0175 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 643
0176         ?C0083:
                                           ; SOURCE LINE # 647
0176 300005            JNB     interrupt_flag,?C0084
                                           ; SOURCE LINE # 648
0179 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 649
017B 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 650
017E         ?C0084:
                                           ; SOURCE LINE # 652
017E 900000      E     MOV     DPTR,#g_mem+050H
0181 E0                MOVX    A,@DPTR
0182 7003              JNZ     $ + 5H
0184 020000      R     LJMP    ?C0103
                                           ; SOURCE LINE # 653
0187 300003      E     JNB     motor_pulse_started,$ + 6H
018A 020000      R     LJMP    ?C0086
                                           ; SOURCE LINE # 655
018D 900000      R     MOV     DPTR,#tmif
0190 E0                MOVX    A,@DPTR
0191 FE                MOV     R6,A
0192 A3                INC     DPTR
0193 E0                MOVX    A,@DPTR
0194 FF                MOV     R7,A
0195 C3                CLR     C
0196 900000      E     MOV     DPTR,#g_meas+01BH
0199 E0                MOVX    A,@DPTR
019A 9F                SUBB    A,R7
019B EE                MOV     A,R6
019C 6480              XRL     A,#080H
019E F8                MOV     R0,A
019F 900000      E     MOV     DPTR,#g_meas+01AH
01A2 E0                MOVX    A,@DPTR
01A3 6480              XRL     A,#080H
01A5 98                SUBB    A,R0
01A6 5019              JNC     ?C0087
                                           ; SOURCE LINE # 656
01A8 E4                CLR     A
01A9 FF                MOV     R7,A
01AA FE                MOV     R6,A
01AB FD                MOV     R5,A
01AC FC                MOV     R4,A
01AD 900000      E     MOV     DPTR,#g_meas+01CH
01B0 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 660
01B3 200003      E     JB      interrupt_flag,$ + 6H
01B6 020000      R     LJMP    ?C0089
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 42  

                                           ; SOURCE LINE # 661
01B9 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 662
01BB 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 665
01BE 020000      R     LJMP    ?C0089
01C1         ?C0087:
                                           ; SOURCE LINE # 666
01C1 900000      R     MOV     DPTR,#tmaf
01C4 E0                MOVX    A,@DPTR
01C5 FE                MOV     R6,A
01C6 A3                INC     DPTR
01C7 E0                MOVX    A,@DPTR
01C8 FF                MOV     R7,A
01C9 D3                SETB    C
01CA 900000      E     MOV     DPTR,#g_meas+01BH
01CD E0                MOVX    A,@DPTR
01CE 9F                SUBB    A,R7
01CF EE                MOV     A,R6
01D0 6480              XRL     A,#080H
01D2 F8                MOV     R0,A
01D3 900000      E     MOV     DPTR,#g_meas+01AH
01D6 E0                MOVX    A,@DPTR
01D7 6480              XRL     A,#080H
01D9 98                SUBB    A,R0
01DA 4019              JC      ?C0090
                                           ; SOURCE LINE # 667
01DC E4                CLR     A
01DD FF                MOV     R7,A
01DE FE                MOV     R6,A
01DF FD                MOV     R5,A
01E0 FC                MOV     R4,A
01E1 900000      E     MOV     DPTR,#g_meas+01CH
01E4 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 671
01E7 200003      E     JB      interrupt_flag,$ + 6H
01EA 020000      R     LJMP    ?C0089
                                           ; SOURCE LINE # 672
01ED C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 673
01EF 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 674
                                           ; SOURCE LINE # 676
01F2 020000      R     LJMP    ?C0089
01F5         ?C0090:
                                           ; SOURCE LINE # 677
01F5 900000      R     MOV     DPTR,#tmif
01F8 E0                MOVX    A,@DPTR
01F9 FC                MOV     R4,A
01FA A3                INC     DPTR
01FB E0                MOVX    A,@DPTR
01FC FD                MOV     R5,A
01FD EC                MOV     A,R4
01FE 120000      E     LCALL   ?C?FCASTI
0201 C004              PUSH    AR4
0203 C005              PUSH    AR5
0205 C006              PUSH    AR6
0207 C007              PUSH    AR7
0209 900000      R     MOV     DPTR,#tmaf
020C E0                MOVX    A,@DPTR
020D FC                MOV     R4,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 43  

020E A3                INC     DPTR
020F E0                MOVX    A,@DPTR
0210 FD                MOV     R5,A
0211 EC                MOV     A,R4
0212 120000      E     LCALL   ?C?FCASTI
0215 D003              POP     AR3
0217 D002              POP     AR2
0219 D001              POP     AR1
021B D000              POP     AR0
021D 120000      E     LCALL   ?C?FPSUB
0220 C004              PUSH    AR4
0222 C005              PUSH    AR5
0224 C006              PUSH    AR6
0226 C007              PUSH    AR7
0228 900000      R     MOV     DPTR,#tmif
022B E0                MOVX    A,@DPTR
022C FC                MOV     R4,A
022D A3                INC     DPTR
022E E0                MOVX    A,@DPTR
022F FD                MOV     R5,A
0230 EC                MOV     A,R4
0231 120000      E     LCALL   ?C?FCASTI
0234 C004              PUSH    AR4
0236 C005              PUSH    AR5
0238 C006              PUSH    AR6
023A C007              PUSH    AR7
023C 900000      E     MOV     DPTR,#g_meas+01AH
023F E0                MOVX    A,@DPTR
0240 FC                MOV     R4,A
0241 A3                INC     DPTR
0242 E0                MOVX    A,@DPTR
0243 FD                MOV     R5,A
0244 EC                MOV     A,R4
0245 120000      E     LCALL   ?C?FCASTI
0248 D003              POP     AR3
024A D002              POP     AR2
024C D001              POP     AR1
024E D000              POP     AR0
0250 120000      E     LCALL   ?C?FPSUB
0253 D003              POP     AR3
0255 D002              POP     AR2
0257 D001              POP     AR1
0259 D000              POP     AR0
025B 120000      E     LCALL   ?C?FPDIV
025E E4                CLR     A
025F FB                MOV     R3,A
0260 FA                MOV     R2,A
0261 795C              MOV     R1,#05CH
0263 7842              MOV     R0,#042H
0265 120000      E     LCALL   ?C?FPMUL
0268 900000      E     MOV     DPTR,#g_meas+01CH
026B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 681
026E 300005            JNB     interrupt_flag,?C0093
                                           ; SOURCE LINE # 682
0271 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 683
0273 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 684
0276         ?C0093:
                                           ; SOURCE LINE # 686
0276 900000      E     MOV     DPTR,#g_meas+01CH
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 44  

0279 E0                MOVX    A,@DPTR
027A FC                MOV     R4,A
027B A3                INC     DPTR
027C E0                MOVX    A,@DPTR
027D FD                MOV     R5,A
027E A3                INC     DPTR
027F E0                MOVX    A,@DPTR
0280 FE                MOV     R6,A
0281 A3                INC     DPTR
0282 E0                MOVX    A,@DPTR
0283 FF                MOV     R7,A
0284 E4                CLR     A
0285 FB                MOV     R3,A
0286 FA                MOV     R2,A
0287 79AA              MOV     R1,#0AAH
0289 7842              MOV     R0,#042H
028B 120000      E     LCALL   ?C?FPADD
028E 900000      E     MOV     DPTR,#g_meas+01CH
0291 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 690
0294 300005            JNB     interrupt_flag,?C0089
                                           ; SOURCE LINE # 691
0297 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 692
0299 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 693
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 695
029C         ?C0089:
                                           ; SOURCE LINE # 696
029C 900000      E     MOV     DPTR,#g_meas+01CH
029F E0                MOVX    A,@DPTR
02A0 FC                MOV     R4,A
02A1 A3                INC     DPTR
02A2 E0                MOVX    A,@DPTR
02A3 FD                MOV     R5,A
02A4 A3                INC     DPTR
02A5 E0                MOVX    A,@DPTR
02A6 FE                MOV     R6,A
02A7 A3                INC     DPTR
02A8 E0                MOVX    A,@DPTR
02A9 FF                MOV     R7,A
02AA 900000      E     MOV     DPTR,#pulse_counter_float
02AD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 697
02B0 900000      E     MOV     DPTR,#pulse_counter_float
02B3 E0                MOVX    A,@DPTR
02B4 FC                MOV     R4,A
02B5 A3                INC     DPTR
02B6 E0                MOVX    A,@DPTR
02B7 FD                MOV     R5,A
02B8 A3                INC     DPTR
02B9 E0                MOVX    A,@DPTR
02BA FE                MOV     R6,A
02BB A3                INC     DPTR
02BC E0                MOVX    A,@DPTR
02BD FF                MOV     R7,A
02BE 120000      E     LCALL   ?C?CASTF
02C1 900000      E     MOV     DPTR,#pulse_counter
02C4 EE                MOV     A,R6
02C5 F0                MOVX    @DPTR,A
02C6 A3                INC     DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 45  

02C7 EF                MOV     A,R7
02C8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 701
02C9 300005            JNB     interrupt_flag,?C0095
                                           ; SOURCE LINE # 702
02CC C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 703
02CE 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 704
02D1         ?C0095:
                                           ; SOURCE LINE # 706
02D1 900000      E     MOV     DPTR,#pulse_counter
02D4 E0                MOVX    A,@DPTR
02D5 FE                MOV     R6,A
02D6 A3                INC     DPTR
02D7 E0                MOVX    A,@DPTR
02D8 FF                MOV     R7,A
02D9 120000      R     LCALL   _set_servo
                                           ; SOURCE LINE # 707
02DC D200        E     SETB    motor_pulse_started
                                           ; SOURCE LINE # 711
02DE 200003      E     JB      interrupt_flag,$ + 6H
02E1 020000      R     LJMP    ?C0103
                                           ; SOURCE LINE # 712
02E4 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 713
02E6 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 714
                                           ; SOURCE LINE # 716
02E9 22                RET     
02EA         ?C0086:
                                           ; SOURCE LINE # 717
02EA E4                CLR     A
02EB FF                MOV     R7,A
02EC FE                MOV     R6,A
02ED 7DAA              MOV     R5,#0AAH
02EF 7C42              MOV     R4,#042H
02F1 900000      E     MOV     DPTR,#pulse_counter_float
02F4 E0                MOVX    A,@DPTR
02F5 F8                MOV     R0,A
02F6 A3                INC     DPTR
02F7 E0                MOVX    A,@DPTR
02F8 F9                MOV     R1,A
02F9 A3                INC     DPTR
02FA E0                MOVX    A,@DPTR
02FB FA                MOV     R2,A
02FC A3                INC     DPTR
02FD E0                MOVX    A,@DPTR
02FE FB                MOV     R3,A
02FF 120000      E     LCALL   ?C?FPCMP3
0302 6002              JZ      $ + 4H
0304 5003              JNC     $ + 5H
0306 020000      R     LJMP    ?C0098
                                           ; SOURCE LINE # 718
0309 900000      E     MOV     DPTR,#pulse_counter_float
030C E0                MOVX    A,@DPTR
030D FC                MOV     R4,A
030E A3                INC     DPTR
030F E0                MOVX    A,@DPTR
0310 FD                MOV     R5,A
0311 A3                INC     DPTR
0312 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 46  

0313 FE                MOV     R6,A
0314 A3                INC     DPTR
0315 E0                MOVX    A,@DPTR
0316 FF                MOV     R7,A
0317 120000      E     LCALL   ?C?CASTF
031A 900000      E     MOV     DPTR,#pulse_counter
031D EE                MOV     A,R6
031E F0                MOVX    @DPTR,A
031F A3                INC     DPTR
0320 EF                MOV     A,R7
0321 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 719
0322 120000      R     LCALL   _set_servo
                                           ; SOURCE LINE # 723
0325 300005            JNB     interrupt_flag,?C0099
                                           ; SOURCE LINE # 724
0328 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 725
032A 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 726
032D         ?C0099:
                                           ; SOURCE LINE # 728
032D 900000      E     MOV     DPTR,#pulse_counter_float
0330 E0                MOVX    A,@DPTR
0331 FC                MOV     R4,A
0332 A3                INC     DPTR
0333 E0                MOVX    A,@DPTR
0334 FD                MOV     R5,A
0335 A3                INC     DPTR
0336 E0                MOVX    A,@DPTR
0337 FE                MOV     R6,A
0338 A3                INC     DPTR
0339 E0                MOVX    A,@DPTR
033A FF                MOV     R7,A
033B C004              PUSH    AR4
033D C005              PUSH    AR5
033F C006              PUSH    AR6
0341 C007              PUSH    AR7
0343 E4                CLR     A
0344 FF                MOV     R7,A
0345 FE                MOV     R6,A
0346 7DA8              MOV     R5,#0A8H
0348 7CC2              MOV     R4,#0C2H
034A 900000      E     MOV     DPTR,#g_meas+01CH
034D E0                MOVX    A,@DPTR
034E F8                MOV     R0,A
034F A3                INC     DPTR
0350 E0                MOVX    A,@DPTR
0351 F9                MOV     R1,A
0352 A3                INC     DPTR
0353 E0                MOVX    A,@DPTR
0354 FA                MOV     R2,A
0355 A3                INC     DPTR
0356 E0                MOVX    A,@DPTR
0357 FB                MOV     R3,A
0358 120000      E     LCALL   ?C?FPADD
035B 7B3B              MOV     R3,#03BH
035D 7A40              MOV     R2,#040H
035F 798B              MOV     R1,#08BH
0361 7837              MOV     R0,#037H
0363 120000      E     LCALL   ?C?FPMUL
0366 C004              PUSH    AR4
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 47  

0368 C005              PUSH    AR5
036A C006              PUSH    AR6
036C C007              PUSH    AR7
036E 900000      E     MOV     DPTR,#g_mem+055H
0371 E0                MOVX    A,@DPTR
0372 FC                MOV     R4,A
0373 A3                INC     DPTR
0374 E0                MOVX    A,@DPTR
0375 FD                MOV     R5,A
0376 A3                INC     DPTR
0377 E0                MOVX    A,@DPTR
0378 FE                MOV     R6,A
0379 A3                INC     DPTR
037A E0                MOVX    A,@DPTR
037B FF                MOV     R7,A
037C EC                MOV     A,R4
037D 120000      E     LCALL   ?C?FCASTL
0380 D003              POP     AR3
0382 D002              POP     AR2
0384 D001              POP     AR1
0386 D000              POP     AR0
0388 120000      E     LCALL   ?C?FPMUL
038B A804              MOV     R0,AR4
038D A905              MOV     R1,AR5
038F AA06              MOV     R2,AR6
0391 AB07              MOV     R3,AR7
0393 D007              POP     AR7
0395 D006              POP     AR6
0397 D005              POP     AR5
0399 D004              POP     AR4
039B 120000      E     LCALL   ?C?FPSUB
039E 900000      E     MOV     DPTR,#pulse_counter_float
03A1 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 729
03A4 D200        E     SETB    motor_pulse_started
                                           ; SOURCE LINE # 733
03A6 300017            JNB     interrupt_flag,?C0103
                                           ; SOURCE LINE # 734
03A9 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 735
03AB 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 736
                                           ; SOURCE LINE # 738
03AE 22                RET     
03AF         ?C0098:
                                           ; SOURCE LINE # 739
03AF 7F55              MOV     R7,#055H
03B1 7E00              MOV     R6,#00H
03B3 120000      R     LCALL   _set_servo
                                           ; SOURCE LINE # 740
03B6 C200        E     CLR     motor_pulse_started
                                           ; SOURCE LINE # 744
03B8 300005            JNB     interrupt_flag,?C0103
                                           ; SOURCE LINE # 745
03BB C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 746
03BD 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 747
                                           ; SOURCE LINE # 748
                                           ; SOURCE LINE # 749
                                           ; SOURCE LINE # 750
                                           ; SOURCE LINE # 751
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 48  

03C0         ?C0103:
03C0 22                RET     
             ; FUNCTION analog_read_end (END)

             ; FUNCTION _encoder_reading (BEGIN)
                                           ; SOURCE LINE # 757
0000 900000      R     MOV     DPTR,#flag
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
;---- Variable 'idx' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 758
                                           ; SOURCE LINE # 759
0005 8F00        R     MOV     index,R7
                                           ; SOURCE LINE # 777
0007 E500        R     MOV     A,index
0009 C3                CLR     C
000A 9402              SUBB    A,#02H
000C 4003              JC      $ + 5H
000E 020000      R     LJMP    ?C0105
0011         ?C0104:
                                           ; SOURCE LINE # 780
0011 300022            JNB     reset_last_value_flag,?C0106
                                           ; SOURCE LINE # 781
;---- Variable 'jj' assigned to Register 'R3' ----
0014 7B02              MOV     R3,#02H
0016         ?C0107:
0016 AF03              MOV     R7,AR3
0018 1B                DEC     R3
0019 EF                MOV     A,R7
001A 6018              JZ      ?C0108
                                           ; SOURCE LINE # 782
001C E4                CLR     A
001D FF                MOV     R7,A
001E FE                MOV     R6,A
001F FD                MOV     R5,A
0020 FC                MOV     R4,A
0021 EB                MOV     A,R3
0022 25E0              ADD     A,ACC
0024 25E0              ADD     A,ACC
0026 2400        R     ADD     A,#LOW last_value_encoder
0028 F582              MOV     DPL,A
002A E4                CLR     A
002B 3400        R     ADDC    A,#HIGH last_value_encoder
002D F583              MOV     DPH,A
002F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 783
0032 80E2              SJMP    ?C0107
0034         ?C0108:
                                           ; SOURCE LINE # 784
0034 C200        E     CLR     reset_last_value_flag
                                           ; SOURCE LINE # 785
0036         ?C0106:
                                           ; SOURCE LINE # 788
0036 E500        R     MOV     A,index
0038 7013              JNZ     ?C0109
                                           ; SOURCE LINE # 789
003A 120000      E     LCALL   SHIFTREG_ENC_1_ReadData
003D EF                MOV     A,R7
003E EE                MOV     A,R6
003F ED                MOV     A,R5
0040 5403              ANL     A,#03H
0042 FD                MOV     R5,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 49  

0043 E4                CLR     A
0044 FC                MOV     R4,A
0045 900000      R     MOV     DPTR,#data_encoder
0048 120000      E     LCALL   ?C?LSTXDATA
004B 8011              SJMP    ?C0110
004D         ?C0109:
                                           ; SOURCE LINE # 791
004D 120000      E     LCALL   SHIFTREG_ENC_2_ReadData
0050 EF                MOV     A,R7
0051 EE                MOV     A,R6
0052 ED                MOV     A,R5
0053 5403              ANL     A,#03H
0055 FD                MOV     R5,A
0056 E4                CLR     A
0057 FC                MOV     R4,A
0058 900000      R     MOV     DPTR,#data_encoder
005B 120000      E     LCALL   ?C?LSTXDATA
005E         ?C0110:
                                           ; SOURCE LINE # 793
005E 7B01              MOV     R3,#01H
0060 7A00        R     MOV     R2,#HIGH data_encoder
0062 7900        R     MOV     R1,#LOW data_encoder
0064 120000      E     LCALL   _check_enc_data
0067 4003              JC      $ + 5H
0069 020000      R     LJMP    ?C0105
                                           ; SOURCE LINE # 795
006C 900000      R     MOV     DPTR,#data_encoder
006F E0                MOVX    A,@DPTR
0070 FC                MOV     R4,A
0071 A3                INC     DPTR
0072 E0                MOVX    A,@DPTR
0073 FD                MOV     R5,A
0074 A3                INC     DPTR
0075 E0                MOVX    A,@DPTR
0076 FE                MOV     R6,A
0077 A3                INC     DPTR
0078 E0                MOVX    A,@DPTR
0079 54C0              ANL     A,#0C0H
007B FF                MOV     R7,A
007C EE                MOV     A,R6
007D ED                MOV     A,R5
007E 5403              ANL     A,#03H
0080 FD                MOV     R5,A
0081 E4                CLR     A
0082 FC                MOV     R4,A
0083 7802              MOV     R0,#02H
0085 120000      E     LCALL   ?C?ULSHR
0088 C3                CLR     C
0089 E4                CLR     A
008A 9F                SUBB    A,R7
008B FB                MOV     R3,A
008C 7480              MOV     A,#080H
008E 9E                SUBB    A,R6
008F FA                MOV     R2,A
0090 E4                CLR     A
0091 9D                SUBB    A,R5
0092 F9                MOV     R1,A
0093 E4                CLR     A
0094 9C                SUBB    A,R4
0095 F8                MOV     R0,A
0096 E500        R     MOV     A,index
0098 25E0              ADD     A,ACC
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 50  

009A 25E0              ADD     A,ACC
009C 2400        E     ADD     A,#LOW g_mem+013H
009E F582              MOV     DPL,A
00A0 E4                CLR     A
00A1 3400        E     ADDC    A,#HIGH g_mem+013H
00A3 F583              MOV     DPH,A
00A5 E0                MOVX    A,@DPTR
00A6 FC                MOV     R4,A
00A7 A3                INC     DPTR
00A8 E0                MOVX    A,@DPTR
00A9 FD                MOV     R5,A
00AA A3                INC     DPTR
00AB E0                MOVX    A,@DPTR
00AC FE                MOV     R6,A
00AD A3                INC     DPTR
00AE E0                MOVX    A,@DPTR
00AF 2B                ADD     A,R3
00B0 FF                MOV     R7,A
00B1 EA                MOV     A,R2
00B2 3E                ADDC    A,R6
00B3 FE                MOV     R6,A
00B4 E9                MOV     A,R1
00B5 3D                ADDC    A,R5
00B6 FD                MOV     R5,A
00B7 E8                MOV     A,R0
00B8 3C                ADDC    A,R4
00B9 FC                MOV     R4,A
00BA 120000      E     LCALL   ?C?LNEG
00BD EE                MOV     A,R6
00BE 33                RLC     A
00BF 95E0              SUBB    A,ACC
00C1 FD                MOV     R5,A
00C2 FC                MOV     R4,A
00C3 900000      R     MOV     DPTR,#value_encoder
00C6 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 798
00C9 900000      R     MOV     DPTR,#value_encoder
00CC E0                MOVX    A,@DPTR
00CD FC                MOV     R4,A
00CE A3                INC     DPTR
00CF E0                MOVX    A,@DPTR
00D0 FD                MOV     R5,A
00D1 A3                INC     DPTR
00D2 E0                MOVX    A,@DPTR
00D3 FE                MOV     R6,A
00D4 A3                INC     DPTR
00D5 E0                MOVX    A,@DPTR
00D6 FF                MOV     R7,A
00D7 120000      E     LCALL   ?C?LNEG
00DA 900000      R     MOV     DPTR,#value_encoder
00DD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 801
00E0 300027            JNB     only_first_time,?C0112
                                           ; SOURCE LINE # 802
00E3 900000      R     MOV     DPTR,#value_encoder
00E6 E0                MOVX    A,@DPTR
00E7 FC                MOV     R4,A
00E8 A3                INC     DPTR
00E9 E0                MOVX    A,@DPTR
00EA FD                MOV     R5,A
00EB A3                INC     DPTR
00EC E0                MOVX    A,@DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 51  

00ED FE                MOV     R6,A
00EE A3                INC     DPTR
00EF E0                MOVX    A,@DPTR
00F0 FF                MOV     R7,A
00F1 E500        R     MOV     A,index
00F3 25E0              ADD     A,ACC
00F5 25E0              ADD     A,ACC
00F7 2400        R     ADD     A,#LOW last_value_encoder
00F9 F582              MOV     DPL,A
00FB E4                CLR     A
00FC 3400        R     ADDC    A,#HIGH last_value_encoder
00FE F583              MOV     DPH,A
0100 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 804
0103 E500        R     MOV     A,index
0105 B40102            CJNE    A,#01H,?C0112
                                           ; SOURCE LINE # 805
0108 C200        R     CLR     only_first_time
                                           ; SOURCE LINE # 806
010A         ?C0112:
                                           ; SOURCE LINE # 809
010A E500        R     MOV     A,index
010C 25E0              ADD     A,ACC
010E 25E0              ADD     A,ACC
0110 2400        R     ADD     A,#LOW last_value_encoder
0112 F582              MOV     DPL,A
0114 E4                CLR     A
0115 3400        R     ADDC    A,#HIGH last_value_encoder
0117 F583              MOV     DPH,A
0119 E0                MOVX    A,@DPTR
011A F8                MOV     R0,A
011B A3                INC     DPTR
011C E0                MOVX    A,@DPTR
011D F9                MOV     R1,A
011E A3                INC     DPTR
011F E0                MOVX    A,@DPTR
0120 FA                MOV     R2,A
0121 A3                INC     DPTR
0122 E0                MOVX    A,@DPTR
0123 FB                MOV     R3,A
0124 900000      R     MOV     DPTR,#value_encoder
0127 E0                MOVX    A,@DPTR
0128 FC                MOV     R4,A
0129 A3                INC     DPTR
012A E0                MOVX    A,@DPTR
012B FD                MOV     R5,A
012C A3                INC     DPTR
012D E0                MOVX    A,@DPTR
012E FE                MOV     R6,A
012F A3                INC     DPTR
0130 E0                MOVX    A,@DPTR
0131 C3                CLR     C
0132 9B                SUBB    A,R3
0133 FF                MOV     R7,A
0134 EE                MOV     A,R6
0135 9A                SUBB    A,R2
0136 FE                MOV     R6,A
0137 ED                MOV     A,R5
0138 99                SUBB    A,R1
0139 FD                MOV     R5,A
013A EC                MOV     A,R4
013B 98                SUBB    A,R0
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 52  

013C FC                MOV     R4,A
013D A3                INC     DPTR
013E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 829
0141 E4                CLR     A
0142 FF                MOV     R7,A
0143 7EC0              MOV     R6,#0C0H
0145 FD                MOV     R5,A
0146 FC                MOV     R4,A
0147 900000      R     MOV     DPTR,#aux
014A E0                MOVX    A,@DPTR
014B F8                MOV     R0,A
014C A3                INC     DPTR
014D E0                MOVX    A,@DPTR
014E F9                MOV     R1,A
014F A3                INC     DPTR
0150 E0                MOVX    A,@DPTR
0151 FA                MOV     R2,A
0152 A3                INC     DPTR
0153 E0                MOVX    A,@DPTR
0154 FB                MOV     R3,A
0155 D3                SETB    C
0156 120000      E     LCALL   ?C?SLCMP
0159 4010              JC      ?C0114
                                           ; SOURCE LINE # 830
015B 7400        E     MOV     A,#LOW g_meas+0CH
015D 2500        R     ADD     A,index
015F F582              MOV     DPL,A
0161 E4                CLR     A
0162 3400        E     ADDC    A,#HIGH g_meas+0CH
0164 F583              MOV     DPH,A
0166 E0                MOVX    A,@DPTR
0167 14                DEC     A
0168 F0                MOVX    @DPTR,A
0169 8068              SJMP    ?C0115
016B         ?C0114:
                                           ; SOURCE LINE # 831
                                           ; SOURCE LINE # 832
016B 7F00              MOV     R7,#00H
016D 7E40              MOV     R6,#040H
016F 7DFF              MOV     R5,#0FFH
0171 7CFF              MOV     R4,#0FFH
0173 900000      R     MOV     DPTR,#aux
0176 E0                MOVX    A,@DPTR
0177 F8                MOV     R0,A
0178 A3                INC     DPTR
0179 E0                MOVX    A,@DPTR
017A F9                MOV     R1,A
017B A3                INC     DPTR
017C E0                MOVX    A,@DPTR
017D FA                MOV     R2,A
017E A3                INC     DPTR
017F E0                MOVX    A,@DPTR
0180 FB                MOV     R3,A
0181 C3                CLR     C
0182 120000      E     LCALL   ?C?SLCMP
0185 5010              JNC     ?C0116
                                           ; SOURCE LINE # 833
0187 7400        E     MOV     A,#LOW g_meas+0CH
0189 2500        R     ADD     A,index
018B F582              MOV     DPL,A
018D E4                CLR     A
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 53  

018E 3400        E     ADDC    A,#HIGH g_meas+0CH
0190 F583              MOV     DPH,A
0192 E0                MOVX    A,@DPTR
0193 04                INC     A
0194 F0                MOVX    @DPTR,A
0195 803C              SJMP    ?C0115
0197         ?C0116:
                                           ; SOURCE LINE # 834
                                           ; SOURCE LINE # 835
0197 900000      R     MOV     DPTR,#aux
019A E0                MOVX    A,@DPTR
019B A3                INC     DPTR
019C E0                MOVX    A,@DPTR
019D A3                INC     DPTR
019E E0                MOVX    A,@DPTR
019F FE                MOV     R6,A
01A0 A3                INC     DPTR
01A1 E0                MOVX    A,@DPTR
01A2 FF                MOV     R7,A
01A3 120000      E     LCALL   _abs
01A6 D3                SETB    C
01A7 EF                MOV     A,R7
01A8 9400              SUBB    A,#00H
01AA EE                MOV     A,R6
01AB 6480              XRL     A,#080H
01AD 94C0              SUBB    A,#0C0H
01AF 4022              JC      ?C0115
                                           ; SOURCE LINE # 836
01B1 7400        R     MOV     A,#LOW error
01B3 2500        R     ADD     A,index
01B5 F582              MOV     DPL,A
01B7 E4                CLR     A
01B8 3400        R     ADDC    A,#HIGH error
01BA F583              MOV     DPH,A
01BC E0                MOVX    A,@DPTR
01BD 04                INC     A
01BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 837
01BF 7400        R     MOV     A,#LOW error
01C1 2500        R     ADD     A,index
01C3 F582              MOV     DPL,A
01C5 E4                CLR     A
01C6 3400        R     ADDC    A,#HIGH error
01C8 F583              MOV     DPH,A
01CA E0                MOVX    A,@DPTR
01CB C3                CLR     C
01CC 940A              SUBB    A,#0AH
01CE 5003              JNC     $ + 5H
01D0 020000      R     LJMP    ?C0105
01D3         ?C0119:
                                           ; SOURCE LINE # 840
                                           ; SOURCE LINE # 841
                                           ; SOURCE LINE # 842
01D3         ?C0115:
                                           ; SOURCE LINE # 844
01D3 7400        R     MOV     A,#LOW error
01D5 2500        R     ADD     A,index
01D7 F582              MOV     DPL,A
01D9 E4                CLR     A
01DA 3400        R     ADDC    A,#HIGH error
01DC F583              MOV     DPH,A
01DE E4                CLR     A
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 54  

01DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 846
01E0 900000      R     MOV     DPTR,#value_encoder
01E3 E0                MOVX    A,@DPTR
01E4 FC                MOV     R4,A
01E5 A3                INC     DPTR
01E6 E0                MOVX    A,@DPTR
01E7 FD                MOV     R5,A
01E8 A3                INC     DPTR
01E9 E0                MOVX    A,@DPTR
01EA FE                MOV     R6,A
01EB A3                INC     DPTR
01EC E0                MOVX    A,@DPTR
01ED FF                MOV     R7,A
01EE E500        R     MOV     A,index
01F0 25E0              ADD     A,ACC
01F2 25E0              ADD     A,ACC
01F4 2400        R     ADD     A,#LOW last_value_encoder
01F6 F582              MOV     DPL,A
01F8 E4                CLR     A
01F9 3400        R     ADDC    A,#HIGH last_value_encoder
01FB F583              MOV     DPH,A
01FD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 848
0200 900000      R     MOV     DPTR,#value_encoder
0203 E0                MOVX    A,@DPTR
0204 F8                MOV     R0,A
0205 A3                INC     DPTR
0206 E0                MOVX    A,@DPTR
0207 F9                MOV     R1,A
0208 A3                INC     DPTR
0209 E0                MOVX    A,@DPTR
020A FA                MOV     R2,A
020B A3                INC     DPTR
020C E0                MOVX    A,@DPTR
020D FB                MOV     R3,A
020E C000              PUSH    AR0
0210 7400        E     MOV     A,#LOW g_meas+0CH
0212 2500        R     ADD     A,index
0214 F582              MOV     DPL,A
0216 E4                CLR     A
0217 3400        E     ADDC    A,#HIGH g_meas+0CH
0219 F583              MOV     DPH,A
021B E0                MOVX    A,@DPTR
021C FF                MOV     R7,A
021D 33                RLC     A
021E 95E0              SUBB    A,ACC
0220 FE                MOV     R6,A
0221 FD                MOV     R5,A
0222 FC                MOV     R4,A
0223 7810              MOV     R0,#010H
0225 120000      E     LCALL   ?C?LSHL
0228 D000              POP     AR0
022A EB                MOV     A,R3
022B 2F                ADD     A,R7
022C FF                MOV     R7,A
022D EA                MOV     A,R2
022E 3E                ADDC    A,R6
022F FE                MOV     R6,A
0230 E9                MOV     A,R1
0231 3D                ADDC    A,R5
0232 FD                MOV     R5,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 55  

0233 E8                MOV     A,R0
0234 3C                ADDC    A,R4
0235 FC                MOV     R4,A
0236 900000      R     MOV     DPTR,#value_encoder
0239 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 850
023C E500        R     MOV     A,index
023E 25E0              ADD     A,ACC
0240 25E0              ADD     A,ACC
0242 2400        E     ADD     A,#LOW c_mem+01BH
0244 F582              MOV     DPL,A
0246 E4                CLR     A
0247 3400        E     ADDC    A,#HIGH c_mem+01BH
0249 F583              MOV     DPH,A
024B E0                MOVX    A,@DPTR
024C FC                MOV     R4,A
024D A3                INC     DPTR
024E E0                MOVX    A,@DPTR
024F FD                MOV     R5,A
0250 A3                INC     DPTR
0251 E0                MOVX    A,@DPTR
0252 FE                MOV     R6,A
0253 A3                INC     DPTR
0254 E0                MOVX    A,@DPTR
0255 FF                MOV     R7,A
0256 E4                CLR     A
0257 FB                MOV     R3,A
0258 FA                MOV     R2,A
0259 7980              MOV     R1,#080H
025B 783F              MOV     R0,#03FH
025D 120000      E     LCALL   ?C?FPCMP3
0260 6038              JZ      ?C0120
                                           ; SOURCE LINE # 851
0262 900000      R     MOV     DPTR,#value_encoder
0265 E0                MOVX    A,@DPTR
0266 FC                MOV     R4,A
0267 A3                INC     DPTR
0268 E0                MOVX    A,@DPTR
0269 FD                MOV     R5,A
026A A3                INC     DPTR
026B E0                MOVX    A,@DPTR
026C FE                MOV     R6,A
026D A3                INC     DPTR
026E E0                MOVX    A,@DPTR
026F FF                MOV     R7,A
0270 EC                MOV     A,R4
0271 120000      E     LCALL   ?C?FCASTL
0274 E500        R     MOV     A,index
0276 25E0              ADD     A,ACC
0278 25E0              ADD     A,ACC
027A 2400        E     ADD     A,#LOW c_mem+01BH
027C F582              MOV     DPL,A
027E E4                CLR     A
027F 3400        E     ADDC    A,#HIGH c_mem+01BH
0281 F583              MOV     DPH,A
0283 E0                MOVX    A,@DPTR
0284 F8                MOV     R0,A
0285 A3                INC     DPTR
0286 E0                MOVX    A,@DPTR
0287 F9                MOV     R1,A
0288 A3                INC     DPTR
0289 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 56  

028A FA                MOV     R2,A
028B A3                INC     DPTR
028C E0                MOVX    A,@DPTR
028D FB                MOV     R3,A
028E 120000      E     LCALL   ?C?FPMUL
0291 120000      E     LCALL   ?C?CASTF
0294 900000      R     MOV     DPTR,#value_encoder
0297 120000      E     LCALL   ?C?LSTXDATA
029A         ?C0120:
                                           ; SOURCE LINE # 853
029A 900000      R     MOV     DPTR,#value_encoder
029D E0                MOVX    A,@DPTR
029E FC                MOV     R4,A
029F A3                INC     DPTR
02A0 E0                MOVX    A,@DPTR
02A1 FD                MOV     R5,A
02A2 A3                INC     DPTR
02A3 E0                MOVX    A,@DPTR
02A4 FE                MOV     R6,A
02A5 A3                INC     DPTR
02A6 E0                MOVX    A,@DPTR
02A7 FF                MOV     R7,A
02A8 E500        R     MOV     A,index
02AA 25E0              ADD     A,ACC
02AC 25E0              ADD     A,ACC
02AE 2400        E     ADD     A,#LOW g_meas
02B0 F582              MOV     DPL,A
02B2 E4                CLR     A
02B3 3400        E     ADDC    A,#HIGH g_meas
02B5 F583              MOV     DPH,A
02B7 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 854
                                           ; SOURCE LINE # 876
02BA         ?C0105:
02BA 22                RET     
             ; FUNCTION _encoder_reading (END)

             ; FUNCTION calibration (BEGIN)
                                           ; SOURCE LINE # 883
                                           ; SOURCE LINE # 884
                                           ; SOURCE LINE # 891
0000 900000      E     MOV     DPTR,#calibration_flag
0003 E0                MOVX    A,@DPTR
0004 24FE              ADD     A,#0FEH
0006 7003              JNZ     $ + 5H
0008 020000      R     LJMP    ?C0126
000B 14                DEC     A
000C 7003              JNZ     $ + 5H
000E 020000      R     LJMP    ?C0131
0011 14                DEC     A
0012 6076              JZ      ?C0124
0014 14                DEC     A
0015 7003              JNZ     $ + 5H
0017 020000      R     LJMP    ?C0129
001A 2404              ADD     A,#04H
001C 6003              JZ      $ + 5H
001E 020000      R     LJMP    ?C0135
                                           ; SOURCE LINE # 892
0021         ?C0122:
                                           ; SOURCE LINE # 893
0021 120000      E     LCALL   ISR_RS485_RX_Disable
                                           ; SOURCE LINE # 896
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 57  

0024 900000      E     MOV     DPTR,#c_mem+02H
0027 E0                MOVX    A,@DPTR
0028 FC                MOV     R4,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FD                MOV     R5,A
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FE                MOV     R6,A
002F A3                INC     DPTR
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#old_k_p
0035 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 897
0038 900000      E     MOV     DPTR,#c_mem+06H
003B E0                MOVX    A,@DPTR
003C FC                MOV     R4,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F FD                MOV     R5,A
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 FE                MOV     R6,A
0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 900000      R     MOV     DPTR,#old_k_i
0049 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 898
004C 900000      E     MOV     DPTR,#c_mem+0AH
004F E0                MOVX    A,@DPTR
0050 FC                MOV     R4,A
0051 A3                INC     DPTR
0052 E0                MOVX    A,@DPTR
0053 FD                MOV     R5,A
0054 A3                INC     DPTR
0055 E0                MOVX    A,@DPTR
0056 FE                MOV     R6,A
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A 900000      R     MOV     DPTR,#old_k_d
005D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 901
0060 E4                CLR     A
0061 FF                MOV     R7,A
0062 FE                MOV     R6,A
0063 FD                MOV     R5,A
0064 FC                MOV     R4,A
0065 900000      E     MOV     DPTR,#g_refNew
0068 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 902
006B E4                CLR     A
006C FF                MOV     R7,A
006D FE                MOV     R6,A
006E FD                MOV     R5,A
006F FC                MOV     R4,A
0070 900000      E     MOV     DPTR,#g_refNew+04H
0073 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 905
0076 900000      E     MOV     DPTR,#g_refNew+08H
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 58  

0079 E0                MOVX    A,@DPTR
007A 5403              ANL     A,#03H
007C 7005              JNZ     ?C0123
                                           ; SOURCE LINE # 906
007E 7F03              MOV     R7,#03H
0080 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 907
0083         ?C0123:
                                           ; SOURCE LINE # 910
0083 900000      E     MOV     DPTR,#calibration_flag
0086 7404              MOV     A,#04H
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 911
0089 22                RET     
                                           ; SOURCE LINE # 913
008A         ?C0124:
                                           ; SOURCE LINE # 914
008A 900000      R     MOV     DPTR,#pause_counter
008D E0                MOVX    A,@DPTR
008E 04                INC     A
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 916
0090 E0                MOVX    A,@DPTR
0091 640A              XRL     A,#0AH
0093 6003              JZ      $ + 5H
0095 020000      R     LJMP    ?C0135
                                           ; SOURCE LINE # 917
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 920
0099 7F99              MOV     R7,#099H
009B 7E19              MOV     R6,#019H
009D FD                MOV     R5,A
009E FC                MOV     R4,A
009F 900000      E     MOV     DPTR,#c_mem+02H
00A2 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 921
00A5 E4                CLR     A
00A6 FF                MOV     R7,A
00A7 FE                MOV     R6,A
00A8 FD                MOV     R5,A
00A9 FC                MOV     R4,A
00AA 900000      E     MOV     DPTR,#c_mem+06H
00AD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 922
00B0 E4                CLR     A
00B1 7FCC              MOV     R7,#0CCH
00B3 7E4C              MOV     R6,#04CH
00B5 FD                MOV     R5,A
00B6 FC                MOV     R4,A
00B7 900000      E     MOV     DPTR,#c_mem+0AH
00BA 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 924
00BD 900000      E     MOV     DPTR,#calibration_flag
00C0 7402              MOV     A,#02H
00C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 925
                                           ; SOURCE LINE # 926
00C3 22                RET     
                                           ; SOURCE LINE # 928
00C4         ?C0126:
                                           ; SOURCE LINE # 930
00C4 900000      E     MOV     DPTR,#g_refNew
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 59  

00C7 E0                MOVX    A,@DPTR
00C8 FC                MOV     R4,A
00C9 A3                INC     DPTR
00CA E0                MOVX    A,@DPTR
00CB FD                MOV     R5,A
00CC A3                INC     DPTR
00CD E0                MOVX    A,@DPTR
00CE FE                MOV     R6,A
00CF A3                INC     DPTR
00D0 E0                MOVX    A,@DPTR
00D1 245B              ADD     A,#05BH
00D3 FF                MOV     R7,A
00D4 E4                CLR     A
00D5 3E                ADDC    A,R6
00D6 FE                MOV     R6,A
00D7 E4                CLR     A
00D8 3D                ADDC    A,R5
00D9 FD                MOV     R5,A
00DA E4                CLR     A
00DB 3C                ADDC    A,R4
00DC FC                MOV     R4,A
00DD 900000      E     MOV     DPTR,#g_refNew
00E0 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 931
00E3 900000      E     MOV     DPTR,#g_refNew+04H
00E6 E0                MOVX    A,@DPTR
00E7 FC                MOV     R4,A
00E8 A3                INC     DPTR
00E9 E0                MOVX    A,@DPTR
00EA FD                MOV     R5,A
00EB A3                INC     DPTR
00EC E0                MOVX    A,@DPTR
00ED FE                MOV     R6,A
00EE A3                INC     DPTR
00EF E0                MOVX    A,@DPTR
00F0 C3                CLR     C
00F1 945B              SUBB    A,#05BH
00F3 FF                MOV     R7,A
00F4 EE                MOV     A,R6
00F5 9400              SUBB    A,#00H
00F7 FE                MOV     R6,A
00F8 ED                MOV     A,R5
00F9 9400              SUBB    A,#00H
00FB FD                MOV     R5,A
00FC EC                MOV     A,R4
00FD 9400              SUBB    A,#00H
00FF FC                MOV     R4,A
0100 900000      E     MOV     DPTR,#g_refNew+04H
0103 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 934
0106 D3                SETB    C
0107 900000      E     MOV     DPTR,#g_meas+09H
010A E0                MOVX    A,@DPTR
010B 94E8              SUBB    A,#0E8H
010D 900000      E     MOV     DPTR,#g_meas+08H
0110 E0                MOVX    A,@DPTR
0111 6480              XRL     A,#080H
0113 9483              SUBB    A,#083H
0115 5013              JNC     ?C0128
0117 900000      E     MOV     DPTR,#g_meas+0BH
011A E0                MOVX    A,@DPTR
011B 94E8              SUBB    A,#0E8H
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 60  

011D 900000      E     MOV     DPTR,#g_meas+0AH
0120 E0                MOVX    A,@DPTR
0121 6480              XRL     A,#080H
0123 9483              SUBB    A,#083H
0125 5003              JNC     $ + 5H
0127 020000      R     LJMP    ?C0135
012A         ?C0128:
                                           ; SOURCE LINE # 936
012A 900000      E     MOV     DPTR,#g_ref
012D E0                MOVX    A,@DPTR
012E A3                INC     DPTR
012F E0                MOVX    A,@DPTR
0130 A3                INC     DPTR
0131 E0                MOVX    A,@DPTR
0132 FF                MOV     R7,A
0133 A3                INC     DPTR
0134 E0                MOVX    A,@DPTR
0135 900000      E     MOV     DPTR,#g_mem+034H
0138 CF                XCH     A,R7
0139 F0                MOVX    @DPTR,A
013A A3                INC     DPTR
013B EF                MOV     A,R7
013C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 939
013D 900000      R     MOV     DPTR,#old_k_p
0140 E0                MOVX    A,@DPTR
0141 FC                MOV     R4,A
0142 A3                INC     DPTR
0143 E0                MOVX    A,@DPTR
0144 FD                MOV     R5,A
0145 A3                INC     DPTR
0146 E0                MOVX    A,@DPTR
0147 FE                MOV     R6,A
0148 A3                INC     DPTR
0149 E0                MOVX    A,@DPTR
014A FF                MOV     R7,A
014B 900000      E     MOV     DPTR,#c_mem+02H
014E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 940
0151 900000      R     MOV     DPTR,#old_k_i
0154 E0                MOVX    A,@DPTR
0155 FC                MOV     R4,A
0156 A3                INC     DPTR
0157 E0                MOVX    A,@DPTR
0158 FD                MOV     R5,A
0159 A3                INC     DPTR
015A E0                MOVX    A,@DPTR
015B FE                MOV     R6,A
015C A3                INC     DPTR
015D E0                MOVX    A,@DPTR
015E FF                MOV     R7,A
015F 900000      E     MOV     DPTR,#c_mem+06H
0162 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 941
0165 900000      R     MOV     DPTR,#old_k_d
0168 E0                MOVX    A,@DPTR
0169 FC                MOV     R4,A
016A A3                INC     DPTR
016B E0                MOVX    A,@DPTR
016C FD                MOV     R5,A
016D A3                INC     DPTR
016E E0                MOVX    A,@DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 61  

016F FE                MOV     R6,A
0170 A3                INC     DPTR
0171 E0                MOVX    A,@DPTR
0172 FF                MOV     R7,A
0173 900000      E     MOV     DPTR,#c_mem+0AH
0176 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 944
0179 E4                CLR     A
017A FF                MOV     R7,A
017B FE                MOV     R6,A
017C FD                MOV     R5,A
017D FC                MOV     R4,A
017E 900000      E     MOV     DPTR,#g_refNew
0181 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 945
0184 E4                CLR     A
0185 FF                MOV     R7,A
0186 FE                MOV     R6,A
0187 FD                MOV     R5,A
0188 FC                MOV     R4,A
0189 900000      E     MOV     DPTR,#g_refNew+04H
018C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 948
018F 900000      E     MOV     DPTR,#calibration_flag
0192 7405              MOV     A,#05H
0194 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 949
                                           ; SOURCE LINE # 950
0195 22                RET     
                                           ; SOURCE LINE # 952
0196         ?C0129:
                                           ; SOURCE LINE # 953
0196 900000      R     MOV     DPTR,#pause_counter
0199 E0                MOVX    A,@DPTR
019A 04                INC     A
019B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 955
019C E0                MOVX    A,@DPTR
019D 640A              XRL     A,#0AH
019F 7029              JNZ     ?C0135
                                           ; SOURCE LINE # 956
01A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 958
01A2 900000      E     MOV     DPTR,#calibration_flag
01A5 7403              MOV     A,#03H
01A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 959
                                           ; SOURCE LINE # 960
01A8 22                RET     
                                           ; SOURCE LINE # 962
01A9         ?C0131:
                                           ; SOURCE LINE # 964
01A9 900000      E     MOV     DPTR,#g_refNew+08H
01AC E0                MOVX    A,@DPTR
01AD 5403              ANL     A,#03H
01AF 7004              JNZ     ?C0132
                                           ; SOURCE LINE # 965
01B1 FF                MOV     R7,A
01B2 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 966
01B5         ?C0132:
                                           ; SOURCE LINE # 969
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 62  

01B5 7F08              MOV     R7,#08H
01B7 7E00              MOV     R6,#00H
01B9 120000      E     LCALL   _memStore
                                           ; SOURCE LINE # 970
01BC E4                CLR     A
01BD FF                MOV     R7,A
01BE FE                MOV     R6,A
01BF 120000      E     LCALL   _memStore
                                           ; SOURCE LINE # 972
01C2 E4                CLR     A
01C3 900000      E     MOV     DPTR,#calibration_flag
01C6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 974
01C7 120000      E     LCALL   ISR_RS485_RX_Enable
                                           ; SOURCE LINE # 975
                                           ; SOURCE LINE # 977
                                           ; SOURCE LINE # 978
                                           ; SOURCE LINE # 979
                                           ; SOURCE LINE # 980
                                           ; SOURCE LINE # 981
01CA         ?C0135:
01CA 22                RET     
             ; FUNCTION calibration (END)

             ; FUNCTION pwm_limit_search (BEGIN)
                                           ; SOURCE LINE # 988
                                           ; SOURCE LINE # 991
0000 750063      R     MOV     max_tension,#063H
0003 75009C      R     MOV     max_tension+01H,#09CH
                                           ; SOURCE LINE # 992
0006 750039      R     MOV     max_tension_6v_mod,#039H
0009 75009E      R     MOV     max_tension_6v_mod+01H,#09EH
                                           ; SOURCE LINE # 994
000C C3                CLR     C
000D 900000      E     MOV     DPTR,#g_mem+05AH
0010 E0                MOVX    A,@DPTR
0011 9440              SUBB    A,#040H
0013 900000      E     MOV     DPTR,#g_mem+059H
0016 E0                MOVX    A,@DPTR
0017 941F              SUBB    A,#01FH
0019 507E              JNC     ?C0136
                                           ; SOURCE LINE # 996
001B AE00        R     MOV     R6,max_tension_6v_mod
001D AF00        R     MOV     R7,max_tension_6v_mod+01H
001F E4                CLR     A
0020 FC                MOV     R4,A
0021 FD                MOV     R5,A
0022 900000      E     MOV     DPTR,#dev_tension
0025 E0                MOVX    A,@DPTR
0026 F8                MOV     R0,A
0027 A3                INC     DPTR
0028 E0                MOVX    A,@DPTR
0029 F9                MOV     R1,A
002A A3                INC     DPTR
002B E0                MOVX    A,@DPTR
002C FA                MOV     R2,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FB                MOV     R3,A
0030 120000      E     LCALL   ?C?SLCMP
0033 4006              JC      ?C0137
                                           ; SOURCE LINE # 997
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 63  

0035 E4                CLR     A
0036 900000      E     MOV     DPTR,#dev_pwm_limit
0039 F0                MOVX    @DPTR,A
003A 22                RET     
003B         ?C0137:
                                           ; SOURCE LINE # 999
                                           ; SOURCE LINE # 1000
003B 900000      E     MOV     DPTR,#g_mem+059H
003E E0                MOVX    A,@DPTR
003F FE                MOV     R6,A
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 E4                CLR     A
0044 FC                MOV     R4,A
0045 FD                MOV     R5,A
0046 900000      E     MOV     DPTR,#dev_tension
0049 E0                MOVX    A,@DPTR
004A F8                MOV     R0,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D F9                MOV     R1,A
004E A3                INC     DPTR
004F E0                MOVX    A,@DPTR
0050 FA                MOV     R2,A
0051 A3                INC     DPTR
0052 E0                MOVX    A,@DPTR
0053 FB                MOV     R3,A
0054 C3                CLR     C
0055 120000      E     LCALL   ?C?SLCMP
0058 5007              JNC     ?C0139
                                           ; SOURCE LINE # 1001
005A 900000      E     MOV     DPTR,#dev_pwm_limit
005D 7464              MOV     A,#064H
005F F0                MOVX    @DPTR,A
0060 22                RET     
0061         ?C0139:
                                           ; SOURCE LINE # 1002
                                           ; SOURCE LINE # 1003
0061 900000      E     MOV     DPTR,#g_mem+059H
0064 E0                MOVX    A,@DPTR
0065 FE                MOV     R6,A
0066 A3                INC     DPTR
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 FB                MOV     R3,A
006A AA06              MOV     R2,AR6
006C E4                CLR     A
006D 900000      E     MOV     DPTR,#dev_tension
0070 E0                MOVX    A,@DPTR
0071 FC                MOV     R4,A
0072 A3                INC     DPTR
0073 E0                MOVX    A,@DPTR
0074 FD                MOV     R5,A
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 FE                MOV     R6,A
0078 A3                INC     DPTR
0079 E0                MOVX    A,@DPTR
007A C3                CLR     C
007B 9B                SUBB    A,R3
007C FF                MOV     R7,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 64  

007D EE                MOV     A,R6
007E 9A                SUBB    A,R2
007F FE                MOV     R6,A
0080 ED                MOV     A,R5
0081 9400              SUBB    A,#00H
0083 FD                MOV     R5,A
0084 EC                MOV     A,R4
0085 9400              SUBB    A,#00H
0087 FC                MOV     R4,A
0088 7809              MOV     R0,#09H
008A 120000      E     LCALL   ?C?SLSHR
008D 8F00        R     MOV     index,R7
                                           ; SOURCE LINE # 1004
008F EF                MOV     A,R7
0090 900000      R     MOV     DPTR,#hitech_pwm_preload_values_6v
0093 93                MOVC    A,@A+DPTR
0094 900000      E     MOV     DPTR,#dev_pwm_limit
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1005
                                           ; SOURCE LINE # 1006
                                           ; SOURCE LINE # 1007
0098 22                RET     
0099         ?C0136:
                                           ; SOURCE LINE # 1008
                                           ; SOURCE LINE # 1010
0099 AE00        R     MOV     R6,max_tension
009B AF00        R     MOV     R7,max_tension+01H
009D E4                CLR     A
009E FC                MOV     R4,A
009F FD                MOV     R5,A
00A0 900000      E     MOV     DPTR,#dev_tension
00A3 E0                MOVX    A,@DPTR
00A4 F8                MOV     R0,A
00A5 A3                INC     DPTR
00A6 E0                MOVX    A,@DPTR
00A7 F9                MOV     R1,A
00A8 A3                INC     DPTR
00A9 E0                MOVX    A,@DPTR
00AA FA                MOV     R2,A
00AB A3                INC     DPTR
00AC E0                MOVX    A,@DPTR
00AD FB                MOV     R3,A
00AE D3                SETB    C
00AF 120000      E     LCALL   ?C?SLCMP
00B2 4006              JC      ?C0142
                                           ; SOURCE LINE # 1011
00B4 E4                CLR     A
00B5 900000      E     MOV     DPTR,#dev_pwm_limit
00B8 F0                MOVX    @DPTR,A
00B9 22                RET     
00BA         ?C0142:
                                           ; SOURCE LINE # 1012
                                           ; SOURCE LINE # 1013
00BA 900000      E     MOV     DPTR,#g_mem+059H
00BD E0                MOVX    A,@DPTR
00BE FE                MOV     R6,A
00BF A3                INC     DPTR
00C0 E0                MOVX    A,@DPTR
00C1 FF                MOV     R7,A
00C2 E4                CLR     A
00C3 FC                MOV     R4,A
00C4 FD                MOV     R5,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 65  

00C5 900000      E     MOV     DPTR,#dev_tension
00C8 E0                MOVX    A,@DPTR
00C9 F8                MOV     R0,A
00CA A3                INC     DPTR
00CB E0                MOVX    A,@DPTR
00CC F9                MOV     R1,A
00CD A3                INC     DPTR
00CE E0                MOVX    A,@DPTR
00CF FA                MOV     R2,A
00D0 A3                INC     DPTR
00D1 E0                MOVX    A,@DPTR
00D2 FB                MOV     R3,A
00D3 C3                CLR     C
00D4 120000      E     LCALL   ?C?SLCMP
00D7 5007              JNC     ?C0144
                                           ; SOURCE LINE # 1014
00D9 900000      E     MOV     DPTR,#dev_pwm_limit
00DC 7464              MOV     A,#064H
00DE F0                MOVX    @DPTR,A
00DF 22                RET     
00E0         ?C0144:
                                           ; SOURCE LINE # 1015
                                           ; SOURCE LINE # 1016
00E0 900000      E     MOV     DPTR,#dev_tension
00E3 E0                MOVX    A,@DPTR
00E4 FC                MOV     R4,A
00E5 A3                INC     DPTR
00E6 E0                MOVX    A,@DPTR
00E7 FD                MOV     R5,A
00E8 A3                INC     DPTR
00E9 E0                MOVX    A,@DPTR
00EA FE                MOV     R6,A
00EB A3                INC     DPTR
00EC E0                MOVX    A,@DPTR
00ED 24C0              ADD     A,#0C0H
00EF FF                MOV     R7,A
00F0 EE                MOV     A,R6
00F1 34E0              ADDC    A,#0E0H
00F3 FE                MOV     R6,A
00F4 ED                MOV     A,R5
00F5 34FF              ADDC    A,#0FFH
00F7 FD                MOV     R5,A
00F8 EC                MOV     A,R4
00F9 34FF              ADDC    A,#0FFH
00FB FC                MOV     R4,A
00FC 7809              MOV     R0,#09H
00FE 120000      E     LCALL   ?C?SLSHR
0101 8F00        R     MOV     index,R7
                                           ; SOURCE LINE # 1017
0103 C3                CLR     C
0104 900000      E     MOV     DPTR,#g_mem+05AH
0107 E0                MOVX    A,@DPTR
0108 94EC              SUBB    A,#0ECH
010A 900000      E     MOV     DPTR,#g_mem+059H
010D E0                MOVX    A,@DPTR
010E 942C              SUBB    A,#02CH
0110 500A              JNC     ?C0146
                                           ; SOURCE LINE # 1018
0112 EF                MOV     A,R7
0113 900000      R     MOV     DPTR,#hitech_pwm_preload_values
0116 93                MOVC    A,@A+DPTR
0117 900000      E     MOV     DPTR,#dev_pwm_limit
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 66  

011A F0                MOVX    @DPTR,A
011B 22                RET     
011C         ?C0146:
                                           ; SOURCE LINE # 1020
011C E500        R     MOV     A,index
011E 900000      R     MOV     DPTR,#pwm_preload_values
0121 93                MOVC    A,@A+DPTR
0122 900000      E     MOV     DPTR,#dev_pwm_limit
0125 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1021
                                           ; SOURCE LINE # 1022
                                           ; SOURCE LINE # 1023
                                           ; SOURCE LINE # 1024
0126         ?C0148:
0126 22                RET     
             ; FUNCTION pwm_limit_search (END)

             ; FUNCTION _set_servo (BEGIN)
                                           ; SOURCE LINE # 1030
;---- Variable 'duty' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1033
0000 C3                CLR     C
0001 EF                MOV     A,R7
0002 9455              SUBB    A,#055H
0004 EE                MOV     A,R6
0005 6480              XRL     A,#080H
0007 9480              SUBB    A,#080H
0009 5004              JNC     ?C0149
                                           ; SOURCE LINE # 1034
000B 7E00              MOV     R6,#00H
000D 7F55              MOV     R7,#055H
                                           ; SOURCE LINE # 1035
000F         ?C0149:
                                           ; SOURCE LINE # 1036
000F D3                SETB    C
0010 EF                MOV     A,R7
0011 948C              SUBB    A,#08CH
0013 EE                MOV     A,R6
0014 6480              XRL     A,#080H
0016 9480              SUBB    A,#080H
0018 4004              JC      ?C0150
                                           ; SOURCE LINE # 1037
001A 7E00              MOV     R6,#00H
001C 7F8C              MOV     R7,#08CH
                                           ; SOURCE LINE # 1038
001E         ?C0150:
                                           ; SOURCE LINE # 1041
001E 120000      E     LCALL   _PWM_1_WriteCompare
                                           ; SOURCE LINE # 1042
0021 22                RET     
             ; FUNCTION _set_servo (END)

             ; FUNCTION get_servo (BEGIN)
                                           ; SOURCE LINE # 1048
                                           ; SOURCE LINE # 1053
0000 120000      E     LCALL   PWM_1_ReadCompare
0003 900000      R     MOV     DPTR,#duty
0006 EE                MOV     A,R6
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 67  

                                           ; SOURCE LINE # 1055
000B C3                CLR     C
000C 9455              SUBB    A,#055H
000E EE                MOV     A,R6
000F 9400              SUBB    A,#00H
0011 5009              JNC     ?C0152
                                           ; SOURCE LINE # 1056
0013 900000      R     MOV     DPTR,#duty
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
0018 A3                INC     DPTR
0019 7455              MOV     A,#055H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1057
001C         ?C0152:
                                           ; SOURCE LINE # 1058
001C D3                SETB    C
001D 900000      R     MOV     DPTR,#duty+01H
0020 E0                MOVX    A,@DPTR
0021 948C              SUBB    A,#08CH
0023 900000      R     MOV     DPTR,#duty
0026 E0                MOVX    A,@DPTR
0027 9400              SUBB    A,#00H
0029 4006              JC      ?C0153
                                           ; SOURCE LINE # 1059
002B E4                CLR     A
002C F0                MOVX    @DPTR,A
002D A3                INC     DPTR
002E 748C              MOV     A,#08CH
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1060
0031         ?C0153:
                                           ; SOURCE LINE # 1062
0031 900000      R     MOV     DPTR,#duty
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 900000      E     MOV     DPTR,#g_meas+018H
003B CF                XCH     A,R7
003C F0                MOVX    @DPTR,A
003D A3                INC     DPTR
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1063
0040 22                RET     
             ; FUNCTION get_servo (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4003    ----
   CONSTANT SIZE    =     97    ----
   XDATA SIZE       =    167      13
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6      29
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
C51 COMPILER V9.51   INTERRUPTIONS                                                         10/12/2016 16:01:23 PAGE 68  

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
